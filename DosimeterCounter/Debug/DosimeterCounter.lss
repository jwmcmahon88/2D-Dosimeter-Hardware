
DosimeterCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d528  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d528  0040d528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000994  20000000  0040d530  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000be2c  20000994  0040dec4  00018994  2**2
                  ALLOC
  4 .stack        00003000  2000c7c0  00419cf0  00018994  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00018994  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000189c2  2**0
                  CONTENTS, READONLY
  7 .debug_info   000103d5  00000000  00000000  00018a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002a7c  00000000  00000000  00028df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009f8  00000000  00000000  0002b86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000195bf  00000000  00000000  0002c266  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000df3d  00000000  00000000  00045825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000662b2  00000000  00000000  00053762  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000056d6  00000000  00000000  000b9a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009c0  00000000  00000000  000bf0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002990  00000000  00000000  000bfaac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000f7c0 	.word	0x2000f7c0
  400004:	00402ea1 	.word	0x00402ea1
  400008:	00402e9d 	.word	0x00402e9d
  40000c:	00402e9d 	.word	0x00402e9d
  400010:	00402e9d 	.word	0x00402e9d
  400014:	00402e9d 	.word	0x00402e9d
  400018:	00402e9d 	.word	0x00402e9d
	...
  40002c:	00402e9d 	.word	0x00402e9d
  400030:	00402e9d 	.word	0x00402e9d
  400034:	00000000 	.word	0x00000000
  400038:	00402e9d 	.word	0x00402e9d
  40003c:	00402e9d 	.word	0x00402e9d
  400040:	00402e9d 	.word	0x00402e9d
  400044:	00402e9d 	.word	0x00402e9d
  400048:	00402e9d 	.word	0x00402e9d
  40004c:	00402e9d 	.word	0x00402e9d
  400050:	00402e9d 	.word	0x00402e9d
  400054:	00402e9d 	.word	0x00402e9d
  400058:	00402e9d 	.word	0x00402e9d
  40005c:	00402e9d 	.word	0x00402e9d
  400060:	00402e9d 	.word	0x00402e9d
  400064:	00401021 	.word	0x00401021
  400068:	00401035 	.word	0x00401035
  40006c:	00401049 	.word	0x00401049
  400070:	0040105d 	.word	0x0040105d
  400074:	00401071 	.word	0x00401071
  400078:	00402e9d 	.word	0x00402e9d
  40007c:	00402e9d 	.word	0x00402e9d
  400080:	00402e9d 	.word	0x00402e9d
  400084:	00402e9d 	.word	0x00402e9d
  400088:	00402e9d 	.word	0x00402e9d
  40008c:	00402e9d 	.word	0x00402e9d
  400090:	00402e9d 	.word	0x00402e9d
  400094:	00402e9d 	.word	0x00402e9d
  400098:	00402e9d 	.word	0x00402e9d
  40009c:	00402e9d 	.word	0x00402e9d
  4000a0:	00402e9d 	.word	0x00402e9d
  4000a4:	00402e9d 	.word	0x00402e9d
  4000a8:	00402e9d 	.word	0x00402e9d
  4000ac:	00402e9d 	.word	0x00402e9d
  4000b0:	00402e9d 	.word	0x00402e9d
  4000b4:	00402e9d 	.word	0x00402e9d
  4000b8:	00402e9d 	.word	0x00402e9d
  4000bc:	00402e9d 	.word	0x00402e9d
  4000c0:	00402e9d 	.word	0x00402e9d
  4000c4:	00402e9d 	.word	0x00402e9d
  4000c8:	00402e9d 	.word	0x00402e9d
  4000cc:	004016a9 	.word	0x004016a9
  4000d0:	00402e9d 	.word	0x00402e9d
  4000d4:	00402e9d 	.word	0x00402e9d
  4000d8:	00402e9d 	.word	0x00402e9d
  4000dc:	00402e9d 	.word	0x00402e9d
  4000e0:	00402e9d 	.word	0x00402e9d
  4000e4:	00402e9d 	.word	0x00402e9d
  4000e8:	00402e9d 	.word	0x00402e9d
  4000ec:	00402e9d 	.word	0x00402e9d
  4000f0:	00402e9d 	.word	0x00402e9d
  4000f4:	00402e9d 	.word	0x00402e9d

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	20000994 	.word	0x20000994
  400114:	00000000 	.word	0x00000000
  400118:	0040d530 	.word	0x0040d530

0040011c <frame_dummy>:
  40011c:	b508      	push	{r3, lr}
  40011e:	4b06      	ldr	r3, [pc, #24]	; (400138 <frame_dummy+0x1c>)
  400120:	b11b      	cbz	r3, 40012a <frame_dummy+0xe>
  400122:	4806      	ldr	r0, [pc, #24]	; (40013c <frame_dummy+0x20>)
  400124:	4906      	ldr	r1, [pc, #24]	; (400140 <frame_dummy+0x24>)
  400126:	f3af 8000 	nop.w
  40012a:	4806      	ldr	r0, [pc, #24]	; (400144 <frame_dummy+0x28>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b113      	cbz	r3, 400136 <frame_dummy+0x1a>
  400130:	4b05      	ldr	r3, [pc, #20]	; (400148 <frame_dummy+0x2c>)
  400132:	b103      	cbz	r3, 400136 <frame_dummy+0x1a>
  400134:	4798      	blx	r3
  400136:	bd08      	pop	{r3, pc}
  400138:	00000000 	.word	0x00000000
  40013c:	0040d530 	.word	0x0040d530
  400140:	20000998 	.word	0x20000998
  400144:	0040d530 	.word	0x0040d530
  400148:	00000000 	.word	0x00000000

0040014c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  40014c:	4b02      	ldr	r3, [pc, #8]	; (400158 <udi_cdc_comm_disable+0xc>)
  40014e:	781a      	ldrb	r2, [r3, #0]
  400150:	3a01      	subs	r2, #1
  400152:	b2d2      	uxtb	r2, r2
  400154:	701a      	strb	r2, [r3, #0]
  400156:	4770      	bx	lr
  400158:	20000ac8 	.word	0x20000ac8

0040015c <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  40015c:	2000      	movs	r0, #0
  40015e:	4770      	bx	lr

00400160 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400160:	2000      	movs	r0, #0
  400162:	4770      	bx	lr

00400164 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400164:	4b1d      	ldr	r3, [pc, #116]	; (4001dc <udi_cdc_comm_setup+0x78>)
  400166:	781b      	ldrb	r3, [r3, #0]
  400168:	f013 0f80 	tst.w	r3, #128	; 0x80
  40016c:	d012      	beq.n	400194 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40016e:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400172:	2b20      	cmp	r3, #32
  400174:	d128      	bne.n	4001c8 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400176:	4b19      	ldr	r3, [pc, #100]	; (4001dc <udi_cdc_comm_setup+0x78>)
  400178:	785b      	ldrb	r3, [r3, #1]
  40017a:	2b21      	cmp	r3, #33	; 0x21
  40017c:	d126      	bne.n	4001cc <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40017e:	4b17      	ldr	r3, [pc, #92]	; (4001dc <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400180:	88db      	ldrh	r3, [r3, #6]
  400182:	2b07      	cmp	r3, #7
  400184:	d124      	bne.n	4001d0 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400186:	4b15      	ldr	r3, [pc, #84]	; (4001dc <udi_cdc_comm_setup+0x78>)
  400188:	4a15      	ldr	r2, [pc, #84]	; (4001e0 <udi_cdc_comm_setup+0x7c>)
  40018a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40018c:	2207      	movs	r2, #7
  40018e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400190:	2001      	movs	r0, #1
  400192:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400194:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400198:	2b20      	cmp	r3, #32
  40019a:	d11b      	bne.n	4001d4 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  40019c:	4b0f      	ldr	r3, [pc, #60]	; (4001dc <udi_cdc_comm_setup+0x78>)
  40019e:	7858      	ldrb	r0, [r3, #1]
  4001a0:	2820      	cmp	r0, #32
  4001a2:	d004      	beq.n	4001ae <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4001a4:	2822      	cmp	r0, #34	; 0x22
  4001a6:	bf14      	ite	ne
  4001a8:	2000      	movne	r0, #0
  4001aa:	2001      	moveq	r0, #1
  4001ac:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4001ae:	4b0b      	ldr	r3, [pc, #44]	; (4001dc <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4001b0:	88db      	ldrh	r3, [r3, #6]
  4001b2:	2b07      	cmp	r3, #7
  4001b4:	d110      	bne.n	4001d8 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  4001b6:	4b09      	ldr	r3, [pc, #36]	; (4001dc <udi_cdc_comm_setup+0x78>)
  4001b8:	4a0a      	ldr	r2, [pc, #40]	; (4001e4 <udi_cdc_comm_setup+0x80>)
  4001ba:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4001bc:	4a08      	ldr	r2, [pc, #32]	; (4001e0 <udi_cdc_comm_setup+0x7c>)
  4001be:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4001c0:	2207      	movs	r2, #7
  4001c2:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4001c4:	2001      	movs	r0, #1
  4001c6:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4001c8:	2000      	movs	r0, #0
  4001ca:	4770      	bx	lr
  4001cc:	2000      	movs	r0, #0
  4001ce:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4001d0:	2000      	movs	r0, #0
  4001d2:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4001d4:	2000      	movs	r0, #0
  4001d6:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4001d8:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  4001da:	4770      	bx	lr
  4001dc:	20000c14 	.word	0x20000c14
  4001e0:	200009b0 	.word	0x200009b0
  4001e4:	004001e9 	.word	0x004001e9

004001e8 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4001e8:	4770      	bx	lr
  4001ea:	bf00      	nop

004001ec <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
  4001ec:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  4001ee:	2300      	movs	r3, #0
  4001f0:	4a10      	ldr	r2, [pc, #64]	; (400234 <udi_cdc_comm_enable+0x48>)
  4001f2:	7013      	strb	r3, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4001f4:	4a10      	ldr	r2, [pc, #64]	; (400238 <udi_cdc_comm_enable+0x4c>)
  4001f6:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  4001f8:	4a10      	ldr	r2, [pc, #64]	; (40023c <udi_cdc_comm_enable+0x50>)
  4001fa:	21a1      	movs	r1, #161	; 0xa1
  4001fc:	7011      	strb	r1, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4001fe:	2120      	movs	r1, #32
  400200:	7051      	strb	r1, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400202:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400204:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400206:	2102      	movs	r1, #2
  400208:	80d1      	strh	r1, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40020a:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40020c:	4a0c      	ldr	r2, [pc, #48]	; (400240 <udi_cdc_comm_enable+0x54>)
  40020e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400212:	6011      	str	r1, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400214:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400216:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400218:	2308      	movs	r3, #8
  40021a:	7193      	strb	r3, [r2, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <udi_cdc_comm_enable+0x58>)
  40021e:	4798      	blx	r3
  400220:	4603      	mov	r3, r0
  400222:	b120      	cbz	r0, 40022e <udi_cdc_comm_enable+0x42>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400224:	4a03      	ldr	r2, [pc, #12]	; (400234 <udi_cdc_comm_enable+0x48>)
  400226:	7811      	ldrb	r1, [r2, #0]
  400228:	3101      	adds	r1, #1
  40022a:	b2c9      	uxtb	r1, r1
  40022c:	7011      	strb	r1, [r2, #0]
	return true;
}
  40022e:	4618      	mov	r0, r3
  400230:	bd08      	pop	{r3, pc}
  400232:	bf00      	nop
  400234:	20000ac8 	.word	0x20000ac8
  400238:	20000af8 	.word	0x20000af8
  40023c:	20000ae0 	.word	0x20000ae0
  400240:	200009b0 	.word	0x200009b0
  400244:	00400f0d 	.word	0x00400f0d

00400248 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400248:	b530      	push	{r4, r5, lr}
  40024a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  40024c:	4b42      	ldr	r3, [pc, #264]	; (400358 <udi_cdc_tx_send+0x110>)
  40024e:	781b      	ldrb	r3, [r3, #0]
  400250:	f013 0fff 	tst.w	r3, #255	; 0xff
  400254:	d17e      	bne.n	400354 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400256:	4b41      	ldr	r3, [pc, #260]	; (40035c <udi_cdc_tx_send+0x114>)
  400258:	4798      	blx	r3
  40025a:	b130      	cbz	r0, 40026a <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  40025c:	4b40      	ldr	r3, [pc, #256]	; (400360 <udi_cdc_tx_send+0x118>)
  40025e:	881c      	ldrh	r4, [r3, #0]
  400260:	4b40      	ldr	r3, [pc, #256]	; (400364 <udi_cdc_tx_send+0x11c>)
  400262:	4798      	blx	r3
  400264:	4284      	cmp	r4, r0
  400266:	d106      	bne.n	400276 <udi_cdc_tx_send+0x2e>
  400268:	e074      	b.n	400354 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  40026a:	4b3d      	ldr	r3, [pc, #244]	; (400360 <udi_cdc_tx_send+0x118>)
  40026c:	881c      	ldrh	r4, [r3, #0]
  40026e:	4b3e      	ldr	r3, [pc, #248]	; (400368 <udi_cdc_tx_send+0x120>)
  400270:	4798      	blx	r3
  400272:	4284      	cmp	r4, r0
  400274:	d06e      	beq.n	400354 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400276:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40027a:	f1d3 0501 	rsbs	r5, r3, #1
  40027e:	bf38      	it	cc
  400280:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400282:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400284:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400288:	2200      	movs	r2, #0
  40028a:	4b38      	ldr	r3, [pc, #224]	; (40036c <udi_cdc_tx_send+0x124>)
  40028c:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40028e:	4b38      	ldr	r3, [pc, #224]	; (400370 <udi_cdc_tx_send+0x128>)
  400290:	781c      	ldrb	r4, [r3, #0]
  400292:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400294:	4b37      	ldr	r3, [pc, #220]	; (400374 <udi_cdc_tx_send+0x12c>)
  400296:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40029a:	b9db      	cbnz	r3, 4002d4 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  40029c:	4b36      	ldr	r3, [pc, #216]	; (400378 <udi_cdc_tx_send+0x130>)
  40029e:	881a      	ldrh	r2, [r3, #0]
  4002a0:	3201      	adds	r2, #1
  4002a2:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4002a4:	4b2d      	ldr	r3, [pc, #180]	; (40035c <udi_cdc_tx_send+0x114>)
  4002a6:	4798      	blx	r3
  4002a8:	b918      	cbnz	r0, 4002b2 <udi_cdc_tx_send+0x6a>
  4002aa:	4b33      	ldr	r3, [pc, #204]	; (400378 <udi_cdc_tx_send+0x130>)
  4002ac:	881b      	ldrh	r3, [r3, #0]
  4002ae:	2b63      	cmp	r3, #99	; 0x63
  4002b0:	d907      	bls.n	4002c2 <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4002b2:	4b2a      	ldr	r3, [pc, #168]	; (40035c <udi_cdc_tx_send+0x114>)
  4002b4:	4798      	blx	r3
  4002b6:	b168      	cbz	r0, 4002d4 <udi_cdc_tx_send+0x8c>
  4002b8:	4b2f      	ldr	r3, [pc, #188]	; (400378 <udi_cdc_tx_send+0x130>)
  4002ba:	881b      	ldrh	r3, [r3, #0]
  4002bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  4002c0:	d208      	bcs.n	4002d4 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4002c2:	2d00      	cmp	r5, #0
  4002c4:	d046      	beq.n	400354 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  4002c6:	2201      	movs	r2, #1
  4002c8:	4b28      	ldr	r3, [pc, #160]	; (40036c <udi_cdc_tx_send+0x124>)
  4002ca:	701a      	strb	r2, [r3, #0]
  4002cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4002d0:	b662      	cpsie	i
  4002d2:	e03f      	b.n	400354 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4002d4:	2200      	movs	r2, #0
  4002d6:	4b28      	ldr	r3, [pc, #160]	; (400378 <udi_cdc_tx_send+0x130>)
  4002d8:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4002da:	4b28      	ldr	r3, [pc, #160]	; (40037c <udi_cdc_tx_send+0x134>)
  4002dc:	781b      	ldrb	r3, [r3, #0]
  4002de:	f013 0fff 	tst.w	r3, #255	; 0xff
  4002e2:	d106      	bne.n	4002f2 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4002e4:	4294      	cmp	r4, r2
  4002e6:	bf14      	ite	ne
  4002e8:	2200      	movne	r2, #0
  4002ea:	2201      	moveq	r2, #1
  4002ec:	4b20      	ldr	r3, [pc, #128]	; (400370 <udi_cdc_tx_send+0x128>)
  4002ee:	701a      	strb	r2, [r3, #0]
  4002f0:	e003      	b.n	4002fa <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4002f2:	f1d4 0401 	rsbs	r4, r4, #1
  4002f6:	bf38      	it	cc
  4002f8:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4002fa:	2201      	movs	r2, #1
  4002fc:	4b16      	ldr	r3, [pc, #88]	; (400358 <udi_cdc_tx_send+0x110>)
  4002fe:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400300:	b125      	cbz	r5, 40030c <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  400302:	4b1a      	ldr	r3, [pc, #104]	; (40036c <udi_cdc_tx_send+0x124>)
  400304:	701a      	strb	r2, [r3, #0]
  400306:	f3bf 8f5f 	dmb	sy
  40030a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  40030c:	4625      	mov	r5, r4
  40030e:	4b19      	ldr	r3, [pc, #100]	; (400374 <udi_cdc_tx_send+0x12c>)
  400310:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  400314:	3c40      	subs	r4, #64	; 0x40
  400316:	bf18      	it	ne
  400318:	2401      	movne	r4, #1
	if (b_short_packet) {
  40031a:	b164      	cbz	r4, 400336 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  40031c:	4b0f      	ldr	r3, [pc, #60]	; (40035c <udi_cdc_tx_send+0x114>)
  40031e:	4798      	blx	r3
  400320:	b120      	cbz	r0, 40032c <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400322:	4b10      	ldr	r3, [pc, #64]	; (400364 <udi_cdc_tx_send+0x11c>)
  400324:	4798      	blx	r3
  400326:	4b0e      	ldr	r3, [pc, #56]	; (400360 <udi_cdc_tx_send+0x118>)
  400328:	8018      	strh	r0, [r3, #0]
  40032a:	e007      	b.n	40033c <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40032c:	4b0e      	ldr	r3, [pc, #56]	; (400368 <udi_cdc_tx_send+0x120>)
  40032e:	4798      	blx	r3
  400330:	4b0b      	ldr	r3, [pc, #44]	; (400360 <udi_cdc_tx_send+0x118>)
  400332:	8018      	strh	r0, [r3, #0]
  400334:	e002      	b.n	40033c <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400336:	2200      	movs	r2, #0
  400338:	4b09      	ldr	r3, [pc, #36]	; (400360 <udi_cdc_tx_send+0x118>)
  40033a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40033c:	4b0d      	ldr	r3, [pc, #52]	; (400374 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  40033e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400342:	4a0f      	ldr	r2, [pc, #60]	; (400380 <udi_cdc_tx_send+0x138>)
  400344:	9200      	str	r2, [sp, #0]
  400346:	2081      	movs	r0, #129	; 0x81
  400348:	4621      	mov	r1, r4
  40034a:	4a0e      	ldr	r2, [pc, #56]	; (400384 <udi_cdc_tx_send+0x13c>)
  40034c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400350:	4c0d      	ldr	r4, [pc, #52]	; (400388 <udi_cdc_tx_send+0x140>)
  400352:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400354:	b003      	add	sp, #12
  400356:	bd30      	pop	{r4, r5, pc}
  400358:	20000adc 	.word	0x20000adc
  40035c:	00402241 	.word	0x00402241
  400360:	20000ad0 	.word	0x20000ad0
  400364:	004022a9 	.word	0x004022a9
  400368:	00402299 	.word	0x00402299
  40036c:	200000e8 	.word	0x200000e8
  400370:	20000a3c 	.word	0x20000a3c
  400374:	20000a40 	.word	0x20000a40
  400378:	20000aec 	.word	0x20000aec
  40037c:	20000af4 	.word	0x20000af4
  400380:	0040038d 	.word	0x0040038d
  400384:	20000a44 	.word	0x20000a44
  400388:	004025f5 	.word	0x004025f5

0040038c <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40038c:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  40038e:	b978      	cbnz	r0, 4003b0 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400390:	4b08      	ldr	r3, [pc, #32]	; (4003b4 <udi_cdc_data_sent+0x28>)
  400392:	781b      	ldrb	r3, [r3, #0]
  400394:	f013 0fff 	tst.w	r3, #255	; 0xff
  400398:	bf14      	ite	ne
  40039a:	2200      	movne	r2, #0
  40039c:	2201      	moveq	r2, #1
  40039e:	4b06      	ldr	r3, [pc, #24]	; (4003b8 <udi_cdc_data_sent+0x2c>)
  4003a0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4003a4:	4b05      	ldr	r3, [pc, #20]	; (4003bc <udi_cdc_data_sent+0x30>)
  4003a6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4003a8:	4b05      	ldr	r3, [pc, #20]	; (4003c0 <udi_cdc_data_sent+0x34>)
  4003aa:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  4003ac:	4b05      	ldr	r3, [pc, #20]	; (4003c4 <udi_cdc_data_sent+0x38>)
  4003ae:	4798      	blx	r3
  4003b0:	bd08      	pop	{r3, pc}
  4003b2:	bf00      	nop
  4003b4:	20000a3c 	.word	0x20000a3c
  4003b8:	20000a40 	.word	0x20000a40
  4003bc:	20000af4 	.word	0x20000af4
  4003c0:	20000adc 	.word	0x20000adc
  4003c4:	00400249 	.word	0x00400249

004003c8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  4003c8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  4003ca:	2000      	movs	r0, #0
  4003cc:	4b01      	ldr	r3, [pc, #4]	; (4003d4 <udi_cdc_data_sof_notify+0xc>)
  4003ce:	4798      	blx	r3
  4003d0:	bd08      	pop	{r3, pc}
  4003d2:	bf00      	nop
  4003d4:	00400249 	.word	0x00400249

004003d8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
  4003d8:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4003da:	4b06      	ldr	r3, [pc, #24]	; (4003f4 <udi_cdc_data_disable+0x1c>)
  4003dc:	781a      	ldrb	r2, [r3, #0]
  4003de:	3a01      	subs	r2, #1
  4003e0:	b2d2      	uxtb	r2, r2
  4003e2:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  4003e4:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
  4003e6:	4b04      	ldr	r3, [pc, #16]	; (4003f8 <udi_cdc_data_disable+0x20>)
  4003e8:	4798      	blx	r3
	udi_cdc_data_running = false;
  4003ea:	2200      	movs	r2, #0
  4003ec:	4b03      	ldr	r3, [pc, #12]	; (4003fc <udi_cdc_data_disable+0x24>)
  4003ee:	701a      	strb	r2, [r3, #0]
  4003f0:	bd08      	pop	{r3, pc}
  4003f2:	bf00      	nop
  4003f4:	20000a38 	.word	0x20000a38
  4003f8:	00400f19 	.word	0x00400f19
  4003fc:	20000ad4 	.word	0x20000ad4

00400400 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400400:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400404:	b672      	cpsid	i
  400406:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40040a:	2100      	movs	r1, #0
  40040c:	4a09      	ldr	r2, [pc, #36]	; (400434 <udi_cdc_multi_get_nb_received_data+0x34>)
  40040e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400410:	4a09      	ldr	r2, [pc, #36]	; (400438 <udi_cdc_multi_get_nb_received_data+0x38>)
  400412:	8810      	ldrh	r0, [r2, #0]
  400414:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400416:	4a09      	ldr	r2, [pc, #36]	; (40043c <udi_cdc_multi_get_nb_received_data+0x3c>)
  400418:	7811      	ldrb	r1, [r2, #0]
  40041a:	4a09      	ldr	r2, [pc, #36]	; (400440 <udi_cdc_multi_get_nb_received_data+0x40>)
  40041c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  400420:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400422:	b92b      	cbnz	r3, 400430 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  400424:	2201      	movs	r2, #1
  400426:	4b03      	ldr	r3, [pc, #12]	; (400434 <udi_cdc_multi_get_nb_received_data+0x34>)
  400428:	701a      	strb	r2, [r3, #0]
  40042a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40042e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400430:	4770      	bx	lr
  400432:	bf00      	nop
  400434:	200000e8 	.word	0x200000e8
  400438:	20000acc 	.word	0x20000acc
  40043c:	20000ad8 	.word	0x20000ad8
  400440:	20000ac4 	.word	0x20000ac4

00400444 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400444:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400446:	4b03      	ldr	r3, [pc, #12]	; (400454 <udi_cdc_multi_is_rx_ready+0x10>)
  400448:	4798      	blx	r3
}
  40044a:	3000      	adds	r0, #0
  40044c:	bf18      	it	ne
  40044e:	2001      	movne	r0, #1
  400450:	bd08      	pop	{r3, pc}
  400452:	bf00      	nop
  400454:	00400401 	.word	0x00400401

00400458 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400458:	b510      	push	{r4, lr}
  40045a:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40045c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400460:	f1d3 0301 	rsbs	r3, r3, #1
  400464:	bf38      	it	cc
  400466:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400468:	b672      	cpsid	i
  40046a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40046e:	2100      	movs	r1, #0
  400470:	4a1e      	ldr	r2, [pc, #120]	; (4004ec <udi_cdc_rx_start+0x94>)
  400472:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400474:	4a1e      	ldr	r2, [pc, #120]	; (4004f0 <udi_cdc_rx_start+0x98>)
  400476:	7814      	ldrb	r4, [r2, #0]
  400478:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  40047a:	4a1e      	ldr	r2, [pc, #120]	; (4004f4 <udi_cdc_rx_start+0x9c>)
  40047c:	7812      	ldrb	r2, [r2, #0]
  40047e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400482:	d107      	bne.n	400494 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400484:	4a1c      	ldr	r2, [pc, #112]	; (4004f8 <udi_cdc_rx_start+0xa0>)
  400486:	8812      	ldrh	r2, [r2, #0]
  400488:	b292      	uxth	r2, r2
  40048a:	491c      	ldr	r1, [pc, #112]	; (4004fc <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  40048c:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  400490:	4291      	cmp	r1, r2
  400492:	d908      	bls.n	4004a6 <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400494:	b33b      	cbz	r3, 4004e6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400496:	2201      	movs	r2, #1
  400498:	4b14      	ldr	r3, [pc, #80]	; (4004ec <udi_cdc_rx_start+0x94>)
  40049a:	701a      	strb	r2, [r3, #0]
  40049c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4004a0:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4004a2:	2000      	movs	r0, #0
  4004a4:	e020      	b.n	4004e8 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4004a6:	2100      	movs	r1, #0
  4004a8:	4a13      	ldr	r2, [pc, #76]	; (4004f8 <udi_cdc_rx_start+0xa0>)
  4004aa:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4004ac:	428c      	cmp	r4, r1
  4004ae:	bf14      	ite	ne
  4004b0:	2100      	movne	r1, #0
  4004b2:	2101      	moveq	r1, #1
  4004b4:	4a0e      	ldr	r2, [pc, #56]	; (4004f0 <udi_cdc_rx_start+0x98>)
  4004b6:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  4004b8:	2101      	movs	r1, #1
  4004ba:	4a0e      	ldr	r2, [pc, #56]	; (4004f4 <udi_cdc_rx_start+0x9c>)
  4004bc:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004be:	b123      	cbz	r3, 4004ca <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4004c0:	4b0a      	ldr	r3, [pc, #40]	; (4004ec <udi_cdc_rx_start+0x94>)
  4004c2:	7019      	strb	r1, [r3, #0]
  4004c4:	f3bf 8f5f 	dmb	sy
  4004c8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  4004ca:	2000      	movs	r0, #0
  4004cc:	4b0c      	ldr	r3, [pc, #48]	; (400500 <udi_cdc_rx_start+0xa8>)
  4004ce:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  4004d0:	4b0c      	ldr	r3, [pc, #48]	; (400504 <udi_cdc_rx_start+0xac>)
  4004d2:	9300      	str	r3, [sp, #0]
  4004d4:	2002      	movs	r0, #2
  4004d6:	2101      	movs	r1, #1
  4004d8:	4a0b      	ldr	r2, [pc, #44]	; (400508 <udi_cdc_rx_start+0xb0>)
  4004da:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4004de:	2340      	movs	r3, #64	; 0x40
  4004e0:	4c0a      	ldr	r4, [pc, #40]	; (40050c <udi_cdc_rx_start+0xb4>)
  4004e2:	47a0      	blx	r4
  4004e4:	e000      	b.n	4004e8 <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4004e6:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  4004e8:	b002      	add	sp, #8
  4004ea:	bd10      	pop	{r4, pc}
  4004ec:	200000e8 	.word	0x200000e8
  4004f0:	20000ad8 	.word	0x20000ad8
  4004f4:	20000af0 	.word	0x20000af0
  4004f8:	20000acc 	.word	0x20000acc
  4004fc:	20000ac4 	.word	0x20000ac4
  400500:	00400445 	.word	0x00400445
  400504:	004005a1 	.word	0x004005a1
  400508:	200009b8 	.word	0x200009b8
  40050c:	004025f5 	.word	0x004025f5

00400510 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  400510:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  400512:	2400      	movs	r4, #0
  400514:	4b15      	ldr	r3, [pc, #84]	; (40056c <udi_cdc_data_enable+0x5c>)
  400516:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400518:	4b15      	ldr	r3, [pc, #84]	; (400570 <udi_cdc_data_enable+0x60>)
  40051a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40051c:	4b15      	ldr	r3, [pc, #84]	; (400574 <udi_cdc_data_enable+0x64>)
  40051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400520:	4b15      	ldr	r3, [pc, #84]	; (400578 <udi_cdc_data_enable+0x68>)
  400522:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400524:	4b15      	ldr	r3, [pc, #84]	; (40057c <udi_cdc_data_enable+0x6c>)
  400526:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400528:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40052a:	4b15      	ldr	r3, [pc, #84]	; (400580 <udi_cdc_data_enable+0x70>)
  40052c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40052e:	4620      	mov	r0, r4
  400530:	4b14      	ldr	r3, [pc, #80]	; (400584 <udi_cdc_data_enable+0x74>)
  400532:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400534:	4b14      	ldr	r3, [pc, #80]	; (400588 <udi_cdc_data_enable+0x78>)
  400536:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400538:	4b14      	ldr	r3, [pc, #80]	; (40058c <udi_cdc_data_enable+0x7c>)
  40053a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40053c:	4b14      	ldr	r3, [pc, #80]	; (400590 <udi_cdc_data_enable+0x80>)
  40053e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  400540:	4b14      	ldr	r3, [pc, #80]	; (400594 <udi_cdc_data_enable+0x84>)
  400542:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400544:	4620      	mov	r0, r4
  400546:	4b14      	ldr	r3, [pc, #80]	; (400598 <udi_cdc_data_enable+0x88>)
  400548:	4798      	blx	r3
  40054a:	4602      	mov	r2, r0
  40054c:	b158      	cbz	r0, 400566 <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  40054e:	4b07      	ldr	r3, [pc, #28]	; (40056c <udi_cdc_data_enable+0x5c>)
  400550:	7819      	ldrb	r1, [r3, #0]
  400552:	3101      	adds	r1, #1
  400554:	b2c9      	uxtb	r1, r1
  400556:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400558:	781b      	ldrb	r3, [r3, #0]
  40055a:	b2db      	uxtb	r3, r3
  40055c:	2b01      	cmp	r3, #1
  40055e:	d102      	bne.n	400566 <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  400560:	2101      	movs	r1, #1
  400562:	4b0e      	ldr	r3, [pc, #56]	; (40059c <udi_cdc_data_enable+0x8c>)
  400564:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  400566:	4610      	mov	r0, r2
  400568:	bd10      	pop	{r4, pc}
  40056a:	bf00      	nop
  40056c:	20000a38 	.word	0x20000a38
  400570:	20000adc 	.word	0x20000adc
  400574:	20000af4 	.word	0x20000af4
  400578:	20000a3c 	.word	0x20000a3c
  40057c:	20000a40 	.word	0x20000a40
  400580:	20000ad0 	.word	0x20000ad0
  400584:	00400249 	.word	0x00400249
  400588:	20000af0 	.word	0x20000af0
  40058c:	20000ad8 	.word	0x20000ad8
  400590:	20000ac4 	.word	0x20000ac4
  400594:	20000acc 	.word	0x20000acc
  400598:	00400459 	.word	0x00400459
  40059c:	20000ad4 	.word	0x20000ad4

004005a0 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  4005a0:	b510      	push	{r4, lr}
  4005a2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  4005a4:	b9d0      	cbnz	r0, 4005dc <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4005a6:	4b0e      	ldr	r3, [pc, #56]	; (4005e0 <udi_cdc_data_received+0x40>)
  4005a8:	781b      	ldrb	r3, [r3, #0]
  4005aa:	f013 0fff 	tst.w	r3, #255	; 0xff
  4005ae:	bf14      	ite	ne
  4005b0:	2300      	movne	r3, #0
  4005b2:	2301      	moveq	r3, #1
	if (!n) {
  4005b4:	b951      	cbnz	r1, 4005cc <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  4005b6:	490b      	ldr	r1, [pc, #44]	; (4005e4 <udi_cdc_data_received+0x44>)
  4005b8:	9100      	str	r1, [sp, #0]
  4005ba:	4610      	mov	r0, r2
  4005bc:	2101      	movs	r1, #1
  4005be:	4a0a      	ldr	r2, [pc, #40]	; (4005e8 <udi_cdc_data_received+0x48>)
  4005c0:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  4005c4:	2340      	movs	r3, #64	; 0x40
  4005c6:	4c09      	ldr	r4, [pc, #36]	; (4005ec <udi_cdc_data_received+0x4c>)
  4005c8:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4005ca:	e007      	b.n	4005dc <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4005cc:	4a08      	ldr	r2, [pc, #32]	; (4005f0 <udi_cdc_data_received+0x50>)
  4005ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4005d2:	2000      	movs	r0, #0
  4005d4:	4b07      	ldr	r3, [pc, #28]	; (4005f4 <udi_cdc_data_received+0x54>)
  4005d6:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4005d8:	4b07      	ldr	r3, [pc, #28]	; (4005f8 <udi_cdc_data_received+0x58>)
  4005da:	4798      	blx	r3
}
  4005dc:	b002      	add	sp, #8
  4005de:	bd10      	pop	{r4, pc}
  4005e0:	20000ad8 	.word	0x20000ad8
  4005e4:	004005a1 	.word	0x004005a1
  4005e8:	200009b8 	.word	0x200009b8
  4005ec:	004025f5 	.word	0x004025f5
  4005f0:	20000ac4 	.word	0x20000ac4
  4005f4:	20000af0 	.word	0x20000af0
  4005f8:	00400459 	.word	0x00400459

004005fc <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
  4005fc:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  4005fe:	2000      	movs	r0, #0
  400600:	4b01      	ldr	r3, [pc, #4]	; (400608 <udi_cdc_is_rx_ready+0xc>)
  400602:	4798      	blx	r3
}
  400604:	bd08      	pop	{r3, pc}
  400606:	bf00      	nop
  400608:	00400445 	.word	0x00400445

0040060c <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  40060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400610:	4b21      	ldr	r3, [pc, #132]	; (400698 <udi_cdc_multi_getc+0x8c>)
  400612:	f893 9006 	ldrb.w	r9, [r3, #6]
  400616:	f1b9 0f09 	cmp.w	r9, #9
  40061a:	bf14      	ite	ne
  40061c:	f04f 0900 	movne.w	r9, #0
  400620:	f04f 0901 	moveq.w	r9, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  400624:	2000      	movs	r0, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400626:	4c1d      	ldr	r4, [pc, #116]	; (40069c <udi_cdc_multi_getc+0x90>)
  400628:	4680      	mov	r8, r0
  40062a:	4607      	mov	r7, r0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40062c:	4d1c      	ldr	r5, [pc, #112]	; (4006a0 <udi_cdc_multi_getc+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  40062e:	4e1d      	ldr	r6, [pc, #116]	; (4006a4 <udi_cdc_multi_getc+0x98>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400630:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400634:	b672      	cpsid	i
  400636:	f3bf 8f5f 	dmb	sy
  40063a:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  40063c:	882b      	ldrh	r3, [r5, #0]
  40063e:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400640:	7832      	ldrb	r2, [r6, #0]
  400642:	b2d2      	uxtb	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400644:	b921      	cbnz	r1, 400650 <udi_cdc_multi_getc+0x44>
		cpu_irq_enable();
  400646:	2101      	movs	r1, #1
  400648:	7021      	strb	r1, [r4, #0]
  40064a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40064e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400650:	4915      	ldr	r1, [pc, #84]	; (4006a8 <udi_cdc_multi_getc+0x9c>)
  400652:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400656:	4299      	cmp	r1, r3
  400658:	d807      	bhi.n	40066a <udi_cdc_multi_getc+0x5e>
		if (!udi_cdc_data_running) {
  40065a:	4b14      	ldr	r3, [pc, #80]	; (4006ac <udi_cdc_multi_getc+0xa0>)
  40065c:	781b      	ldrb	r3, [r3, #0]
  40065e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400662:	d1e5      	bne.n	400630 <udi_cdc_multi_getc+0x24>
			return 0;
  400664:	2000      	movs	r0, #0
  400666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  40066a:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  40066e:	4910      	ldr	r1, [pc, #64]	; (4006b0 <udi_cdc_multi_getc+0xa4>)
  400670:	f811 a002 	ldrb.w	sl, [r1, r2]
  400674:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
  400678:	3301      	adds	r3, #1
  40067a:	b29b      	uxth	r3, r3
  40067c:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  40067e:	4640      	mov	r0, r8
  400680:	4b0c      	ldr	r3, [pc, #48]	; (4006b4 <udi_cdc_multi_getc+0xa8>)
  400682:	4798      	blx	r3

	if (b_databit_9) {
  400684:	f1b9 0f00 	cmp.w	r9, #0
  400688:	d003      	beq.n	400692 <udi_cdc_multi_getc+0x86>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  40068a:	ea4f 200a 	mov.w	r0, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  40068e:	46c1      	mov	r9, r8
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400690:	e7ce      	b.n	400630 <udi_cdc_multi_getc+0x24>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400692:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400698:	200009b0 	.word	0x200009b0
  40069c:	200000e8 	.word	0x200000e8
  4006a0:	20000acc 	.word	0x20000acc
  4006a4:	20000ad8 	.word	0x20000ad8
  4006a8:	20000ac4 	.word	0x20000ac4
  4006ac:	20000ad4 	.word	0x20000ad4
  4006b0:	200009b8 	.word	0x200009b8
  4006b4:	00400459 	.word	0x00400459

004006b8 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  4006b8:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  4006ba:	2000      	movs	r0, #0
  4006bc:	4b01      	ldr	r3, [pc, #4]	; (4006c4 <udi_cdc_getc+0xc>)
  4006be:	4798      	blx	r3
}
  4006c0:	bd08      	pop	{r3, pc}
  4006c2:	bf00      	nop
  4006c4:	0040060d 	.word	0x0040060d

004006c8 <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4006c8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4006cc:	b672      	cpsid	i
  4006ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4006d2:	2100      	movs	r1, #0
  4006d4:	4b13      	ldr	r3, [pc, #76]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  4006d6:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4006d8:	4b13      	ldr	r3, [pc, #76]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  4006da:	781b      	ldrb	r3, [r3, #0]
  4006dc:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  4006de:	4913      	ldr	r1, [pc, #76]	; (40072c <udi_cdc_multi_get_free_tx_buffer+0x64>)
  4006e0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  4006e4:	2840      	cmp	r0, #64	; 0x40
  4006e6:	d113      	bne.n	400710 <udi_cdc_multi_get_free_tx_buffer+0x48>
		if ((!udi_cdc_tx_trans_ongoing[port])
  4006e8:	4911      	ldr	r1, [pc, #68]	; (400730 <udi_cdc_multi_get_free_tx_buffer+0x68>)
  4006ea:	7809      	ldrb	r1, [r1, #0]
  4006ec:	f011 0fff 	tst.w	r1, #255	; 0xff
  4006f0:	d10e      	bne.n	400710 <udi_cdc_multi_get_free_tx_buffer+0x48>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  4006f2:	4910      	ldr	r1, [pc, #64]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  4006f4:	7809      	ldrb	r1, [r1, #0]
  4006f6:	f011 0fff 	tst.w	r1, #255	; 0xff
  4006fa:	d109      	bne.n	400710 <udi_cdc_multi_get_free_tx_buffer+0x48>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  4006fc:	2001      	movs	r0, #1
  4006fe:	490d      	ldr	r1, [pc, #52]	; (400734 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400700:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400702:	f1d3 0301 	rsbs	r3, r3, #1
  400706:	bf38      	it	cc
  400708:	2300      	movcc	r3, #0
  40070a:	4907      	ldr	r1, [pc, #28]	; (400728 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  40070c:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  40070e:	2000      	movs	r0, #0
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  400710:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400714:	b92a      	cbnz	r2, 400722 <udi_cdc_multi_get_free_tx_buffer+0x5a>
		cpu_irq_enable();
  400716:	2201      	movs	r2, #1
  400718:	4b02      	ldr	r3, [pc, #8]	; (400724 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  40071a:	701a      	strb	r2, [r3, #0]
  40071c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400720:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  400722:	4770      	bx	lr
  400724:	200000e8 	.word	0x200000e8
  400728:	20000a3c 	.word	0x20000a3c
  40072c:	20000a40 	.word	0x20000a40
  400730:	20000adc 	.word	0x20000adc
  400734:	20000af4 	.word	0x20000af4

00400738 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400738:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  40073a:	4b03      	ldr	r3, [pc, #12]	; (400748 <udi_cdc_multi_is_tx_ready+0x10>)
  40073c:	4798      	blx	r3
}
  40073e:	3000      	adds	r0, #0
  400740:	bf18      	it	ne
  400742:	2001      	movne	r0, #1
  400744:	bd08      	pop	{r3, pc}
  400746:	bf00      	nop
  400748:	004006c9 	.word	0x004006c9

0040074c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  40074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400750:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400752:	4b1b      	ldr	r3, [pc, #108]	; (4007c0 <udi_cdc_multi_putc+0x74>)
  400754:	799e      	ldrb	r6, [r3, #6]
  400756:	2e09      	cmp	r6, #9
  400758:	bf14      	ite	ne
  40075a:	2600      	movne	r6, #0
  40075c:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  40075e:	4d19      	ldr	r5, [pc, #100]	; (4007c4 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400760:	4f19      	ldr	r7, [pc, #100]	; (4007c8 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400762:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4007d8 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400766:	2000      	movs	r0, #0
  400768:	47a8      	blx	r5
  40076a:	b930      	cbnz	r0, 40077a <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  40076c:	4b17      	ldr	r3, [pc, #92]	; (4007cc <udi_cdc_multi_putc+0x80>)
  40076e:	781b      	ldrb	r3, [r3, #0]
  400770:	f013 0fff 	tst.w	r3, #255	; 0xff
  400774:	d1f7      	bne.n	400766 <udi_cdc_multi_putc+0x1a>
  400776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40077a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40077e:	b672      	cpsid	i
  400780:	f3bf 8f5f 	dmb	sy
  400784:	2300      	movs	r3, #0
  400786:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400788:	f898 3000 	ldrb.w	r3, [r8]
  40078c:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  40078e:	4810      	ldr	r0, [pc, #64]	; (4007d0 <udi_cdc_multi_putc+0x84>)
  400790:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400794:	f102 0c01 	add.w	ip, r2, #1
  400798:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
  40079c:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  4007a0:	4a0c      	ldr	r2, [pc, #48]	; (4007d4 <udi_cdc_multi_putc+0x88>)
  4007a2:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007a4:	b921      	cbnz	r1, 4007b0 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  4007a6:	2301      	movs	r3, #1
  4007a8:	703b      	strb	r3, [r7, #0]
  4007aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4007ae:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  4007b0:	b116      	cbz	r6, 4007b8 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  4007b2:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  4007b4:	2600      	movs	r6, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  4007b6:	e7d6      	b.n	400766 <udi_cdc_multi_putc+0x1a>
	}
	return true;
  4007b8:	2001      	movs	r0, #1
}
  4007ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007be:	bf00      	nop
  4007c0:	200009b0 	.word	0x200009b0
  4007c4:	00400739 	.word	0x00400739
  4007c8:	200000e8 	.word	0x200000e8
  4007cc:	20000ad4 	.word	0x20000ad4
  4007d0:	20000a40 	.word	0x20000a40
  4007d4:	20000a44 	.word	0x20000a44
  4007d8:	20000a3c 	.word	0x20000a3c

004007dc <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  4007dc:	b508      	push	{r3, lr}
  4007de:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  4007e0:	2000      	movs	r0, #0
  4007e2:	4b01      	ldr	r3, [pc, #4]	; (4007e8 <udi_cdc_putc+0xc>)
  4007e4:	4798      	blx	r3
}
  4007e6:	bd08      	pop	{r3, pc}
  4007e8:	0040074d 	.word	0x0040074d

004007ec <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  4007ec:	4b0f      	ldr	r3, [pc, #60]	; (40082c <udc_next_desc_in_iface+0x40>)
  4007ee:	681b      	ldr	r3, [r3, #0]
  4007f0:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4007f2:	885a      	ldrh	r2, [r3, #2]
  4007f4:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  4007f6:	7803      	ldrb	r3, [r0, #0]
  4007f8:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  4007fa:	4290      	cmp	r0, r2
  4007fc:	d210      	bcs.n	400820 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  4007fe:	7843      	ldrb	r3, [r0, #1]
  400800:	2b04      	cmp	r3, #4
  400802:	d00f      	beq.n	400824 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400804:	428b      	cmp	r3, r1
  400806:	d105      	bne.n	400814 <udc_next_desc_in_iface+0x28>
  400808:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40080a:	7843      	ldrb	r3, [r0, #1]
  40080c:	2b04      	cmp	r3, #4
  40080e:	d00b      	beq.n	400828 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400810:	428b      	cmp	r3, r1
  400812:	d00a      	beq.n	40082a <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400814:	7803      	ldrb	r3, [r0, #0]
  400816:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400818:	4290      	cmp	r0, r2
  40081a:	d3f6      	bcc.n	40080a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  40081c:	2000      	movs	r0, #0
  40081e:	4770      	bx	lr
  400820:	2000      	movs	r0, #0
  400822:	4770      	bx	lr
  400824:	2000      	movs	r0, #0
  400826:	4770      	bx	lr
  400828:	2000      	movs	r0, #0
}
  40082a:	4770      	bx	lr
  40082c:	20000afc 	.word	0x20000afc

00400830 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400830:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400832:	4b03      	ldr	r3, [pc, #12]	; (400840 <udc_valid_address+0x10>)
  400834:	7898      	ldrb	r0, [r3, #2]
  400836:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40083a:	4b02      	ldr	r3, [pc, #8]	; (400844 <udc_valid_address+0x14>)
  40083c:	4798      	blx	r3
  40083e:	bd08      	pop	{r3, pc}
  400840:	20000c14 	.word	0x20000c14
  400844:	00402245 	.word	0x00402245

00400848 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400848:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  40084a:	4b16      	ldr	r3, [pc, #88]	; (4008a4 <udc_update_iface_desc+0x5c>)
  40084c:	781b      	ldrb	r3, [r3, #0]
  40084e:	b303      	cbz	r3, 400892 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400850:	4b15      	ldr	r3, [pc, #84]	; (4008a8 <udc_update_iface_desc+0x60>)
  400852:	681b      	ldr	r3, [r3, #0]
  400854:	681b      	ldr	r3, [r3, #0]
  400856:	791a      	ldrb	r2, [r3, #4]
  400858:	4282      	cmp	r2, r0
  40085a:	d91c      	bls.n	400896 <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40085c:	4a13      	ldr	r2, [pc, #76]	; (4008ac <udc_update_iface_desc+0x64>)
  40085e:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400860:	885c      	ldrh	r4, [r3, #2]
  400862:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400864:	42a3      	cmp	r3, r4
  400866:	d218      	bcs.n	40089a <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400868:	785a      	ldrb	r2, [r3, #1]
  40086a:	2a04      	cmp	r2, #4
  40086c:	d109      	bne.n	400882 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40086e:	789a      	ldrb	r2, [r3, #2]
  400870:	4282      	cmp	r2, r0
  400872:	d106      	bne.n	400882 <udc_update_iface_desc+0x3a>
  400874:	78da      	ldrb	r2, [r3, #3]
  400876:	428a      	cmp	r2, r1
  400878:	d103      	bne.n	400882 <udc_update_iface_desc+0x3a>
  40087a:	4a0c      	ldr	r2, [pc, #48]	; (4008ac <udc_update_iface_desc+0x64>)
  40087c:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  40087e:	2001      	movs	r0, #1
  400880:	e00c      	b.n	40089c <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400882:	781a      	ldrb	r2, [r3, #0]
  400884:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400886:	42a3      	cmp	r3, r4
  400888:	d3ee      	bcc.n	400868 <udc_update_iface_desc+0x20>
  40088a:	4a08      	ldr	r2, [pc, #32]	; (4008ac <udc_update_iface_desc+0x64>)
  40088c:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40088e:	2000      	movs	r0, #0
  400890:	e004      	b.n	40089c <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400892:	2000      	movs	r0, #0
  400894:	e002      	b.n	40089c <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400896:	2000      	movs	r0, #0
  400898:	e000      	b.n	40089c <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40089a:	2000      	movs	r0, #0
}
  40089c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop
  4008a4:	20000b02 	.word	0x20000b02
  4008a8:	20000afc 	.word	0x20000afc
  4008ac:	20000b04 	.word	0x20000b04

004008b0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  4008b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008b4:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4008b6:	2100      	movs	r1, #0
  4008b8:	4b12      	ldr	r3, [pc, #72]	; (400904 <udc_iface_disable+0x54>)
  4008ba:	4798      	blx	r3
  4008bc:	4680      	mov	r8, r0
  4008be:	b1e8      	cbz	r0, 4008fc <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4008c0:	4b11      	ldr	r3, [pc, #68]	; (400908 <udc_iface_disable+0x58>)
  4008c2:	681b      	ldr	r3, [r3, #0]
  4008c4:	685b      	ldr	r3, [r3, #4]
  4008c6:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4008ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4008ce:	4798      	blx	r3
  4008d0:	4601      	mov	r1, r0
  4008d2:	4620      	mov	r0, r4
  4008d4:	4b0b      	ldr	r3, [pc, #44]	; (400904 <udc_iface_disable+0x54>)
  4008d6:	4798      	blx	r3
  4008d8:	4680      	mov	r8, r0
  4008da:	b178      	cbz	r0, 4008fc <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4008dc:	4b0b      	ldr	r3, [pc, #44]	; (40090c <udc_iface_disable+0x5c>)
  4008de:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4008e0:	2605      	movs	r6, #5
  4008e2:	4d0b      	ldr	r5, [pc, #44]	; (400910 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4008e4:	4f0b      	ldr	r7, [pc, #44]	; (400914 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4008e6:	4620      	mov	r0, r4
  4008e8:	4631      	mov	r1, r6
  4008ea:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  4008ec:	4604      	mov	r4, r0
  4008ee:	b110      	cbz	r0, 4008f6 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  4008f0:	7880      	ldrb	r0, [r0, #2]
  4008f2:	47b8      	blx	r7
		}
  4008f4:	e7f7      	b.n	4008e6 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  4008f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4008fa:	4798      	blx	r3
	return true;
}
  4008fc:	4640      	mov	r0, r8
  4008fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400902:	bf00      	nop
  400904:	00400849 	.word	0x00400849
  400908:	20000afc 	.word	0x20000afc
  40090c:	20000b04 	.word	0x20000b04
  400910:	004007ed 	.word	0x004007ed
  400914:	004023bd 	.word	0x004023bd

00400918 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  400918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40091c:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40091e:	4b10      	ldr	r3, [pc, #64]	; (400960 <udc_iface_enable+0x48>)
  400920:	4798      	blx	r3
  400922:	4603      	mov	r3, r0
  400924:	b1c8      	cbz	r0, 40095a <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400926:	4b0f      	ldr	r3, [pc, #60]	; (400964 <udc_iface_enable+0x4c>)
  400928:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40092a:	2605      	movs	r6, #5
  40092c:	4d0e      	ldr	r5, [pc, #56]	; (400968 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40092e:	4f0f      	ldr	r7, [pc, #60]	; (40096c <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400930:	4620      	mov	r0, r4
  400932:	4631      	mov	r1, r6
  400934:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  400936:	4604      	mov	r4, r0
  400938:	b138      	cbz	r0, 40094a <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40093a:	7880      	ldrb	r0, [r0, #2]
  40093c:	78e1      	ldrb	r1, [r4, #3]
  40093e:	88a2      	ldrh	r2, [r4, #4]
  400940:	47b8      	blx	r7
  400942:	4603      	mov	r3, r0
  400944:	2800      	cmp	r0, #0
  400946:	d1f3      	bne.n	400930 <udc_iface_enable+0x18>
  400948:	e007      	b.n	40095a <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40094a:	4b09      	ldr	r3, [pc, #36]	; (400970 <udc_iface_enable+0x58>)
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	685b      	ldr	r3, [r3, #4]
  400950:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400954:	681b      	ldr	r3, [r3, #0]
  400956:	4798      	blx	r3
  400958:	4603      	mov	r3, r0
}
  40095a:	4618      	mov	r0, r3
  40095c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400960:	00400849 	.word	0x00400849
  400964:	20000b04 	.word	0x20000b04
  400968:	004007ed 	.word	0x004007ed
  40096c:	004022b9 	.word	0x004022b9
  400970:	20000afc 	.word	0x20000afc

00400974 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  400974:	b508      	push	{r3, lr}
	udd_enable();
  400976:	4b01      	ldr	r3, [pc, #4]	; (40097c <udc_start+0x8>)
  400978:	4798      	blx	r3
  40097a:	bd08      	pop	{r3, pc}
  40097c:	00402189 	.word	0x00402189

00400980 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400980:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400982:	4b0d      	ldr	r3, [pc, #52]	; (4009b8 <udc_reset+0x38>)
  400984:	781b      	ldrb	r3, [r3, #0]
  400986:	b183      	cbz	r3, 4009aa <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400988:	4b0c      	ldr	r3, [pc, #48]	; (4009bc <udc_reset+0x3c>)
  40098a:	681b      	ldr	r3, [r3, #0]
  40098c:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  40098e:	791b      	ldrb	r3, [r3, #4]
  400990:	b15b      	cbz	r3, 4009aa <udc_reset+0x2a>
  400992:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400994:	4e0a      	ldr	r6, [pc, #40]	; (4009c0 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400996:	4d09      	ldr	r5, [pc, #36]	; (4009bc <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  400998:	4620      	mov	r0, r4
  40099a:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  40099c:	3401      	adds	r4, #1
  40099e:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009a0:	682b      	ldr	r3, [r5, #0]
  4009a2:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4009a4:	791b      	ldrb	r3, [r3, #4]
  4009a6:	42a3      	cmp	r3, r4
  4009a8:	d8f6      	bhi.n	400998 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  4009aa:	2300      	movs	r3, #0
  4009ac:	4a02      	ldr	r2, [pc, #8]	; (4009b8 <udc_reset+0x38>)
  4009ae:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4009b0:	4a04      	ldr	r2, [pc, #16]	; (4009c4 <udc_reset+0x44>)
  4009b2:	8013      	strh	r3, [r2, #0]
  4009b4:	bd70      	pop	{r4, r5, r6, pc}
  4009b6:	bf00      	nop
  4009b8:	20000b02 	.word	0x20000b02
  4009bc:	20000afc 	.word	0x20000afc
  4009c0:	004008b1 	.word	0x004008b1
  4009c4:	20000b00 	.word	0x20000b00

004009c8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  4009c8:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  4009ca:	4b0c      	ldr	r3, [pc, #48]	; (4009fc <udc_sof_notify+0x34>)
  4009cc:	781b      	ldrb	r3, [r3, #0]
  4009ce:	b19b      	cbz	r3, 4009f8 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009d0:	4b0b      	ldr	r3, [pc, #44]	; (400a00 <udc_sof_notify+0x38>)
  4009d2:	681b      	ldr	r3, [r3, #0]
  4009d4:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4009d6:	7912      	ldrb	r2, [r2, #4]
  4009d8:	b172      	cbz	r2, 4009f8 <udc_sof_notify+0x30>
  4009da:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009dc:	4d08      	ldr	r5, [pc, #32]	; (400a00 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4009de:	685b      	ldr	r3, [r3, #4]
  4009e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4009e4:	691b      	ldr	r3, [r3, #16]
  4009e6:	b103      	cbz	r3, 4009ea <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4009e8:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4009ea:	3401      	adds	r4, #1
  4009ec:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4009ee:	682b      	ldr	r3, [r5, #0]
  4009f0:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4009f2:	7912      	ldrb	r2, [r2, #4]
  4009f4:	42a2      	cmp	r2, r4
  4009f6:	d8f2      	bhi.n	4009de <udc_sof_notify+0x16>
  4009f8:	bd38      	pop	{r3, r4, r5, pc}
  4009fa:	bf00      	nop
  4009fc:	20000b02 	.word	0x20000b02
  400a00:	20000afc 	.word	0x20000afc

00400a04 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400a08:	4b85      	ldr	r3, [pc, #532]	; (400c20 <udc_process_setup+0x21c>)
  400a0a:	2200      	movs	r2, #0
  400a0c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400a0e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400a10:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400a12:	781b      	ldrb	r3, [r3, #0]
  400a14:	f013 0f80 	tst.w	r3, #128	; 0x80
  400a18:	f000 8206 	beq.w	400e28 <udc_process_setup+0x424>
		if (udd_g_ctrlreq.req.wLength == 0) {
  400a1c:	4a80      	ldr	r2, [pc, #512]	; (400c20 <udc_process_setup+0x21c>)
  400a1e:	88d2      	ldrh	r2, [r2, #6]
  400a20:	2a00      	cmp	r2, #0
  400a22:	f040 8205 	bne.w	400e30 <udc_process_setup+0x42c>
  400a26:	e1fb      	b.n	400e20 <udc_process_setup+0x41c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400a28:	f013 031f 	ands.w	r3, r3, #31
  400a2c:	f040 8081 	bne.w	400b32 <udc_process_setup+0x12e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400a30:	497b      	ldr	r1, [pc, #492]	; (400c20 <udc_process_setup+0x21c>)
  400a32:	7849      	ldrb	r1, [r1, #1]
  400a34:	2906      	cmp	r1, #6
  400a36:	d00d      	beq.n	400a54 <udc_process_setup+0x50>
  400a38:	2908      	cmp	r1, #8
  400a3a:	d070      	beq.n	400b1e <udc_process_setup+0x11a>
  400a3c:	2900      	cmp	r1, #0
  400a3e:	d178      	bne.n	400b32 <udc_process_setup+0x12e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400a40:	2a02      	cmp	r2, #2
  400a42:	d105      	bne.n	400a50 <udc_process_setup+0x4c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400a44:	4877      	ldr	r0, [pc, #476]	; (400c24 <udc_process_setup+0x220>)
  400a46:	2102      	movs	r1, #2
  400a48:	4b77      	ldr	r3, [pc, #476]	; (400c28 <udc_process_setup+0x224>)
  400a4a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  400a4c:	2401      	movs	r4, #1
  400a4e:	e193      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  400a50:	2400      	movs	r4, #0
  400a52:	e191      	b.n	400d78 <udc_process_setup+0x374>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400a54:	4b72      	ldr	r3, [pc, #456]	; (400c20 <udc_process_setup+0x21c>)
  400a56:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400a58:	0a13      	lsrs	r3, r2, #8
  400a5a:	3b01      	subs	r3, #1
  400a5c:	2b0e      	cmp	r3, #14
  400a5e:	d854      	bhi.n	400b0a <udc_process_setup+0x106>
  400a60:	e8df f003 	tbb	[pc, r3]
  400a64:	532b0f08 	.word	0x532b0f08
  400a68:	53535353 	.word	0x53535353
  400a6c:	53535353 	.word	0x53535353
  400a70:	5353      	.short	0x5353
  400a72:	22          	.byte	0x22
  400a73:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400a74:	4b6d      	ldr	r3, [pc, #436]	; (400c2c <udc_process_setup+0x228>)
  400a76:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400a78:	4618      	mov	r0, r3
  400a7a:	7819      	ldrb	r1, [r3, #0]
  400a7c:	4b6a      	ldr	r3, [pc, #424]	; (400c28 <udc_process_setup+0x224>)
  400a7e:	4798      	blx	r3
  400a80:	e03a      	b.n	400af8 <udc_process_setup+0xf4>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400a82:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400a84:	4b69      	ldr	r3, [pc, #420]	; (400c2c <udc_process_setup+0x228>)
  400a86:	681b      	ldr	r3, [r3, #0]
  400a88:	7c5b      	ldrb	r3, [r3, #17]
  400a8a:	4293      	cmp	r3, r2
  400a8c:	d93f      	bls.n	400b0e <udc_process_setup+0x10a>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400a8e:	4b67      	ldr	r3, [pc, #412]	; (400c2c <udc_process_setup+0x228>)
  400a90:	685b      	ldr	r3, [r3, #4]
  400a92:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400a96:	4618      	mov	r0, r3
  400a98:	8859      	ldrh	r1, [r3, #2]
  400a9a:	4b63      	ldr	r3, [pc, #396]	; (400c28 <udc_process_setup+0x224>)
  400a9c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400a9e:	4b60      	ldr	r3, [pc, #384]	; (400c20 <udc_process_setup+0x21c>)
  400aa0:	689b      	ldr	r3, [r3, #8]
  400aa2:	2202      	movs	r2, #2
  400aa4:	705a      	strb	r2, [r3, #1]
  400aa6:	e027      	b.n	400af8 <udc_process_setup+0xf4>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  400aa8:	4b60      	ldr	r3, [pc, #384]	; (400c2c <udc_process_setup+0x228>)
  400aaa:	689b      	ldr	r3, [r3, #8]
  400aac:	2b00      	cmp	r3, #0
  400aae:	d030      	beq.n	400b12 <udc_process_setup+0x10e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400ab0:	4618      	mov	r0, r3
  400ab2:	8859      	ldrh	r1, [r3, #2]
  400ab4:	4b5c      	ldr	r3, [pc, #368]	; (400c28 <udc_process_setup+0x224>)
  400ab6:	4798      	blx	r3
  400ab8:	e01e      	b.n	400af8 <udc_process_setup+0xf4>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400aba:	b2d2      	uxtb	r2, r2
  400abc:	2a03      	cmp	r2, #3
  400abe:	d82a      	bhi.n	400b16 <udc_process_setup+0x112>
  400ac0:	e8df f012 	tbh	[pc, r2, lsl #1]
  400ac4:	00090004 	.word	0x00090004
  400ac8:	01bd01ba 	.word	0x01bd01ba
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400acc:	4858      	ldr	r0, [pc, #352]	; (400c30 <udc_process_setup+0x22c>)
  400ace:	2104      	movs	r1, #4
  400ad0:	4b55      	ldr	r3, [pc, #340]	; (400c28 <udc_process_setup+0x224>)
  400ad2:	4798      	blx	r3
  400ad4:	e010      	b.n	400af8 <udc_process_setup+0xf4>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
  400ad6:	4c57      	ldr	r4, [pc, #348]	; (400c34 <udc_process_setup+0x230>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  400ad8:	2003      	movs	r0, #3
  400ada:	4a57      	ldr	r2, [pc, #348]	; (400c38 <udc_process_setup+0x234>)
  400adc:	2300      	movs	r3, #0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  400ade:	5ce1      	ldrb	r1, [r4, r3]
  400ae0:	f822 1f02 	strh.w	r1, [r2, #2]!
  400ae4:	3301      	adds	r3, #1
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
  400ae6:	b2d9      	uxtb	r1, r3
  400ae8:	4281      	cmp	r1, r0
  400aea:	d3f8      	bcc.n	400ade <udc_process_setup+0xda>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  400aec:	0041      	lsls	r1, r0, #1
  400aee:	3102      	adds	r1, #2
  400af0:	4851      	ldr	r0, [pc, #324]	; (400c38 <udc_process_setup+0x234>)
  400af2:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
  400af4:	4b4c      	ldr	r3, [pc, #304]	; (400c28 <udc_process_setup+0x224>)
  400af6:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400af8:	4b49      	ldr	r3, [pc, #292]	; (400c20 <udc_process_setup+0x21c>)
  400afa:	88da      	ldrh	r2, [r3, #6]
  400afc:	899b      	ldrh	r3, [r3, #12]
  400afe:	4293      	cmp	r3, r2
  400b00:	d90b      	bls.n	400b1a <udc_process_setup+0x116>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400b02:	4b47      	ldr	r3, [pc, #284]	; (400c20 <udc_process_setup+0x21c>)
  400b04:	819a      	strh	r2, [r3, #12]
	}
	return true;
  400b06:	2401      	movs	r4, #1
  400b08:	e136      	b.n	400d78 <udc_process_setup+0x374>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  400b0a:	2400      	movs	r4, #0
  400b0c:	e134      	b.n	400d78 <udc_process_setup+0x374>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  400b0e:	2400      	movs	r4, #0
  400b10:	e132      	b.n	400d78 <udc_process_setup+0x374>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  400b12:	2400      	movs	r4, #0
  400b14:	e130      	b.n	400d78 <udc_process_setup+0x374>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  400b16:	2400      	movs	r4, #0
  400b18:	e12e      	b.n	400d78 <udc_process_setup+0x374>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  400b1a:	2401      	movs	r4, #1
  400b1c:	e12c      	b.n	400d78 <udc_process_setup+0x374>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  400b1e:	2a01      	cmp	r2, #1
  400b20:	d105      	bne.n	400b2e <udc_process_setup+0x12a>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  400b22:	4846      	ldr	r0, [pc, #280]	; (400c3c <udc_process_setup+0x238>)
  400b24:	2101      	movs	r1, #1
  400b26:	4b40      	ldr	r3, [pc, #256]	; (400c28 <udc_process_setup+0x224>)
  400b28:	4798      	blx	r3
	return true;
  400b2a:	2401      	movs	r4, #1
  400b2c:	e124      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  400b2e:	2400      	movs	r4, #0
  400b30:	e122      	b.n	400d78 <udc_process_setup+0x374>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400b32:	2b01      	cmp	r3, #1
  400b34:	d12a      	bne.n	400b8c <udc_process_setup+0x188>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400b36:	493a      	ldr	r1, [pc, #232]	; (400c20 <udc_process_setup+0x21c>)
  400b38:	7849      	ldrb	r1, [r1, #1]
  400b3a:	290a      	cmp	r1, #10
  400b3c:	d126      	bne.n	400b8c <udc_process_setup+0x188>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  400b3e:	2a01      	cmp	r2, #1
  400b40:	d11e      	bne.n	400b80 <udc_process_setup+0x17c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400b42:	4b3e      	ldr	r3, [pc, #248]	; (400c3c <udc_process_setup+0x238>)
  400b44:	781b      	ldrb	r3, [r3, #0]
  400b46:	b1eb      	cbz	r3, 400b84 <udc_process_setup+0x180>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400b48:	4b35      	ldr	r3, [pc, #212]	; (400c20 <udc_process_setup+0x21c>)
  400b4a:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400b4c:	4b3c      	ldr	r3, [pc, #240]	; (400c40 <udc_process_setup+0x23c>)
  400b4e:	681e      	ldr	r6, [r3, #0]
  400b50:	6833      	ldr	r3, [r6, #0]
  400b52:	791b      	ldrb	r3, [r3, #4]
  400b54:	42ab      	cmp	r3, r5
  400b56:	d917      	bls.n	400b88 <udc_process_setup+0x184>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400b58:	4628      	mov	r0, r5
  400b5a:	2100      	movs	r1, #0
  400b5c:	4b39      	ldr	r3, [pc, #228]	; (400c44 <udc_process_setup+0x240>)
  400b5e:	4798      	blx	r3
  400b60:	4604      	mov	r4, r0
  400b62:	2800      	cmp	r0, #0
  400b64:	f000 8108 	beq.w	400d78 <udc_process_setup+0x374>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400b68:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  400b6a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  400b6e:	68db      	ldr	r3, [r3, #12]
  400b70:	4798      	blx	r3
  400b72:	4b35      	ldr	r3, [pc, #212]	; (400c48 <udc_process_setup+0x244>)
  400b74:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400b76:	4618      	mov	r0, r3
  400b78:	2101      	movs	r1, #1
  400b7a:	4b2b      	ldr	r3, [pc, #172]	; (400c28 <udc_process_setup+0x224>)
  400b7c:	4798      	blx	r3
  400b7e:	e0fb      	b.n	400d78 <udc_process_setup+0x374>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  400b80:	2400      	movs	r4, #0
  400b82:	e0f9      	b.n	400d78 <udc_process_setup+0x374>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  400b84:	2400      	movs	r4, #0
  400b86:	e0f7      	b.n	400d78 <udc_process_setup+0x374>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400b88:	2400      	movs	r4, #0
  400b8a:	e0f5      	b.n	400d78 <udc_process_setup+0x374>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400b8c:	2b02      	cmp	r3, #2
  400b8e:	f040 80f5 	bne.w	400d7c <udc_process_setup+0x378>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400b92:	4b23      	ldr	r3, [pc, #140]	; (400c20 <udc_process_setup+0x21c>)
  400b94:	785b      	ldrb	r3, [r3, #1]
  400b96:	2b00      	cmp	r3, #0
  400b98:	f040 80e9 	bne.w	400d6e <udc_process_setup+0x36a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400b9c:	2a02      	cmp	r2, #2
  400b9e:	d10b      	bne.n	400bb8 <udc_process_setup+0x1b4>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400ba0:	4b1f      	ldr	r3, [pc, #124]	; (400c20 <udc_process_setup+0x21c>)
  400ba2:	7918      	ldrb	r0, [r3, #4]
  400ba4:	4b29      	ldr	r3, [pc, #164]	; (400c4c <udc_process_setup+0x248>)
  400ba6:	4798      	blx	r3
  400ba8:	4b29      	ldr	r3, [pc, #164]	; (400c50 <udc_process_setup+0x24c>)
  400baa:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400bac:	4618      	mov	r0, r3
  400bae:	2102      	movs	r1, #2
  400bb0:	4b1d      	ldr	r3, [pc, #116]	; (400c28 <udc_process_setup+0x224>)
  400bb2:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  400bb4:	2401      	movs	r4, #1
  400bb6:	e0df      	b.n	400d78 <udc_process_setup+0x374>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  400bb8:	2400      	movs	r4, #0
  400bba:	e0dd      	b.n	400d78 <udc_process_setup+0x374>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400bbc:	f013 031f 	ands.w	r3, r3, #31
  400bc0:	f040 808a 	bne.w	400cd8 <udc_process_setup+0x2d4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400bc4:	4a16      	ldr	r2, [pc, #88]	; (400c20 <udc_process_setup+0x21c>)
  400bc6:	7852      	ldrb	r2, [r2, #1]
  400bc8:	3a01      	subs	r2, #1
  400bca:	2a08      	cmp	r2, #8
  400bcc:	f200 8084 	bhi.w	400cd8 <udc_process_setup+0x2d4>
  400bd0:	e8df f012 	tbh	[pc, r2, lsl #1]
  400bd4:	00820013 	.word	0x00820013
  400bd8:	008200cf 	.word	0x008200cf
  400bdc:	00820009 	.word	0x00820009
  400be0:	00820082 	.word	0x00820082
  400be4:	0042      	.short	0x0042
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400be6:	4b0e      	ldr	r3, [pc, #56]	; (400c20 <udc_process_setup+0x21c>)
  400be8:	88db      	ldrh	r3, [r3, #6]
  400bea:	b923      	cbnz	r3, 400bf6 <udc_process_setup+0x1f2>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  400bec:	4a19      	ldr	r2, [pc, #100]	; (400c54 <udc_process_setup+0x250>)
  400bee:	4b0c      	ldr	r3, [pc, #48]	; (400c20 <udc_process_setup+0x21c>)
  400bf0:	611a      	str	r2, [r3, #16]
	return true;
  400bf2:	2401      	movs	r4, #1
  400bf4:	e0c0      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400bf6:	2400      	movs	r4, #0
  400bf8:	e0be      	b.n	400d78 <udc_process_setup+0x374>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400bfa:	4b09      	ldr	r3, [pc, #36]	; (400c20 <udc_process_setup+0x21c>)
  400bfc:	88db      	ldrh	r3, [r3, #6]
  400bfe:	b953      	cbnz	r3, 400c16 <udc_process_setup+0x212>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400c00:	4b07      	ldr	r3, [pc, #28]	; (400c20 <udc_process_setup+0x21c>)
  400c02:	885b      	ldrh	r3, [r3, #2]
  400c04:	2b01      	cmp	r3, #1
  400c06:	d108      	bne.n	400c1a <udc_process_setup+0x216>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400c08:	4b06      	ldr	r3, [pc, #24]	; (400c24 <udc_process_setup+0x220>)
  400c0a:	881a      	ldrh	r2, [r3, #0]
  400c0c:	f022 0202 	bic.w	r2, r2, #2
  400c10:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  400c12:	2401      	movs	r4, #1
  400c14:	e0b0      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400c16:	2400      	movs	r4, #0
  400c18:	e0ae      	b.n	400d78 <udc_process_setup+0x374>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  400c1a:	2400      	movs	r4, #0
  400c1c:	e0ac      	b.n	400d78 <udc_process_setup+0x374>
  400c1e:	bf00      	nop
  400c20:	20000c14 	.word	0x20000c14
  400c24:	20000b00 	.word	0x20000b00
  400c28:	004022ad 	.word	0x004022ad
  400c2c:	20000074 	.word	0x20000074
  400c30:	20000070 	.word	0x20000070
  400c34:	20000040 	.word	0x20000040
  400c38:	20000044 	.word	0x20000044
  400c3c:	20000b02 	.word	0x20000b02
  400c40:	20000afc 	.word	0x20000afc
  400c44:	00400849 	.word	0x00400849
  400c48:	20000b03 	.word	0x20000b03
  400c4c:	004023f5 	.word	0x004023f5
  400c50:	20000b08 	.word	0x20000b08
  400c54:	00400831 	.word	0x00400831
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  400c58:	4b7c      	ldr	r3, [pc, #496]	; (400e4c <udc_process_setup+0x448>)
  400c5a:	88db      	ldrh	r3, [r3, #6]
  400c5c:	2b00      	cmp	r3, #0
  400c5e:	d131      	bne.n	400cc4 <udc_process_setup+0x2c0>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  400c60:	4b7b      	ldr	r3, [pc, #492]	; (400e50 <udc_process_setup+0x44c>)
  400c62:	4798      	blx	r3
  400c64:	2800      	cmp	r0, #0
  400c66:	d02f      	beq.n	400cc8 <udc_process_setup+0x2c4>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c68:	4b78      	ldr	r3, [pc, #480]	; (400e4c <udc_process_setup+0x448>)
  400c6a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400c6c:	4b79      	ldr	r3, [pc, #484]	; (400e54 <udc_process_setup+0x450>)
  400c6e:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400c70:	7c5b      	ldrb	r3, [r3, #17]
  400c72:	429a      	cmp	r2, r3
  400c74:	dc2a      	bgt.n	400ccc <udc_process_setup+0x2c8>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  400c76:	4b78      	ldr	r3, [pc, #480]	; (400e58 <udc_process_setup+0x454>)
  400c78:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400c7a:	4b74      	ldr	r3, [pc, #464]	; (400e4c <udc_process_setup+0x448>)
  400c7c:	789b      	ldrb	r3, [r3, #2]
  400c7e:	4a77      	ldr	r2, [pc, #476]	; (400e5c <udc_process_setup+0x458>)
  400c80:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400c82:	b32b      	cbz	r3, 400cd0 <udc_process_setup+0x2cc>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400c84:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400c88:	3b01      	subs	r3, #1
  400c8a:	4a72      	ldr	r2, [pc, #456]	; (400e54 <udc_process_setup+0x450>)
  400c8c:	6852      	ldr	r2, [r2, #4]
  400c8e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400c92:	4973      	ldr	r1, [pc, #460]	; (400e60 <udc_process_setup+0x45c>)
  400c94:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400c96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400c9a:	791b      	ldrb	r3, [r3, #4]
  400c9c:	b1d3      	cbz	r3, 400cd4 <udc_process_setup+0x2d0>
  400c9e:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400ca0:	462f      	mov	r7, r5
  400ca2:	4e70      	ldr	r6, [pc, #448]	; (400e64 <udc_process_setup+0x460>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ca4:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400ca6:	4628      	mov	r0, r5
  400ca8:	4639      	mov	r1, r7
  400caa:	47b0      	blx	r6
  400cac:	4604      	mov	r4, r0
  400cae:	2800      	cmp	r0, #0
  400cb0:	d062      	beq.n	400d78 <udc_process_setup+0x374>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400cb2:	3501      	adds	r5, #1
  400cb4:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400cb6:	f8d8 3000 	ldr.w	r3, [r8]
  400cba:	681b      	ldr	r3, [r3, #0]
  400cbc:	791b      	ldrb	r3, [r3, #4]
  400cbe:	42ab      	cmp	r3, r5
  400cc0:	d8f1      	bhi.n	400ca6 <udc_process_setup+0x2a2>
  400cc2:	e059      	b.n	400d78 <udc_process_setup+0x374>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400cc4:	2400      	movs	r4, #0
  400cc6:	e057      	b.n	400d78 <udc_process_setup+0x374>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  400cc8:	2400      	movs	r4, #0
  400cca:	e055      	b.n	400d78 <udc_process_setup+0x374>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  400ccc:	2400      	movs	r4, #0
  400cce:	e053      	b.n	400d78 <udc_process_setup+0x374>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  400cd0:	2401      	movs	r4, #1
  400cd2:	e051      	b.n	400d78 <udc_process_setup+0x374>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  400cd4:	2401      	movs	r4, #1
  400cd6:	e04f      	b.n	400d78 <udc_process_setup+0x374>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400cd8:	2b01      	cmp	r3, #1
  400cda:	d11c      	bne.n	400d16 <udc_process_setup+0x312>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400cdc:	4a5b      	ldr	r2, [pc, #364]	; (400e4c <udc_process_setup+0x448>)
  400cde:	7852      	ldrb	r2, [r2, #1]
  400ce0:	2a0b      	cmp	r2, #11
  400ce2:	d118      	bne.n	400d16 <udc_process_setup+0x312>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  400ce4:	4b59      	ldr	r3, [pc, #356]	; (400e4c <udc_process_setup+0x448>)
  400ce6:	88db      	ldrh	r3, [r3, #6]
  400ce8:	b98b      	cbnz	r3, 400d0e <udc_process_setup+0x30a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400cea:	4b5c      	ldr	r3, [pc, #368]	; (400e5c <udc_process_setup+0x458>)
  400cec:	781b      	ldrb	r3, [r3, #0]
  400cee:	b183      	cbz	r3, 400d12 <udc_process_setup+0x30e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400cf0:	4b56      	ldr	r3, [pc, #344]	; (400e4c <udc_process_setup+0x448>)
  400cf2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400cf4:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  400cf6:	4628      	mov	r0, r5
  400cf8:	4b5b      	ldr	r3, [pc, #364]	; (400e68 <udc_process_setup+0x464>)
  400cfa:	4798      	blx	r3
  400cfc:	4604      	mov	r4, r0
  400cfe:	2800      	cmp	r0, #0
  400d00:	d03a      	beq.n	400d78 <udc_process_setup+0x374>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  400d02:	4628      	mov	r0, r5
  400d04:	b2f1      	uxtb	r1, r6
  400d06:	4b57      	ldr	r3, [pc, #348]	; (400e64 <udc_process_setup+0x460>)
  400d08:	4798      	blx	r3
  400d0a:	4604      	mov	r4, r0
  400d0c:	e034      	b.n	400d78 <udc_process_setup+0x374>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  400d0e:	2400      	movs	r4, #0
  400d10:	e032      	b.n	400d78 <udc_process_setup+0x374>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  400d12:	2400      	movs	r4, #0
  400d14:	e030      	b.n	400d78 <udc_process_setup+0x374>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400d16:	2b02      	cmp	r3, #2
  400d18:	d130      	bne.n	400d7c <udc_process_setup+0x378>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400d1a:	4b4c      	ldr	r3, [pc, #304]	; (400e4c <udc_process_setup+0x448>)
  400d1c:	785b      	ldrb	r3, [r3, #1]
  400d1e:	2b01      	cmp	r3, #1
  400d20:	d002      	beq.n	400d28 <udc_process_setup+0x324>
  400d22:	2b03      	cmp	r3, #3
  400d24:	d010      	beq.n	400d48 <udc_process_setup+0x344>
  400d26:	e026      	b.n	400d76 <udc_process_setup+0x372>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400d28:	4b48      	ldr	r3, [pc, #288]	; (400e4c <udc_process_setup+0x448>)
  400d2a:	88db      	ldrh	r3, [r3, #6]
  400d2c:	b943      	cbnz	r3, 400d40 <udc_process_setup+0x33c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d2e:	4b47      	ldr	r3, [pc, #284]	; (400e4c <udc_process_setup+0x448>)
  400d30:	885b      	ldrh	r3, [r3, #2]
  400d32:	b93b      	cbnz	r3, 400d44 <udc_process_setup+0x340>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d34:	4b45      	ldr	r3, [pc, #276]	; (400e4c <udc_process_setup+0x448>)
  400d36:	7918      	ldrb	r0, [r3, #4]
  400d38:	4b4c      	ldr	r3, [pc, #304]	; (400e6c <udc_process_setup+0x468>)
  400d3a:	4798      	blx	r3
  400d3c:	4604      	mov	r4, r0
  400d3e:	e01b      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400d40:	2400      	movs	r4, #0
  400d42:	e019      	b.n	400d78 <udc_process_setup+0x374>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  400d44:	2400      	movs	r4, #0
  400d46:	e017      	b.n	400d78 <udc_process_setup+0x374>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400d48:	4b40      	ldr	r3, [pc, #256]	; (400e4c <udc_process_setup+0x448>)
  400d4a:	88db      	ldrh	r3, [r3, #6]
  400d4c:	b95b      	cbnz	r3, 400d66 <udc_process_setup+0x362>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400d4e:	4b3f      	ldr	r3, [pc, #252]	; (400e4c <udc_process_setup+0x448>)
  400d50:	885b      	ldrh	r3, [r3, #2]
  400d52:	b953      	cbnz	r3, 400d6a <udc_process_setup+0x366>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d54:	4c3d      	ldr	r4, [pc, #244]	; (400e4c <udc_process_setup+0x448>)
  400d56:	7920      	ldrb	r0, [r4, #4]
  400d58:	4b45      	ldr	r3, [pc, #276]	; (400e70 <udc_process_setup+0x46c>)
  400d5a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400d5c:	7920      	ldrb	r0, [r4, #4]
  400d5e:	4b45      	ldr	r3, [pc, #276]	; (400e74 <udc_process_setup+0x470>)
  400d60:	4798      	blx	r3
  400d62:	4604      	mov	r4, r0
  400d64:	e008      	b.n	400d78 <udc_process_setup+0x374>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400d66:	2400      	movs	r4, #0
  400d68:	e006      	b.n	400d78 <udc_process_setup+0x374>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  400d6a:	2400      	movs	r4, #0
  400d6c:	e004      	b.n	400d78 <udc_process_setup+0x374>
				break;
			}
		}
#endif
	}
	return false;
  400d6e:	2400      	movs	r4, #0
  400d70:	e002      	b.n	400d78 <udc_process_setup+0x374>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  400d72:	2400      	movs	r4, #0
  400d74:	e000      	b.n	400d78 <udc_process_setup+0x374>
				break;
			}
		}
#endif
	}
	return false;
  400d76:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  400d78:	2c00      	cmp	r4, #0
  400d7a:	d163      	bne.n	400e44 <udc_process_setup+0x440>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400d7c:	4b33      	ldr	r3, [pc, #204]	; (400e4c <udc_process_setup+0x448>)
  400d7e:	781b      	ldrb	r3, [r3, #0]
  400d80:	f003 031f 	and.w	r3, r3, #31
  400d84:	2b01      	cmp	r3, #1
  400d86:	d11e      	bne.n	400dc6 <udc_process_setup+0x3c2>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400d88:	4b34      	ldr	r3, [pc, #208]	; (400e5c <udc_process_setup+0x458>)
  400d8a:	781b      	ldrb	r3, [r3, #0]
  400d8c:	b1db      	cbz	r3, 400dc6 <udc_process_setup+0x3c2>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400d8e:	4b2f      	ldr	r3, [pc, #188]	; (400e4c <udc_process_setup+0x448>)
  400d90:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400d92:	4b33      	ldr	r3, [pc, #204]	; (400e60 <udc_process_setup+0x45c>)
  400d94:	681d      	ldr	r5, [r3, #0]
  400d96:	682b      	ldr	r3, [r5, #0]
  400d98:	791b      	ldrb	r3, [r3, #4]
  400d9a:	42a3      	cmp	r3, r4
  400d9c:	d913      	bls.n	400dc6 <udc_process_setup+0x3c2>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400d9e:	4620      	mov	r0, r4
  400da0:	2100      	movs	r1, #0
  400da2:	4b35      	ldr	r3, [pc, #212]	; (400e78 <udc_process_setup+0x474>)
  400da4:	4798      	blx	r3
  400da6:	b170      	cbz	r0, 400dc6 <udc_process_setup+0x3c2>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400da8:	686b      	ldr	r3, [r5, #4]
  400daa:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400dae:	68eb      	ldr	r3, [r5, #12]
  400db0:	4798      	blx	r3
  400db2:	4601      	mov	r1, r0
  400db4:	4620      	mov	r0, r4
  400db6:	4b30      	ldr	r3, [pc, #192]	; (400e78 <udc_process_setup+0x474>)
  400db8:	4798      	blx	r3
  400dba:	b120      	cbz	r0, 400dc6 <udc_process_setup+0x3c2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  400dbc:	68ab      	ldr	r3, [r5, #8]
  400dbe:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  400dc0:	4604      	mov	r4, r0
  400dc2:	2800      	cmp	r0, #0
  400dc4:	d13e      	bne.n	400e44 <udc_process_setup+0x440>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400dc6:	4b21      	ldr	r3, [pc, #132]	; (400e4c <udc_process_setup+0x448>)
  400dc8:	781b      	ldrb	r3, [r3, #0]
  400dca:	f003 031f 	and.w	r3, r3, #31
  400dce:	2b02      	cmp	r3, #2
  400dd0:	d128      	bne.n	400e24 <udc_process_setup+0x420>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400dd2:	4b22      	ldr	r3, [pc, #136]	; (400e5c <udc_process_setup+0x458>)
  400dd4:	781b      	ldrb	r3, [r3, #0]
  400dd6:	b1fb      	cbz	r3, 400e18 <udc_process_setup+0x414>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400dd8:	4b21      	ldr	r3, [pc, #132]	; (400e60 <udc_process_setup+0x45c>)
  400dda:	681b      	ldr	r3, [r3, #0]
  400ddc:	681a      	ldr	r2, [r3, #0]
  400dde:	7912      	ldrb	r2, [r2, #4]
  400de0:	b1e2      	cbz	r2, 400e1c <udc_process_setup+0x418>
  400de2:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400de4:	4f24      	ldr	r7, [pc, #144]	; (400e78 <udc_process_setup+0x474>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400de6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 400e60 <udc_process_setup+0x45c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400dea:	685b      	ldr	r3, [r3, #4]
  400dec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400df0:	68f3      	ldr	r3, [r6, #12]
  400df2:	4798      	blx	r3
  400df4:	4601      	mov	r1, r0
  400df6:	4628      	mov	r0, r5
  400df8:	47b8      	blx	r7
  400dfa:	4604      	mov	r4, r0
  400dfc:	b310      	cbz	r0, 400e44 <udc_process_setup+0x440>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  400dfe:	68b3      	ldr	r3, [r6, #8]
  400e00:	4798      	blx	r3
  400e02:	4604      	mov	r4, r0
  400e04:	b9f0      	cbnz	r0, 400e44 <udc_process_setup+0x440>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400e06:	3501      	adds	r5, #1
  400e08:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400e0a:	f8d8 3000 	ldr.w	r3, [r8]
  400e0e:	681a      	ldr	r2, [r3, #0]
  400e10:	7912      	ldrb	r2, [r2, #4]
  400e12:	42aa      	cmp	r2, r5
  400e14:	d8e9      	bhi.n	400dea <udc_process_setup+0x3e6>
  400e16:	e015      	b.n	400e44 <udc_process_setup+0x440>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  400e18:	2400      	movs	r4, #0
  400e1a:	e013      	b.n	400e44 <udc_process_setup+0x440>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  400e1c:	2400      	movs	r4, #0
  400e1e:	e011      	b.n	400e44 <udc_process_setup+0x440>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  400e20:	2400      	movs	r4, #0
  400e22:	e00f      	b.n	400e44 <udc_process_setup+0x440>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400e24:	2400      	movs	r4, #0
  400e26:	e00d      	b.n	400e44 <udc_process_setup+0x440>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400e28:	f013 0f60 	tst.w	r3, #96	; 0x60
  400e2c:	d1a6      	bne.n	400d7c <udc_process_setup+0x378>
  400e2e:	e6c5      	b.n	400bbc <udc_process_setup+0x1b8>
  400e30:	f013 0f60 	tst.w	r3, #96	; 0x60
  400e34:	d1a2      	bne.n	400d7c <udc_process_setup+0x378>
  400e36:	e5f7      	b.n	400a28 <udc_process_setup+0x24>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  400e38:	2014      	movs	r0, #20
		str = udc_string_product_name;
  400e3a:	4c10      	ldr	r4, [pc, #64]	; (400e7c <udc_process_setup+0x478>)
  400e3c:	e64d      	b.n	400ada <udc_process_setup+0xd6>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  400e3e:	2001      	movs	r0, #1
		str = udc_get_string_serial_name();
  400e40:	4c0f      	ldr	r4, [pc, #60]	; (400e80 <udc_process_setup+0x47c>)
  400e42:	e64a      	b.n	400ada <udc_process_setup+0xd6>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  400e44:	4620      	mov	r0, r4
  400e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e4a:	bf00      	nop
  400e4c:	20000c14 	.word	0x20000c14
  400e50:	0040227d 	.word	0x0040227d
  400e54:	20000074 	.word	0x20000074
  400e58:	00400981 	.word	0x00400981
  400e5c:	20000b02 	.word	0x20000b02
  400e60:	20000afc 	.word	0x20000afc
  400e64:	00400919 	.word	0x00400919
  400e68:	004008b1 	.word	0x004008b1
  400e6c:	0040251d 	.word	0x0040251d
  400e70:	00402749 	.word	0x00402749
  400e74:	00402435 	.word	0x00402435
  400e78:	00400849 	.word	0x00400849
  400e7c:	20000028 	.word	0x20000028
  400e80:	0040cf08 	.word	0x0040cf08

00400e84 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e88:	460c      	mov	r4, r1
  400e8a:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  400e8c:	b960      	cbnz	r0, 400ea8 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
  400e8e:	2a00      	cmp	r2, #0
  400e90:	dd0e      	ble.n	400eb0 <_read+0x2c>
  400e92:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400e94:	4e09      	ldr	r6, [pc, #36]	; (400ebc <_read+0x38>)
  400e96:	4d0a      	ldr	r5, [pc, #40]	; (400ec0 <_read+0x3c>)
  400e98:	6830      	ldr	r0, [r6, #0]
  400e9a:	4621      	mov	r1, r4
  400e9c:	682b      	ldr	r3, [r5, #0]
  400e9e:	4798      	blx	r3
		ptr++;
  400ea0:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400ea2:	42bc      	cmp	r4, r7
  400ea4:	d1f8      	bne.n	400e98 <_read+0x14>
  400ea6:	e006      	b.n	400eb6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400ea8:	f04f 30ff 	mov.w	r0, #4294967295
  400eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
  400eb0:	2000      	movs	r0, #0
  400eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  400eb6:	4640      	mov	r0, r8
	}
	return nChars;
}
  400eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ebc:	20000c30 	.word	0x20000c30
  400ec0:	20000c10 	.word	0x20000c10

00400ec4 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
  400ec4:	b508      	push	{r3, lr}
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
  400ec6:	4b07      	ldr	r3, [pc, #28]	; (400ee4 <stdio_usb_putchar+0x20>)
  400ec8:	781b      	ldrb	r3, [r3, #0]
  400eca:	b143      	cbz	r3, 400ede <stdio_usb_putchar+0x1a>
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
  400ecc:	4608      	mov	r0, r1
  400ece:	4b06      	ldr	r3, [pc, #24]	; (400ee8 <stdio_usb_putchar+0x24>)
  400ed0:	4798      	blx	r3
  400ed2:	f1d0 0001 	rsbs	r0, r0, #1
  400ed6:	bf38      	it	cc
  400ed8:	2000      	movcc	r0, #0
  400eda:	4240      	negs	r0, r0
  400edc:	bd08      	pop	{r3, pc}
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
  400ede:	2000      	movs	r0, #0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
  400ee0:	bd08      	pop	{r3, pc}
  400ee2:	bf00      	nop
  400ee4:	20000b0a 	.word	0x20000b0a
  400ee8:	004007dd 	.word	0x004007dd

00400eec <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
  400eec:	b510      	push	{r4, lr}
  400eee:	460c      	mov	r4, r1
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
  400ef0:	4b04      	ldr	r3, [pc, #16]	; (400f04 <stdio_usb_getchar+0x18>)
  400ef2:	781b      	ldrb	r3, [r3, #0]
  400ef4:	b90b      	cbnz	r3, 400efa <stdio_usb_getchar+0xe>
		*data = 0;  // -1
  400ef6:	700b      	strb	r3, [r1, #0]
		return;
  400ef8:	bd10      	pop	{r4, pc}
	}

	*data = (char)udi_cdc_getc();
  400efa:	4b03      	ldr	r3, [pc, #12]	; (400f08 <stdio_usb_getchar+0x1c>)
  400efc:	4798      	blx	r3
  400efe:	7020      	strb	r0, [r4, #0]
  400f00:	bd10      	pop	{r4, pc}
  400f02:	bf00      	nop
  400f04:	20000b0a 	.word	0x20000b0a
  400f08:	004006b9 	.word	0x004006b9

00400f0c <stdio_usb_enable>:
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
  400f0c:	2001      	movs	r0, #1
  400f0e:	4b01      	ldr	r3, [pc, #4]	; (400f14 <stdio_usb_enable+0x8>)
  400f10:	7018      	strb	r0, [r3, #0]
	return true;
}
  400f12:	4770      	bx	lr
  400f14:	20000b0a 	.word	0x20000b0a

00400f18 <stdio_usb_disable>:

void stdio_usb_disable(void)
{
	stdio_usb_interface_enable = false;
  400f18:	2200      	movs	r2, #0
  400f1a:	4b01      	ldr	r3, [pc, #4]	; (400f20 <stdio_usb_disable+0x8>)
  400f1c:	701a      	strb	r2, [r3, #0]
  400f1e:	4770      	bx	lr
  400f20:	20000b0a 	.word	0x20000b0a

00400f24 <stdio_usb_init>:
}

void stdio_usb_init(void)
{
  400f24:	b570      	push	{r4, r5, r6, lr}
	stdio_base = NULL;
  400f26:	2400      	movs	r4, #0
  400f28:	4b0a      	ldr	r3, [pc, #40]	; (400f54 <stdio_usb_init+0x30>)
  400f2a:	601c      	str	r4, [r3, #0]
	ptr_put = stdio_usb_putchar;
  400f2c:	4a0a      	ldr	r2, [pc, #40]	; (400f58 <stdio_usb_init+0x34>)
  400f2e:	4b0b      	ldr	r3, [pc, #44]	; (400f5c <stdio_usb_init+0x38>)
  400f30:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
  400f32:	4a0b      	ldr	r2, [pc, #44]	; (400f60 <stdio_usb_init+0x3c>)
  400f34:	4b0b      	ldr	r3, [pc, #44]	; (400f64 <stdio_usb_init+0x40>)
  400f36:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
  400f38:	4b0b      	ldr	r3, [pc, #44]	; (400f68 <stdio_usb_init+0x44>)
  400f3a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400f3c:	4e0b      	ldr	r6, [pc, #44]	; (400f6c <stdio_usb_init+0x48>)
  400f3e:	6833      	ldr	r3, [r6, #0]
  400f40:	6898      	ldr	r0, [r3, #8]
  400f42:	4621      	mov	r1, r4
  400f44:	4d0a      	ldr	r5, [pc, #40]	; (400f70 <stdio_usb_init+0x4c>)
  400f46:	47a8      	blx	r5
	setbuf(stdin, NULL);
  400f48:	6833      	ldr	r3, [r6, #0]
  400f4a:	6858      	ldr	r0, [r3, #4]
  400f4c:	4621      	mov	r1, r4
  400f4e:	47a8      	blx	r5
  400f50:	bd70      	pop	{r4, r5, r6, pc}
  400f52:	bf00      	nop
  400f54:	20000c30 	.word	0x20000c30
  400f58:	00400ec5 	.word	0x00400ec5
  400f5c:	20000c2c 	.word	0x20000c2c
  400f60:	00400eed 	.word	0x00400eed
  400f64:	20000c10 	.word	0x20000c10
  400f68:	00400975 	.word	0x00400975
  400f6c:	20000518 	.word	0x20000518
  400f70:	004037dd 	.word	0x004037dd

00400f74 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f78:	4681      	mov	r9, r0
  400f7a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f7c:	4b14      	ldr	r3, [pc, #80]	; (400fd0 <pio_handler_process+0x5c>)
  400f7e:	4798      	blx	r3
  400f80:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f82:	4648      	mov	r0, r9
  400f84:	4b13      	ldr	r3, [pc, #76]	; (400fd4 <pio_handler_process+0x60>)
  400f86:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f88:	4005      	ands	r5, r0
  400f8a:	d017      	beq.n	400fbc <pio_handler_process+0x48>
  400f8c:	4f12      	ldr	r7, [pc, #72]	; (400fd8 <pio_handler_process+0x64>)
  400f8e:	f107 040c 	add.w	r4, r7, #12
  400f92:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400f94:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  400f98:	42b3      	cmp	r3, r6
  400f9a:	d10a      	bne.n	400fb2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f9c:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400fa0:	4229      	tst	r1, r5
  400fa2:	d006      	beq.n	400fb2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400fa4:	6823      	ldr	r3, [r4, #0]
  400fa6:	4630      	mov	r0, r6
  400fa8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400faa:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400fae:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400fb2:	42bc      	cmp	r4, r7
  400fb4:	d002      	beq.n	400fbc <pio_handler_process+0x48>
  400fb6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400fb8:	2d00      	cmp	r5, #0
  400fba:	d1eb      	bne.n	400f94 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400fbc:	4b07      	ldr	r3, [pc, #28]	; (400fdc <pio_handler_process+0x68>)
  400fbe:	681b      	ldr	r3, [r3, #0]
  400fc0:	b123      	cbz	r3, 400fcc <pio_handler_process+0x58>
		if (pio_capture_handler) {
  400fc2:	4b07      	ldr	r3, [pc, #28]	; (400fe0 <pio_handler_process+0x6c>)
  400fc4:	681b      	ldr	r3, [r3, #0]
  400fc6:	b10b      	cbz	r3, 400fcc <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  400fc8:	4648      	mov	r0, r9
  400fca:	4798      	blx	r3
  400fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400fd0:	00402ab9 	.word	0x00402ab9
  400fd4:	00402abd 	.word	0x00402abd
  400fd8:	20000b14 	.word	0x20000b14
  400fdc:	20000c34 	.word	0x20000c34
  400fe0:	20000b10 	.word	0x20000b10

00400fe4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400fe6:	4c0b      	ldr	r4, [pc, #44]	; (401014 <pio_handler_set+0x30>)
  400fe8:	6824      	ldr	r4, [r4, #0]
  400fea:	2c06      	cmp	r4, #6
  400fec:	d810      	bhi.n	401010 <pio_handler_set+0x2c>
		return 1;

	/* Define new source */
	pSource = &(gs_interrupt_sources[gs_ul_nb_sources]);
  400fee:	4f0a      	ldr	r7, [pc, #40]	; (401018 <pio_handler_set+0x34>)
  400ff0:	0126      	lsls	r6, r4, #4
  400ff2:	19bd      	adds	r5, r7, r6
	pSource->id = ul_id;
  400ff4:	51b9      	str	r1, [r7, r6]
	pSource->mask = ul_mask;
  400ff6:	606a      	str	r2, [r5, #4]
	pSource->attr = ul_attr;
  400ff8:	60ab      	str	r3, [r5, #8]
	pSource->handler = p_handler;
  400ffa:	9906      	ldr	r1, [sp, #24]
  400ffc:	60e9      	str	r1, [r5, #12]
	gs_ul_nb_sources++;
  400ffe:	3401      	adds	r4, #1
  401000:	4904      	ldr	r1, [pc, #16]	; (401014 <pio_handler_set+0x30>)
  401002:	600c      	str	r4, [r1, #0]

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401004:	4611      	mov	r1, r2
  401006:	461a      	mov	r2, r3
  401008:	4b04      	ldr	r3, [pc, #16]	; (40101c <pio_handler_set+0x38>)
  40100a:	4798      	blx	r3

	return 0;
  40100c:	2000      	movs	r0, #0
  40100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  401010:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  401012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401014:	20000b0c 	.word	0x20000b0c
  401018:	20000b14 	.word	0x20000b14
  40101c:	00402a7d 	.word	0x00402a7d

00401020 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401020:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401022:	4802      	ldr	r0, [pc, #8]	; (40102c <PIOA_Handler+0xc>)
  401024:	2109      	movs	r1, #9
  401026:	4b02      	ldr	r3, [pc, #8]	; (401030 <PIOA_Handler+0x10>)
  401028:	4798      	blx	r3
  40102a:	bd08      	pop	{r3, pc}
  40102c:	400e0e00 	.word	0x400e0e00
  401030:	00400f75 	.word	0x00400f75

00401034 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401034:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401036:	4802      	ldr	r0, [pc, #8]	; (401040 <PIOB_Handler+0xc>)
  401038:	210a      	movs	r1, #10
  40103a:	4b02      	ldr	r3, [pc, #8]	; (401044 <PIOB_Handler+0x10>)
  40103c:	4798      	blx	r3
  40103e:	bd08      	pop	{r3, pc}
  401040:	400e1000 	.word	0x400e1000
  401044:	00400f75 	.word	0x00400f75

00401048 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401048:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40104a:	4802      	ldr	r0, [pc, #8]	; (401054 <PIOC_Handler+0xc>)
  40104c:	210b      	movs	r1, #11
  40104e:	4b02      	ldr	r3, [pc, #8]	; (401058 <PIOC_Handler+0x10>)
  401050:	4798      	blx	r3
  401052:	bd08      	pop	{r3, pc}
  401054:	400e1200 	.word	0x400e1200
  401058:	00400f75 	.word	0x00400f75

0040105c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40105c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40105e:	4802      	ldr	r0, [pc, #8]	; (401068 <PIOD_Handler+0xc>)
  401060:	210c      	movs	r1, #12
  401062:	4b02      	ldr	r3, [pc, #8]	; (40106c <PIOD_Handler+0x10>)
  401064:	4798      	blx	r3
  401066:	bd08      	pop	{r3, pc}
  401068:	400e1400 	.word	0x400e1400
  40106c:	00400f75 	.word	0x00400f75

00401070 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401070:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401072:	4802      	ldr	r0, [pc, #8]	; (40107c <PIOE_Handler+0xc>)
  401074:	210d      	movs	r1, #13
  401076:	4b02      	ldr	r3, [pc, #8]	; (401080 <PIOE_Handler+0x10>)
  401078:	4798      	blx	r3
  40107a:	bd08      	pop	{r3, pc}
  40107c:	400e1600 	.word	0x400e1600
  401080:	00400f75 	.word	0x00400f75

00401084 <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  401084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401088:	4605      	mov	r5, r0
  40108a:	460c      	mov	r4, r1
  40108c:	4691      	mov	r9, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  40108e:	4b1b      	ldr	r3, [pc, #108]	; (4010fc <pio_handler_set_priority+0x78>)
  401090:	4798      	blx	r3
  401092:	4680      	mov	r8, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  401094:	4628      	mov	r0, r5
  401096:	f04f 31ff 	mov.w	r1, #4294967295
  40109a:	4b19      	ldr	r3, [pc, #100]	; (401100 <pio_handler_set_priority+0x7c>)
  40109c:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  40109e:	4628      	mov	r0, r5
  4010a0:	4b18      	ldr	r3, [pc, #96]	; (401104 <pio_handler_set_priority+0x80>)
  4010a2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4010a4:	b2e7      	uxtb	r7, r4
  4010a6:	f007 031f 	and.w	r3, r7, #31
  4010aa:	2601      	movs	r6, #1
  4010ac:	409e      	lsls	r6, r3
  4010ae:	0963      	lsrs	r3, r4, #5
  4010b0:	009b      	lsls	r3, r3, #2
  4010b2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  4010b6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  4010ba:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4010be:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  4010c2:	2c00      	cmp	r4, #0
  4010c4:	da09      	bge.n	4010da <pio_handler_set_priority+0x56>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4010c6:	f007 070f 	and.w	r7, r7, #15
  4010ca:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4010ce:	fa5f f989 	uxtb.w	r9, r9
  4010d2:	4a0d      	ldr	r2, [pc, #52]	; (401108 <pio_handler_set_priority+0x84>)
  4010d4:	f802 9007 	strb.w	r9, [r2, r7]
  4010d8:	e009      	b.n	4010ee <pio_handler_set_priority+0x6a>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4010da:	ea4f 1909 	mov.w	r9, r9, lsl #4
  4010de:	fa5f f989 	uxtb.w	r9, r9
  4010e2:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
  4010e6:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
  4010ea:	f884 9300 	strb.w	r9, [r4, #768]	; 0x300
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4010ee:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  4010f0:	4628      	mov	r0, r5
  4010f2:	4641      	mov	r1, r8
  4010f4:	4b05      	ldr	r3, [pc, #20]	; (40110c <pio_handler_set_priority+0x88>)
  4010f6:	4798      	blx	r3
  4010f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4010fc:	00402abd 	.word	0x00402abd
  401100:	00402ab5 	.word	0x00402ab5
  401104:	00402ab9 	.word	0x00402ab9
  401108:	e000ed14 	.word	0xe000ed14
  40110c:	00402aad 	.word	0x00402aad

00401110 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  401110:	4603      	mov	r3, r0
  401112:	bb58      	cbnz	r0, 40116c <udd_sleep_mode+0x5c>
  401114:	4a18      	ldr	r2, [pc, #96]	; (401178 <udd_sleep_mode+0x68>)
  401116:	7812      	ldrb	r2, [r2, #0]
  401118:	b32a      	cbz	r2, 401166 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40111a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40111e:	b672      	cpsid	i
  401120:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401124:	4a15      	ldr	r2, [pc, #84]	; (40117c <udd_sleep_mode+0x6c>)
  401126:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401128:	4a15      	ldr	r2, [pc, #84]	; (401180 <udd_sleep_mode+0x70>)
  40112a:	7890      	ldrb	r0, [r2, #2]
  40112c:	3801      	subs	r0, #1
  40112e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401130:	b9c9      	cbnz	r1, 401166 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  401132:	2101      	movs	r1, #1
  401134:	4a11      	ldr	r2, [pc, #68]	; (40117c <udd_sleep_mode+0x6c>)
  401136:	7011      	strb	r1, [r2, #0]
  401138:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40113c:	b662      	cpsie	i
  40113e:	e012      	b.n	401166 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401140:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401144:	b672      	cpsid	i
  401146:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40114a:	2000      	movs	r0, #0
  40114c:	4a0b      	ldr	r2, [pc, #44]	; (40117c <udd_sleep_mode+0x6c>)
  40114e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401150:	4a0b      	ldr	r2, [pc, #44]	; (401180 <udd_sleep_mode+0x70>)
  401152:	7890      	ldrb	r0, [r2, #2]
  401154:	3001      	adds	r0, #1
  401156:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401158:	b929      	cbnz	r1, 401166 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  40115a:	2101      	movs	r1, #1
  40115c:	4a07      	ldr	r2, [pc, #28]	; (40117c <udd_sleep_mode+0x6c>)
  40115e:	7011      	strb	r1, [r2, #0]
  401160:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401164:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401166:	4a04      	ldr	r2, [pc, #16]	; (401178 <udd_sleep_mode+0x68>)
  401168:	7013      	strb	r3, [r2, #0]
  40116a:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  40116c:	4a02      	ldr	r2, [pc, #8]	; (401178 <udd_sleep_mode+0x68>)
  40116e:	7812      	ldrb	r2, [r2, #0]
  401170:	2a00      	cmp	r2, #0
  401172:	d0e5      	beq.n	401140 <udd_sleep_mode+0x30>
  401174:	e7f7      	b.n	401166 <udd_sleep_mode+0x56>
  401176:	bf00      	nop
  401178:	20000bc4 	.word	0x20000bc4
  40117c:	200000e8 	.word	0x200000e8
  401180:	20000c08 	.word	0x20000c08

00401184 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401184:	4a03      	ldr	r2, [pc, #12]	; (401194 <udd_ctrl_init+0x10>)
  401186:	2300      	movs	r3, #0
  401188:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40118a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  40118c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40118e:	4a02      	ldr	r2, [pc, #8]	; (401198 <udd_ctrl_init+0x14>)
  401190:	7013      	strb	r3, [r2, #0]
  401192:	4770      	bx	lr
  401194:	20000c14 	.word	0x20000c14
  401198:	20000bc8 	.word	0x20000bc8

0040119c <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  40119c:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40119e:	2205      	movs	r2, #5
  4011a0:	4b0e      	ldr	r3, [pc, #56]	; (4011dc <udd_ctrl_stall_data+0x40>)
  4011a2:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4011a4:	4b0e      	ldr	r3, [pc, #56]	; (4011e0 <udd_ctrl_stall_data+0x44>)
  4011a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011a8:	9200      	str	r2, [sp, #0]
  4011aa:	9a00      	ldr	r2, [sp, #0]
  4011ac:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4011b0:	9200      	str	r2, [sp, #0]
  4011b2:	9a00      	ldr	r2, [sp, #0]
  4011b4:	f042 0220 	orr.w	r2, r2, #32
  4011b8:	9200      	str	r2, [sp, #0]
  4011ba:	9a00      	ldr	r2, [sp, #0]
  4011bc:	631a      	str	r2, [r3, #48]	; 0x30
  4011be:	2300      	movs	r3, #0
  4011c0:	9301      	str	r3, [sp, #4]
  4011c2:	9b01      	ldr	r3, [sp, #4]
  4011c4:	2b13      	cmp	r3, #19
  4011c6:	d806      	bhi.n	4011d6 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4011c8:	bf00      	nop
  4011ca:	9b01      	ldr	r3, [sp, #4]
  4011cc:	3301      	adds	r3, #1
  4011ce:	9301      	str	r3, [sp, #4]
  4011d0:	9b01      	ldr	r3, [sp, #4]
  4011d2:	2b13      	cmp	r3, #19
  4011d4:	d9f8      	bls.n	4011c8 <udd_ctrl_stall_data+0x2c>
}
  4011d6:	b002      	add	sp, #8
  4011d8:	4770      	bx	lr
  4011da:	bf00      	nop
  4011dc:	20000bc8 	.word	0x20000bc8
  4011e0:	40084000 	.word	0x40084000

004011e4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4011e4:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4011e6:	2203      	movs	r2, #3
  4011e8:	4b0e      	ldr	r3, [pc, #56]	; (401224 <udd_ctrl_send_zlp_in+0x40>)
  4011ea:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4011ec:	4b0e      	ldr	r3, [pc, #56]	; (401228 <udd_ctrl_send_zlp_in+0x44>)
  4011ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011f0:	9200      	str	r2, [sp, #0]
  4011f2:	9a00      	ldr	r2, [sp, #0]
  4011f4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4011f8:	9200      	str	r2, [sp, #0]
  4011fa:	9a00      	ldr	r2, [sp, #0]
  4011fc:	f042 0210 	orr.w	r2, r2, #16
  401200:	9200      	str	r2, [sp, #0]
  401202:	9a00      	ldr	r2, [sp, #0]
  401204:	631a      	str	r2, [r3, #48]	; 0x30
  401206:	2300      	movs	r3, #0
  401208:	9301      	str	r3, [sp, #4]
  40120a:	9b01      	ldr	r3, [sp, #4]
  40120c:	2b13      	cmp	r3, #19
  40120e:	d806      	bhi.n	40121e <udd_ctrl_send_zlp_in+0x3a>
  401210:	bf00      	nop
  401212:	9b01      	ldr	r3, [sp, #4]
  401214:	3301      	adds	r3, #1
  401216:	9301      	str	r3, [sp, #4]
  401218:	9b01      	ldr	r3, [sp, #4]
  40121a:	2b13      	cmp	r3, #19
  40121c:	d9f8      	bls.n	401210 <udd_ctrl_send_zlp_in+0x2c>
}
  40121e:	b002      	add	sp, #8
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	20000bc8 	.word	0x20000bc8
  401228:	40084000 	.word	0x40084000

0040122c <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  40122c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  40122e:	4b02      	ldr	r3, [pc, #8]	; (401238 <udd_ctrl_endofrequest+0xc>)
  401230:	691b      	ldr	r3, [r3, #16]
  401232:	b103      	cbz	r3, 401236 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401234:	4798      	blx	r3
  401236:	bd08      	pop	{r3, pc}
  401238:	20000c14 	.word	0x20000c14

0040123c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  40123c:	b570      	push	{r4, r5, r6, lr}
  40123e:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401240:	4b75      	ldr	r3, [pc, #468]	; (401418 <udd_ctrl_in_sent+0x1dc>)
  401242:	781b      	ldrb	r3, [r3, #0]
  401244:	2b03      	cmp	r3, #3
  401246:	d11d      	bne.n	401284 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401248:	4b74      	ldr	r3, [pc, #464]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  40124a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40124c:	9200      	str	r2, [sp, #0]
  40124e:	9a00      	ldr	r2, [sp, #0]
  401250:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401254:	9200      	str	r2, [sp, #0]
  401256:	9a00      	ldr	r2, [sp, #0]
  401258:	f022 0201 	bic.w	r2, r2, #1
  40125c:	9200      	str	r2, [sp, #0]
  40125e:	9a00      	ldr	r2, [sp, #0]
  401260:	631a      	str	r2, [r3, #48]	; 0x30
  401262:	2300      	movs	r3, #0
  401264:	9301      	str	r3, [sp, #4]
  401266:	9b01      	ldr	r3, [sp, #4]
  401268:	2b13      	cmp	r3, #19
  40126a:	d806      	bhi.n	40127a <udd_ctrl_in_sent+0x3e>
  40126c:	bf00      	nop
  40126e:	9b01      	ldr	r3, [sp, #4]
  401270:	3301      	adds	r3, #1
  401272:	9301      	str	r3, [sp, #4]
  401274:	9b01      	ldr	r3, [sp, #4]
  401276:	2b13      	cmp	r3, #19
  401278:	d9f8      	bls.n	40126c <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  40127a:	4b69      	ldr	r3, [pc, #420]	; (401420 <udd_ctrl_in_sent+0x1e4>)
  40127c:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  40127e:	4b69      	ldr	r3, [pc, #420]	; (401424 <udd_ctrl_in_sent+0x1e8>)
  401280:	4798      	blx	r3
		return;
  401282:	e0c6      	b.n	401412 <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401284:	4b68      	ldr	r3, [pc, #416]	; (401428 <udd_ctrl_in_sent+0x1ec>)
  401286:	881b      	ldrh	r3, [r3, #0]
  401288:	4a68      	ldr	r2, [pc, #416]	; (40142c <udd_ctrl_in_sent+0x1f0>)
  40128a:	8994      	ldrh	r4, [r2, #12]
  40128c:	1ae4      	subs	r4, r4, r3
  40128e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401290:	2c00      	cmp	r4, #0
  401292:	d133      	bne.n	4012fc <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401294:	4a66      	ldr	r2, [pc, #408]	; (401430 <udd_ctrl_in_sent+0x1f4>)
  401296:	8811      	ldrh	r1, [r2, #0]
  401298:	440b      	add	r3, r1
  40129a:	b29b      	uxth	r3, r3
  40129c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40129e:	4a63      	ldr	r2, [pc, #396]	; (40142c <udd_ctrl_in_sent+0x1f0>)
  4012a0:	88d2      	ldrh	r2, [r2, #6]
  4012a2:	429a      	cmp	r2, r3
  4012a4:	d002      	beq.n	4012ac <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  4012a6:	4b63      	ldr	r3, [pc, #396]	; (401434 <udd_ctrl_in_sent+0x1f8>)
  4012a8:	781b      	ldrb	r3, [r3, #0]
  4012aa:	b1eb      	cbz	r3, 4012e8 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4012ac:	2204      	movs	r2, #4
  4012ae:	4b5a      	ldr	r3, [pc, #360]	; (401418 <udd_ctrl_in_sent+0x1dc>)
  4012b0:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  4012b2:	4b5a      	ldr	r3, [pc, #360]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  4012b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4012b6:	9202      	str	r2, [sp, #8]
  4012b8:	9a02      	ldr	r2, [sp, #8]
  4012ba:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4012be:	9202      	str	r2, [sp, #8]
  4012c0:	9a02      	ldr	r2, [sp, #8]
  4012c2:	f022 0201 	bic.w	r2, r2, #1
  4012c6:	9202      	str	r2, [sp, #8]
  4012c8:	9a02      	ldr	r2, [sp, #8]
  4012ca:	631a      	str	r2, [r3, #48]	; 0x30
  4012cc:	2300      	movs	r3, #0
  4012ce:	9303      	str	r3, [sp, #12]
  4012d0:	9b03      	ldr	r3, [sp, #12]
  4012d2:	2b13      	cmp	r3, #19
  4012d4:	f200 809d 	bhi.w	401412 <udd_ctrl_in_sent+0x1d6>
  4012d8:	bf00      	nop
  4012da:	9b03      	ldr	r3, [sp, #12]
  4012dc:	3301      	adds	r3, #1
  4012de:	9303      	str	r3, [sp, #12]
  4012e0:	9b03      	ldr	r3, [sp, #12]
  4012e2:	2b13      	cmp	r3, #19
  4012e4:	d9f8      	bls.n	4012d8 <udd_ctrl_in_sent+0x9c>
  4012e6:	e094      	b.n	401412 <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  4012e8:	4b50      	ldr	r3, [pc, #320]	; (40142c <udd_ctrl_in_sent+0x1f0>)
  4012ea:	695b      	ldr	r3, [r3, #20]
  4012ec:	b16b      	cbz	r3, 40130a <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4012ee:	4798      	blx	r3
  4012f0:	b158      	cbz	r0, 40130a <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  4012f2:	2200      	movs	r2, #0
  4012f4:	4b4c      	ldr	r3, [pc, #304]	; (401428 <udd_ctrl_in_sent+0x1ec>)
  4012f6:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4012f8:	4b4c      	ldr	r3, [pc, #304]	; (40142c <udd_ctrl_in_sent+0x1f0>)
  4012fa:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4012fc:	2c3f      	cmp	r4, #63	; 0x3f
  4012fe:	d904      	bls.n	40130a <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401300:	2200      	movs	r2, #0
  401302:	4b4c      	ldr	r3, [pc, #304]	; (401434 <udd_ctrl_in_sent+0x1f8>)
  401304:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401306:	2440      	movs	r4, #64	; 0x40
  401308:	e002      	b.n	401310 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  40130a:	2201      	movs	r2, #1
  40130c:	4b49      	ldr	r3, [pc, #292]	; (401434 <udd_ctrl_in_sent+0x1f8>)
  40130e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401310:	4b46      	ldr	r3, [pc, #280]	; (40142c <udd_ctrl_in_sent+0x1f0>)
  401312:	6899      	ldr	r1, [r3, #8]
  401314:	4b44      	ldr	r3, [pc, #272]	; (401428 <udd_ctrl_in_sent+0x1ec>)
  401316:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401318:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40131c:	f1d0 0001 	rsbs	r0, r0, #1
  401320:	bf38      	it	cc
  401322:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401324:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401326:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40132a:	2200      	movs	r2, #0
  40132c:	4b42      	ldr	r3, [pc, #264]	; (401438 <udd_ctrl_in_sent+0x1fc>)
  40132e:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401330:	4b3a      	ldr	r3, [pc, #232]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  401332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401334:	f013 0f02 	tst.w	r3, #2
  401338:	d101      	bne.n	40133e <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  40133a:	bb24      	cbnz	r4, 401386 <udd_ctrl_in_sent+0x14a>
  40133c:	e02d      	b.n	40139a <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40133e:	b128      	cbz	r0, 40134c <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  401340:	2201      	movs	r2, #1
  401342:	4b3d      	ldr	r3, [pc, #244]	; (401438 <udd_ctrl_in_sent+0x1fc>)
  401344:	701a      	strb	r2, [r3, #0]
  401346:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40134a:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  40134c:	2204      	movs	r2, #4
  40134e:	4b32      	ldr	r3, [pc, #200]	; (401418 <udd_ctrl_in_sent+0x1dc>)
  401350:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401352:	4b32      	ldr	r3, [pc, #200]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  401354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401356:	9204      	str	r2, [sp, #16]
  401358:	9a04      	ldr	r2, [sp, #16]
  40135a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40135e:	9204      	str	r2, [sp, #16]
  401360:	9a04      	ldr	r2, [sp, #16]
  401362:	f022 0201 	bic.w	r2, r2, #1
  401366:	9204      	str	r2, [sp, #16]
  401368:	9a04      	ldr	r2, [sp, #16]
  40136a:	631a      	str	r2, [r3, #48]	; 0x30
  40136c:	2300      	movs	r3, #0
  40136e:	9305      	str	r3, [sp, #20]
  401370:	9b05      	ldr	r3, [sp, #20]
  401372:	2b13      	cmp	r3, #19
  401374:	d84d      	bhi.n	401412 <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401376:	bf00      	nop
  401378:	9b05      	ldr	r3, [sp, #20]
  40137a:	3301      	adds	r3, #1
  40137c:	9305      	str	r3, [sp, #20]
  40137e:	9b05      	ldr	r3, [sp, #20]
  401380:	2b13      	cmp	r3, #19
  401382:	d9f8      	bls.n	401376 <udd_ctrl_in_sent+0x13a>
  401384:	e045      	b.n	401412 <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401386:	4431      	add	r1, r6
  401388:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  40138a:	4d24      	ldr	r5, [pc, #144]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  40138c:	f813 2b01 	ldrb.w	r2, [r3], #1
  401390:	652a      	str	r2, [r5, #80]	; 0x50
  401392:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401394:	b2d2      	uxtb	r2, r2
  401396:	42a2      	cmp	r2, r4
  401398:	d3f8      	bcc.n	40138c <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  40139a:	4434      	add	r4, r6
  40139c:	4b22      	ldr	r3, [pc, #136]	; (401428 <udd_ctrl_in_sent+0x1ec>)
  40139e:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  4013a0:	4b1e      	ldr	r3, [pc, #120]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  4013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013a4:	9206      	str	r2, [sp, #24]
  4013a6:	9a06      	ldr	r2, [sp, #24]
  4013a8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4013ac:	9206      	str	r2, [sp, #24]
  4013ae:	9a06      	ldr	r2, [sp, #24]
  4013b0:	f042 0210 	orr.w	r2, r2, #16
  4013b4:	9206      	str	r2, [sp, #24]
  4013b6:	9a06      	ldr	r2, [sp, #24]
  4013b8:	631a      	str	r2, [r3, #48]	; 0x30
  4013ba:	2300      	movs	r3, #0
  4013bc:	9307      	str	r3, [sp, #28]
  4013be:	9b07      	ldr	r3, [sp, #28]
  4013c0:	2b13      	cmp	r3, #19
  4013c2:	d806      	bhi.n	4013d2 <udd_ctrl_in_sent+0x196>
  4013c4:	bf00      	nop
  4013c6:	9b07      	ldr	r3, [sp, #28]
  4013c8:	3301      	adds	r3, #1
  4013ca:	9307      	str	r3, [sp, #28]
  4013cc:	9b07      	ldr	r3, [sp, #28]
  4013ce:	2b13      	cmp	r3, #19
  4013d0:	d9f8      	bls.n	4013c4 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  4013d2:	4b12      	ldr	r3, [pc, #72]	; (40141c <udd_ctrl_in_sent+0x1e0>)
  4013d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4013d6:	9208      	str	r2, [sp, #32]
  4013d8:	9a08      	ldr	r2, [sp, #32]
  4013da:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4013de:	9208      	str	r2, [sp, #32]
  4013e0:	9a08      	ldr	r2, [sp, #32]
  4013e2:	f022 0201 	bic.w	r2, r2, #1
  4013e6:	9208      	str	r2, [sp, #32]
  4013e8:	9a08      	ldr	r2, [sp, #32]
  4013ea:	631a      	str	r2, [r3, #48]	; 0x30
  4013ec:	2300      	movs	r3, #0
  4013ee:	9309      	str	r3, [sp, #36]	; 0x24
  4013f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4013f2:	2b13      	cmp	r3, #19
  4013f4:	d806      	bhi.n	401404 <udd_ctrl_in_sent+0x1c8>
  4013f6:	bf00      	nop
  4013f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4013fa:	3301      	adds	r3, #1
  4013fc:	9309      	str	r3, [sp, #36]	; 0x24
  4013fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401400:	2b13      	cmp	r3, #19
  401402:	d9f8      	bls.n	4013f6 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401404:	b128      	cbz	r0, 401412 <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401406:	2201      	movs	r2, #1
  401408:	4b0b      	ldr	r3, [pc, #44]	; (401438 <udd_ctrl_in_sent+0x1fc>)
  40140a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40140c:	f3bf 8f5f 	dmb	sy
  401410:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401412:	b00a      	add	sp, #40	; 0x28
  401414:	bd70      	pop	{r4, r5, r6, pc}
  401416:	bf00      	nop
  401418:	20000bc8 	.word	0x20000bc8
  40141c:	40084000 	.word	0x40084000
  401420:	0040122d 	.word	0x0040122d
  401424:	00401185 	.word	0x00401185
  401428:	20000bc6 	.word	0x20000bc6
  40142c:	20000c14 	.word	0x20000c14
  401430:	20000b84 	.word	0x20000b84
  401434:	20000bc9 	.word	0x20000bc9
  401438:	200000e8 	.word	0x200000e8

0040143c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  40143c:	b538      	push	{r3, r4, r5, lr}
  40143e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401440:	7c44      	ldrb	r4, [r0, #17]
  401442:	f014 0f10 	tst.w	r4, #16
  401446:	d015      	beq.n	401474 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401448:	7c44      	ldrb	r4, [r0, #17]
  40144a:	f36f 1404 	bfc	r4, #4, #1
  40144e:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401450:	6804      	ldr	r4, [r0, #0]
  401452:	b17c      	cbz	r4, 401474 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401454:	f102 050c 	add.w	r5, r2, #12
  401458:	4807      	ldr	r0, [pc, #28]	; (401478 <udd_ep_finish_job+0x3c>)
  40145a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  40145e:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401462:	bf18      	it	ne
  401464:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401468:	2901      	cmp	r1, #1
  40146a:	bf14      	ite	ne
  40146c:	2000      	movne	r0, #0
  40146e:	2001      	moveq	r0, #1
  401470:	6899      	ldr	r1, [r3, #8]
  401472:	47a0      	blx	r4
  401474:	bd38      	pop	{r3, r4, r5, pc}
  401476:	bf00      	nop
  401478:	40084000 	.word	0x40084000

0040147c <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  40147c:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40147e:	1e42      	subs	r2, r0, #1
  401480:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401484:	4b2f      	ldr	r3, [pc, #188]	; (401544 <udd_ep_ack_out_received+0xc8>)
  401486:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40148a:	0083      	lsls	r3, r0, #2
  40148c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401490:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	if (Is_udd_all_banks_received(ep)) {
  401494:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401496:	f001 0142 	and.w	r1, r1, #66	; 0x42
  40149a:	2942      	cmp	r1, #66	; 0x42
  40149c:	d00e      	beq.n	4014bc <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  40149e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4014a0:	f011 0f02 	tst.w	r1, #2
  4014a4:	d004      	beq.n	4014b0 <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  4014a6:	7c51      	ldrb	r1, [r2, #17]
  4014a8:	f36f 0183 	bfc	r1, #2, #2
  4014ac:	7451      	strb	r1, [r2, #17]
  4014ae:	e009      	b.n	4014c4 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  4014b0:	7c51      	ldrb	r1, [r2, #17]
  4014b2:	2001      	movs	r0, #1
  4014b4:	f360 0183 	bfi	r1, r0, #2, #2
  4014b8:	7451      	strb	r1, [r2, #17]
  4014ba:	e024      	b.n	401506 <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  4014bc:	7c51      	ldrb	r1, [r2, #17]
  4014be:	f011 0f0c 	tst.w	r1, #12
  4014c2:	d120      	bne.n	401506 <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  4014c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4014c6:	9100      	str	r1, [sp, #0]
  4014c8:	9900      	ldr	r1, [sp, #0]
  4014ca:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4014ce:	9100      	str	r1, [sp, #0]
  4014d0:	9900      	ldr	r1, [sp, #0]
  4014d2:	f021 0102 	bic.w	r1, r1, #2
  4014d6:	9100      	str	r1, [sp, #0]
  4014d8:	9900      	ldr	r1, [sp, #0]
  4014da:	6319      	str	r1, [r3, #48]	; 0x30
  4014dc:	2300      	movs	r3, #0
  4014de:	9301      	str	r3, [sp, #4]
  4014e0:	9b01      	ldr	r3, [sp, #4]
  4014e2:	2b13      	cmp	r3, #19
  4014e4:	d806      	bhi.n	4014f4 <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4014e6:	bf00      	nop
  4014e8:	9b01      	ldr	r3, [sp, #4]
  4014ea:	3301      	adds	r3, #1
  4014ec:	9301      	str	r3, [sp, #4]
  4014ee:	9b01      	ldr	r3, [sp, #4]
  4014f0:	2b13      	cmp	r3, #19
  4014f2:	d9f8      	bls.n	4014e6 <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  4014f4:	b318      	cbz	r0, 40153e <udd_ep_ack_out_received+0xc2>
  4014f6:	2803      	cmp	r0, #3
  4014f8:	d021      	beq.n	40153e <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  4014fa:	7c53      	ldrb	r3, [r2, #17]
  4014fc:	2101      	movs	r1, #1
  4014fe:	f361 0383 	bfi	r3, r1, #2, #2
  401502:	7453      	strb	r3, [r2, #17]
  401504:	e01b      	b.n	40153e <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401506:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401508:	9102      	str	r1, [sp, #8]
  40150a:	9902      	ldr	r1, [sp, #8]
  40150c:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401510:	9102      	str	r1, [sp, #8]
  401512:	9902      	ldr	r1, [sp, #8]
  401514:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401518:	9102      	str	r1, [sp, #8]
  40151a:	9902      	ldr	r1, [sp, #8]
  40151c:	6319      	str	r1, [r3, #48]	; 0x30
  40151e:	2300      	movs	r3, #0
  401520:	9303      	str	r3, [sp, #12]
  401522:	9b03      	ldr	r3, [sp, #12]
  401524:	2b13      	cmp	r3, #19
  401526:	d806      	bhi.n	401536 <udd_ep_ack_out_received+0xba>
  401528:	bf00      	nop
  40152a:	9b03      	ldr	r3, [sp, #12]
  40152c:	3301      	adds	r3, #1
  40152e:	9303      	str	r3, [sp, #12]
  401530:	9b03      	ldr	r3, [sp, #12]
  401532:	2b13      	cmp	r3, #19
  401534:	d9f8      	bls.n	401528 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  401536:	7c53      	ldrb	r3, [r2, #17]
  401538:	f36f 0383 	bfc	r3, #2, #2
  40153c:	7453      	strb	r3, [r2, #17]
	}
}
  40153e:	b004      	add	sp, #16
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	20000b88 	.word	0x20000b88

00401548 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401548:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  40154c:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40154e:	4607      	mov	r7, r0
  401550:	1e46      	subs	r6, r0, #1
  401552:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401556:	4b52      	ldr	r3, [pc, #328]	; (4016a0 <udd_ep_in_sent+0x158>)
  401558:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40155c:	7c73      	ldrb	r3, [r6, #17]
  40155e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  401562:	b120      	cbz	r0, 40156e <udd_ep_in_sent+0x26>
  401564:	2803      	cmp	r0, #3
  401566:	bf14      	ite	ne
  401568:	2202      	movne	r2, #2
  40156a:	2201      	moveq	r2, #1
  40156c:	e000      	b.n	401570 <udd_ep_in_sent+0x28>
  40156e:	2201      	movs	r2, #1
  401570:	429a      	cmp	r2, r3
  401572:	f340 8089 	ble.w	401688 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401576:	68f3      	ldr	r3, [r6, #12]
  401578:	68b2      	ldr	r2, [r6, #8]
  40157a:	4293      	cmp	r3, r2
  40157c:	d304      	bcc.n	401588 <udd_ep_in_sent+0x40>
  40157e:	7c74      	ldrb	r4, [r6, #17]
  401580:	f014 0f40 	tst.w	r4, #64	; 0x40
  401584:	f000 8082 	beq.w	40168c <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401588:	6874      	ldr	r4, [r6, #4]
  40158a:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40158c:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401590:	8a32      	ldrh	r2, [r6, #16]
  401592:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401596:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401598:	bf26      	itte	cs
  40159a:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  40159c:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  4015a0:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  4015a4:	444b      	add	r3, r9
  4015a6:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015a8:	f1b9 0f07 	cmp.w	r9, #7
  4015ac:	d926      	bls.n	4015fc <udd_ep_in_sent+0xb4>
  4015ae:	4623      	mov	r3, r4
  4015b0:	f1a9 0a08 	sub.w	sl, r9, #8
  4015b4:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  4015b8:	f104 0c08 	add.w	ip, r4, #8
  4015bc:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  4015c0:	0082      	lsls	r2, r0, #2
  4015c2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4015c6:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015ca:	781d      	ldrb	r5, [r3, #0]
  4015cc:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015ce:	785d      	ldrb	r5, [r3, #1]
  4015d0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015d2:	789d      	ldrb	r5, [r3, #2]
  4015d4:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015d6:	78dd      	ldrb	r5, [r3, #3]
  4015d8:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015da:	791d      	ldrb	r5, [r3, #4]
  4015dc:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015de:	795d      	ldrb	r5, [r3, #5]
  4015e0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015e2:	799d      	ldrb	r5, [r3, #6]
  4015e4:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4015e6:	79dd      	ldrb	r5, [r3, #7]
  4015e8:	6515      	str	r5, [r2, #80]	; 0x50
  4015ea:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  4015ec:	4563      	cmp	r3, ip
  4015ee:	d1ec      	bne.n	4015ca <udd_ep_in_sent+0x82>
  4015f0:	f10a 0a01 	add.w	sl, sl, #1
  4015f4:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  4015f8:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  4015fc:	f1b9 0f00 	cmp.w	r9, #0
  401600:	d009      	beq.n	401616 <udd_ep_in_sent+0xce>
  401602:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401604:	4d27      	ldr	r5, [pc, #156]	; (4016a4 <udd_ep_in_sent+0x15c>)
  401606:	f814 2b01 	ldrb.w	r2, [r4], #1
  40160a:	f107 0314 	add.w	r3, r7, #20
  40160e:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401612:	454c      	cmp	r4, r9
  401614:	d1f7      	bne.n	401606 <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401616:	7c73      	ldrb	r3, [r6, #17]
  401618:	f3c3 0281 	ubfx	r2, r3, #2, #2
  40161c:	3201      	adds	r2, #1
  40161e:	f362 0383 	bfi	r3, r2, #2, #2
  401622:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401624:	b1e1      	cbz	r1, 401660 <udd_ep_in_sent+0x118>
  401626:	0080      	lsls	r0, r0, #2
  401628:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  40162c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
		udd_set_transmit_ready(ep);
  401630:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401632:	9300      	str	r3, [sp, #0]
  401634:	9b00      	ldr	r3, [sp, #0]
  401636:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40163a:	9300      	str	r3, [sp, #0]
  40163c:	9b00      	ldr	r3, [sp, #0]
  40163e:	f043 0310 	orr.w	r3, r3, #16
  401642:	9300      	str	r3, [sp, #0]
  401644:	9b00      	ldr	r3, [sp, #0]
  401646:	6303      	str	r3, [r0, #48]	; 0x30
  401648:	2300      	movs	r3, #0
  40164a:	9301      	str	r3, [sp, #4]
  40164c:	9b01      	ldr	r3, [sp, #4]
  40164e:	2b13      	cmp	r3, #19
  401650:	d806      	bhi.n	401660 <udd_ep_in_sent+0x118>
  401652:	bf00      	nop
  401654:	9b01      	ldr	r3, [sp, #4]
  401656:	3301      	adds	r3, #1
  401658:	9301      	str	r3, [sp, #4]
  40165a:	9b01      	ldr	r3, [sp, #4]
  40165c:	2b13      	cmp	r3, #19
  40165e:	d9f8      	bls.n	401652 <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401660:	f1b8 0f00 	cmp.w	r8, #0
  401664:	d003      	beq.n	40166e <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  401666:	7c73      	ldrb	r3, [r6, #17]
  401668:	f36f 1386 	bfc	r3, #6, #1
  40166c:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  40166e:	68f2      	ldr	r2, [r6, #12]
  401670:	68b3      	ldr	r3, [r6, #8]
  401672:	429a      	cmp	r2, r3
  401674:	d30c      	bcc.n	401690 <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  401676:	7c73      	ldrb	r3, [r6, #17]
  401678:	f013 0f40 	tst.w	r3, #64	; 0x40
  40167c:	d10a      	bne.n	401694 <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  40167e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401682:	7473      	strb	r3, [r6, #17]
		return false;
  401684:	2000      	movs	r0, #0
  401686:	e006      	b.n	401696 <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401688:	2001      	movs	r0, #1
  40168a:	e004      	b.n	401696 <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  40168c:	2000      	movs	r0, #0
  40168e:	e002      	b.n	401696 <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401690:	2001      	movs	r0, #1
  401692:	e000      	b.n	401696 <udd_ep_in_sent+0x14e>
  401694:	2001      	movs	r0, #1
}
  401696:	b003      	add	sp, #12
  401698:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  40169c:	4770      	bx	lr
  40169e:	bf00      	nop
  4016a0:	20000b88 	.word	0x20000b88
  4016a4:	40084000 	.word	0x40084000

004016a8 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  4016a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4016ac:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4016ae:	4b94      	ldr	r3, [pc, #592]	; (401900 <UDP_Handler+0x258>)
  4016b0:	4798      	blx	r3
  4016b2:	b960      	cbnz	r0, 4016ce <UDP_Handler+0x26>
  4016b4:	4b93      	ldr	r3, [pc, #588]	; (401904 <UDP_Handler+0x25c>)
  4016b6:	69db      	ldr	r3, [r3, #28]
  4016b8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4016bc:	d107      	bne.n	4016ce <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4016be:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4016c0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4016c4:	2200      	movs	r2, #0
  4016c6:	4b90      	ldr	r3, [pc, #576]	; (401908 <UDP_Handler+0x260>)
  4016c8:	701a      	strb	r2, [r3, #0]
		return;
  4016ca:	f000 bd15 	b.w	4020f8 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  4016ce:	2023      	movs	r0, #35	; 0x23
  4016d0:	4b8e      	ldr	r3, [pc, #568]	; (40190c <UDP_Handler+0x264>)
  4016d2:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  4016d4:	4b8b      	ldr	r3, [pc, #556]	; (401904 <UDP_Handler+0x25c>)
  4016d6:	699b      	ldr	r3, [r3, #24]
  4016d8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4016dc:	d00c      	beq.n	4016f8 <UDP_Handler+0x50>
  4016de:	4b89      	ldr	r3, [pc, #548]	; (401904 <UDP_Handler+0x25c>)
  4016e0:	69db      	ldr	r3, [r3, #28]
  4016e2:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4016e6:	d007      	beq.n	4016f8 <UDP_Handler+0x50>
		udd_ack_sof();
  4016e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4016ec:	4b85      	ldr	r3, [pc, #532]	; (401904 <UDP_Handler+0x25c>)
  4016ee:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4016f0:	4b87      	ldr	r3, [pc, #540]	; (401910 <UDP_Handler+0x268>)
  4016f2:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  4016f4:	f000 bd00 	b.w	4020f8 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  4016f8:	4b82      	ldr	r3, [pc, #520]	; (401904 <UDP_Handler+0x25c>)
  4016fa:	69db      	ldr	r3, [r3, #28]
  4016fc:	f013 0f01 	tst.w	r3, #1
  401700:	f000 81f1 	beq.w	401ae6 <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401704:	4b7f      	ldr	r3, [pc, #508]	; (401904 <UDP_Handler+0x25c>)
  401706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401708:	f013 0f04 	tst.w	r3, #4
  40170c:	f000 80c0 	beq.w	401890 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401710:	4b80      	ldr	r3, [pc, #512]	; (401914 <UDP_Handler+0x26c>)
  401712:	781b      	ldrb	r3, [r3, #0]
  401714:	b11b      	cbz	r3, 40171e <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401716:	4b80      	ldr	r3, [pc, #512]	; (401918 <UDP_Handler+0x270>)
  401718:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  40171a:	4b80      	ldr	r3, [pc, #512]	; (40191c <UDP_Handler+0x274>)
  40171c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40171e:	4b79      	ldr	r3, [pc, #484]	; (401904 <UDP_Handler+0x25c>)
  401720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401722:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401726:	2b08      	cmp	r3, #8
  401728:	d01c      	beq.n	401764 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  40172a:	4b76      	ldr	r3, [pc, #472]	; (401904 <UDP_Handler+0x25c>)
  40172c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40172e:	9202      	str	r2, [sp, #8]
  401730:	9a02      	ldr	r2, [sp, #8]
  401732:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401736:	9202      	str	r2, [sp, #8]
  401738:	9a02      	ldr	r2, [sp, #8]
  40173a:	f022 0204 	bic.w	r2, r2, #4
  40173e:	9202      	str	r2, [sp, #8]
  401740:	9a02      	ldr	r2, [sp, #8]
  401742:	631a      	str	r2, [r3, #48]	; 0x30
  401744:	2300      	movs	r3, #0
  401746:	9303      	str	r3, [sp, #12]
  401748:	9b03      	ldr	r3, [sp, #12]
  40174a:	2b13      	cmp	r3, #19
  40174c:	d806      	bhi.n	40175c <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40174e:	bf00      	nop
  401750:	9b03      	ldr	r3, [sp, #12]
  401752:	3301      	adds	r3, #1
  401754:	9303      	str	r3, [sp, #12]
  401756:	9b03      	ldr	r3, [sp, #12]
  401758:	2b13      	cmp	r3, #19
  40175a:	d9f8      	bls.n	40174e <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  40175c:	4b70      	ldr	r3, [pc, #448]	; (401920 <UDP_Handler+0x278>)
  40175e:	4798      	blx	r3
  401760:	f000 bcca 	b.w	4020f8 <UDP_Handler+0xa50>
  401764:	4b6f      	ldr	r3, [pc, #444]	; (401924 <UDP_Handler+0x27c>)
  401766:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  40176a:	4966      	ldr	r1, [pc, #408]	; (401904 <UDP_Handler+0x25c>)
  40176c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40176e:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  401772:	4283      	cmp	r3, r0
  401774:	d1fa      	bne.n	40176c <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401776:	4b6c      	ldr	r3, [pc, #432]	; (401928 <UDP_Handler+0x280>)
  401778:	4798      	blx	r3
  40177a:	b9e0      	cbnz	r0, 4017b6 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  40177c:	4b61      	ldr	r3, [pc, #388]	; (401904 <UDP_Handler+0x25c>)
  40177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401780:	9204      	str	r2, [sp, #16]
  401782:	9a04      	ldr	r2, [sp, #16]
  401784:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401788:	9204      	str	r2, [sp, #16]
  40178a:	9a04      	ldr	r2, [sp, #16]
  40178c:	f022 0204 	bic.w	r2, r2, #4
  401790:	9204      	str	r2, [sp, #16]
  401792:	9a04      	ldr	r2, [sp, #16]
  401794:	631a      	str	r2, [r3, #48]	; 0x30
  401796:	2300      	movs	r3, #0
  401798:	9305      	str	r3, [sp, #20]
  40179a:	9b05      	ldr	r3, [sp, #20]
  40179c:	2b13      	cmp	r3, #19
  40179e:	d806      	bhi.n	4017ae <UDP_Handler+0x106>
  4017a0:	bf00      	nop
  4017a2:	9b05      	ldr	r3, [sp, #20]
  4017a4:	3301      	adds	r3, #1
  4017a6:	9305      	str	r3, [sp, #20]
  4017a8:	9b05      	ldr	r3, [sp, #20]
  4017aa:	2b13      	cmp	r3, #19
  4017ac:	d9f8      	bls.n	4017a0 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  4017ae:	4b5c      	ldr	r3, [pc, #368]	; (401920 <UDP_Handler+0x278>)
  4017b0:	4798      	blx	r3
  4017b2:	f000 bca1 	b.w	4020f8 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  4017b6:	4b5d      	ldr	r3, [pc, #372]	; (40192c <UDP_Handler+0x284>)
  4017b8:	f993 3000 	ldrsb.w	r3, [r3]
  4017bc:	2b00      	cmp	r3, #0
  4017be:	da3d      	bge.n	40183c <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  4017c0:	4b50      	ldr	r3, [pc, #320]	; (401904 <UDP_Handler+0x25c>)
  4017c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017c4:	9206      	str	r2, [sp, #24]
  4017c6:	9a06      	ldr	r2, [sp, #24]
  4017c8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4017cc:	9206      	str	r2, [sp, #24]
  4017ce:	9a06      	ldr	r2, [sp, #24]
  4017d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4017d4:	9206      	str	r2, [sp, #24]
  4017d6:	9a06      	ldr	r2, [sp, #24]
  4017d8:	631a      	str	r2, [r3, #48]	; 0x30
  4017da:	2300      	movs	r3, #0
  4017dc:	9307      	str	r3, [sp, #28]
  4017de:	9b07      	ldr	r3, [sp, #28]
  4017e0:	2b13      	cmp	r3, #19
  4017e2:	d806      	bhi.n	4017f2 <UDP_Handler+0x14a>
  4017e4:	bf00      	nop
  4017e6:	9b07      	ldr	r3, [sp, #28]
  4017e8:	3301      	adds	r3, #1
  4017ea:	9307      	str	r3, [sp, #28]
  4017ec:	9b07      	ldr	r3, [sp, #28]
  4017ee:	2b13      	cmp	r3, #19
  4017f0:	d9f8      	bls.n	4017e4 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  4017f2:	4b44      	ldr	r3, [pc, #272]	; (401904 <UDP_Handler+0x25c>)
  4017f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017f6:	9208      	str	r2, [sp, #32]
  4017f8:	9a08      	ldr	r2, [sp, #32]
  4017fa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4017fe:	9208      	str	r2, [sp, #32]
  401800:	9a08      	ldr	r2, [sp, #32]
  401802:	f022 0204 	bic.w	r2, r2, #4
  401806:	9208      	str	r2, [sp, #32]
  401808:	9a08      	ldr	r2, [sp, #32]
  40180a:	631a      	str	r2, [r3, #48]	; 0x30
  40180c:	2300      	movs	r3, #0
  40180e:	9309      	str	r3, [sp, #36]	; 0x24
  401810:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401812:	2b13      	cmp	r3, #19
  401814:	d806      	bhi.n	401824 <UDP_Handler+0x17c>
  401816:	bf00      	nop
  401818:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40181a:	3301      	adds	r3, #1
  40181c:	9309      	str	r3, [sp, #36]	; 0x24
  40181e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401820:	2b13      	cmp	r3, #19
  401822:	d9f8      	bls.n	401816 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401824:	2300      	movs	r3, #0
  401826:	4a42      	ldr	r2, [pc, #264]	; (401930 <UDP_Handler+0x288>)
  401828:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40182a:	4a42      	ldr	r2, [pc, #264]	; (401934 <UDP_Handler+0x28c>)
  40182c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40182e:	2202      	movs	r2, #2
  401830:	4b38      	ldr	r3, [pc, #224]	; (401914 <UDP_Handler+0x26c>)
  401832:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401834:	4b40      	ldr	r3, [pc, #256]	; (401938 <UDP_Handler+0x290>)
  401836:	4798      	blx	r3
  401838:	f000 bc5e 	b.w	4020f8 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  40183c:	4b31      	ldr	r3, [pc, #196]	; (401904 <UDP_Handler+0x25c>)
  40183e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401840:	920a      	str	r2, [sp, #40]	; 0x28
  401842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401844:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401848:	920a      	str	r2, [sp, #40]	; 0x28
  40184a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40184c:	f022 0204 	bic.w	r2, r2, #4
  401850:	920a      	str	r2, [sp, #40]	; 0x28
  401852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401854:	631a      	str	r2, [r3, #48]	; 0x30
  401856:	2300      	movs	r3, #0
  401858:	930b      	str	r3, [sp, #44]	; 0x2c
  40185a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40185c:	2b13      	cmp	r3, #19
  40185e:	d806      	bhi.n	40186e <UDP_Handler+0x1c6>
  401860:	bf00      	nop
  401862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401864:	3301      	adds	r3, #1
  401866:	930b      	str	r3, [sp, #44]	; 0x2c
  401868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40186a:	2b13      	cmp	r3, #19
  40186c:	d9f8      	bls.n	401860 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40186e:	4b2f      	ldr	r3, [pc, #188]	; (40192c <UDP_Handler+0x284>)
  401870:	88db      	ldrh	r3, [r3, #6]
  401872:	b91b      	cbnz	r3, 40187c <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  401874:	4b31      	ldr	r3, [pc, #196]	; (40193c <UDP_Handler+0x294>)
  401876:	4798      	blx	r3
  401878:	f000 bc3e 	b.w	4020f8 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  40187c:	2300      	movs	r3, #0
  40187e:	4a2c      	ldr	r2, [pc, #176]	; (401930 <UDP_Handler+0x288>)
  401880:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401882:	4a2c      	ldr	r2, [pc, #176]	; (401934 <UDP_Handler+0x28c>)
  401884:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401886:	2201      	movs	r2, #1
  401888:	4b22      	ldr	r3, [pc, #136]	; (401914 <UDP_Handler+0x26c>)
  40188a:	701a      	strb	r2, [r3, #0]
  40188c:	f000 bc34 	b.w	4020f8 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401890:	4b1c      	ldr	r3, [pc, #112]	; (401904 <UDP_Handler+0x25c>)
  401892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401894:	f013 0f01 	tst.w	r3, #1
  401898:	d003      	beq.n	4018a2 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  40189a:	4b27      	ldr	r3, [pc, #156]	; (401938 <UDP_Handler+0x290>)
  40189c:	4798      	blx	r3
  40189e:	f000 bc2b 	b.w	4020f8 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  4018a2:	4b18      	ldr	r3, [pc, #96]	; (401904 <UDP_Handler+0x25c>)
  4018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4018a6:	f013 0f02 	tst.w	r3, #2
  4018aa:	f000 8117 	beq.w	401adc <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  4018ae:	4b19      	ldr	r3, [pc, #100]	; (401914 <UDP_Handler+0x26c>)
  4018b0:	781b      	ldrb	r3, [r3, #0]
  4018b2:	2b01      	cmp	r3, #1
  4018b4:	d044      	beq.n	401940 <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  4018b6:	2b02      	cmp	r3, #2
  4018b8:	d001      	beq.n	4018be <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  4018ba:	2b04      	cmp	r3, #4
  4018bc:	d102      	bne.n	4018c4 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  4018be:	4b16      	ldr	r3, [pc, #88]	; (401918 <UDP_Handler+0x270>)
  4018c0:	4798      	blx	r3
  4018c2:	e001      	b.n	4018c8 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  4018c4:	4b16      	ldr	r3, [pc, #88]	; (401920 <UDP_Handler+0x278>)
  4018c6:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  4018c8:	4b0e      	ldr	r3, [pc, #56]	; (401904 <UDP_Handler+0x25c>)
  4018ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018cc:	920c      	str	r2, [sp, #48]	; 0x30
  4018ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4018d0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4018d4:	920c      	str	r2, [sp, #48]	; 0x30
  4018d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4018d8:	f022 0202 	bic.w	r2, r2, #2
  4018dc:	920c      	str	r2, [sp, #48]	; 0x30
  4018de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4018e0:	631a      	str	r2, [r3, #48]	; 0x30
  4018e2:	2300      	movs	r3, #0
  4018e4:	930d      	str	r3, [sp, #52]	; 0x34
  4018e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4018e8:	2b13      	cmp	r3, #19
  4018ea:	d806      	bhi.n	4018fa <UDP_Handler+0x252>
  4018ec:	bf00      	nop
  4018ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4018f0:	3301      	adds	r3, #1
  4018f2:	930d      	str	r3, [sp, #52]	; 0x34
  4018f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4018f6:	2b13      	cmp	r3, #19
  4018f8:	d9f8      	bls.n	4018ec <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4018fa:	4b08      	ldr	r3, [pc, #32]	; (40191c <UDP_Handler+0x274>)
  4018fc:	4798      	blx	r3
  4018fe:	e3fb      	b.n	4020f8 <UDP_Handler+0xa50>
  401900:	00402e8d 	.word	0x00402e8d
  401904:	40084000 	.word	0x40084000
  401908:	200000e8 	.word	0x200000e8
  40190c:	00402dad 	.word	0x00402dad
  401910:	004009c9 	.word	0x004009c9
  401914:	20000bc8 	.word	0x20000bc8
  401918:	0040122d 	.word	0x0040122d
  40191c:	00401185 	.word	0x00401185
  401920:	0040119d 	.word	0x0040119d
  401924:	20000c13 	.word	0x20000c13
  401928:	00400a05 	.word	0x00400a05
  40192c:	20000c14 	.word	0x20000c14
  401930:	20000b84 	.word	0x20000b84
  401934:	20000bc6 	.word	0x20000bc6
  401938:	0040123d 	.word	0x0040123d
  40193c:	004011e5 	.word	0x004011e5
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401940:	4b90      	ldr	r3, [pc, #576]	; (401b84 <UDP_Handler+0x4dc>)
  401942:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401944:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401948:	4b8f      	ldr	r3, [pc, #572]	; (401b88 <UDP_Handler+0x4e0>)
  40194a:	899b      	ldrh	r3, [r3, #12]
  40194c:	4a8f      	ldr	r2, [pc, #572]	; (401b8c <UDP_Handler+0x4e4>)
  40194e:	8815      	ldrh	r5, [r2, #0]
  401950:	186a      	adds	r2, r5, r1
  401952:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401954:	bfae      	itee	ge
  401956:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  401958:	ebc5 0303 	rsblt	r3, r5, r3
  40195c:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40195e:	4b8a      	ldr	r3, [pc, #552]	; (401b88 <UDP_Handler+0x4e0>)
  401960:	6898      	ldr	r0, [r3, #8]
  401962:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401964:	b1a9      	cbz	r1, 401992 <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401966:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401968:	4c86      	ldr	r4, [pc, #536]	; (401b84 <UDP_Handler+0x4dc>)
  40196a:	6d22      	ldr	r2, [r4, #80]	; 0x50
  40196c:	f803 2b01 	strb.w	r2, [r3], #1
  401970:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401972:	b2d2      	uxtb	r2, r2
  401974:	428a      	cmp	r2, r1
  401976:	d3f8      	bcc.n	40196a <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401978:	440d      	add	r5, r1
  40197a:	b2ad      	uxth	r5, r5
  40197c:	4b83      	ldr	r3, [pc, #524]	; (401b8c <UDP_Handler+0x4e4>)
  40197e:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401980:	2940      	cmp	r1, #64	; 0x40
  401982:	d106      	bne.n	401992 <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  401984:	4b80      	ldr	r3, [pc, #512]	; (401b88 <UDP_Handler+0x4e0>)
  401986:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401988:	4b81      	ldr	r3, [pc, #516]	; (401b90 <UDP_Handler+0x4e8>)
  40198a:	881b      	ldrh	r3, [r3, #0]
  40198c:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  40198e:	429a      	cmp	r2, r3
  401990:	dc3e      	bgt.n	401a10 <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401992:	4b7d      	ldr	r3, [pc, #500]	; (401b88 <UDP_Handler+0x4e0>)
  401994:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401996:	695b      	ldr	r3, [r3, #20]
  401998:	b1f3      	cbz	r3, 4019d8 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  40199a:	4798      	blx	r3
  40199c:	b9e0      	cbnz	r0, 4019d8 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  40199e:	4b7d      	ldr	r3, [pc, #500]	; (401b94 <UDP_Handler+0x4ec>)
  4019a0:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  4019a2:	4b78      	ldr	r3, [pc, #480]	; (401b84 <UDP_Handler+0x4dc>)
  4019a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019a6:	920e      	str	r2, [sp, #56]	; 0x38
  4019a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4019aa:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019ae:	920e      	str	r2, [sp, #56]	; 0x38
  4019b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4019b2:	f022 0202 	bic.w	r2, r2, #2
  4019b6:	920e      	str	r2, [sp, #56]	; 0x38
  4019b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4019ba:	631a      	str	r2, [r3, #48]	; 0x30
  4019bc:	2300      	movs	r3, #0
  4019be:	930f      	str	r3, [sp, #60]	; 0x3c
  4019c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4019c2:	2b13      	cmp	r3, #19
  4019c4:	f200 8398 	bhi.w	4020f8 <UDP_Handler+0xa50>
  4019c8:	bf00      	nop
  4019ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4019cc:	3301      	adds	r3, #1
  4019ce:	930f      	str	r3, [sp, #60]	; 0x3c
  4019d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4019d2:	2b13      	cmp	r3, #19
  4019d4:	d9f8      	bls.n	4019c8 <UDP_Handler+0x320>
  4019d6:	e38f      	b.n	4020f8 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4019d8:	4b6a      	ldr	r3, [pc, #424]	; (401b84 <UDP_Handler+0x4dc>)
  4019da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019dc:	9210      	str	r2, [sp, #64]	; 0x40
  4019de:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4019e0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019e4:	9210      	str	r2, [sp, #64]	; 0x40
  4019e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4019e8:	f022 0202 	bic.w	r2, r2, #2
  4019ec:	9210      	str	r2, [sp, #64]	; 0x40
  4019ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4019f0:	631a      	str	r2, [r3, #48]	; 0x30
  4019f2:	2300      	movs	r3, #0
  4019f4:	9311      	str	r3, [sp, #68]	; 0x44
  4019f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4019f8:	2b13      	cmp	r3, #19
  4019fa:	d806      	bhi.n	401a0a <UDP_Handler+0x362>
  4019fc:	bf00      	nop
  4019fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401a00:	3301      	adds	r3, #1
  401a02:	9311      	str	r3, [sp, #68]	; 0x44
  401a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401a06:	2b13      	cmp	r3, #19
  401a08:	d9f8      	bls.n	4019fc <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  401a0a:	4b63      	ldr	r3, [pc, #396]	; (401b98 <UDP_Handler+0x4f0>)
  401a0c:	4798      	blx	r3
  401a0e:	e373      	b.n	4020f8 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401a10:	4b5d      	ldr	r3, [pc, #372]	; (401b88 <UDP_Handler+0x4e0>)
  401a12:	899b      	ldrh	r3, [r3, #12]
  401a14:	42ab      	cmp	r3, r5
  401a16:	d146      	bne.n	401aa6 <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  401a18:	4b5b      	ldr	r3, [pc, #364]	; (401b88 <UDP_Handler+0x4e0>)
  401a1a:	695b      	ldr	r3, [r3, #20]
  401a1c:	b9e3      	cbnz	r3, 401a58 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  401a1e:	4b5d      	ldr	r3, [pc, #372]	; (401b94 <UDP_Handler+0x4ec>)
  401a20:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401a22:	4b58      	ldr	r3, [pc, #352]	; (401b84 <UDP_Handler+0x4dc>)
  401a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a26:	9212      	str	r2, [sp, #72]	; 0x48
  401a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401a2a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a2e:	9212      	str	r2, [sp, #72]	; 0x48
  401a30:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401a32:	f022 0202 	bic.w	r2, r2, #2
  401a36:	9212      	str	r2, [sp, #72]	; 0x48
  401a38:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401a3a:	631a      	str	r2, [r3, #48]	; 0x30
  401a3c:	2300      	movs	r3, #0
  401a3e:	9313      	str	r3, [sp, #76]	; 0x4c
  401a40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401a42:	2b13      	cmp	r3, #19
  401a44:	f200 8358 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401a48:	bf00      	nop
  401a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401a4c:	3301      	adds	r3, #1
  401a4e:	9313      	str	r3, [sp, #76]	; 0x4c
  401a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401a52:	2b13      	cmp	r3, #19
  401a54:	d9f8      	bls.n	401a48 <UDP_Handler+0x3a0>
  401a56:	e34f      	b.n	4020f8 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  401a58:	4798      	blx	r3
  401a5a:	b9e0      	cbnz	r0, 401a96 <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  401a5c:	4b4d      	ldr	r3, [pc, #308]	; (401b94 <UDP_Handler+0x4ec>)
  401a5e:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401a60:	4b48      	ldr	r3, [pc, #288]	; (401b84 <UDP_Handler+0x4dc>)
  401a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a64:	9214      	str	r2, [sp, #80]	; 0x50
  401a66:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401a68:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a6c:	9214      	str	r2, [sp, #80]	; 0x50
  401a6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401a70:	f022 0202 	bic.w	r2, r2, #2
  401a74:	9214      	str	r2, [sp, #80]	; 0x50
  401a76:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401a78:	631a      	str	r2, [r3, #48]	; 0x30
  401a7a:	2300      	movs	r3, #0
  401a7c:	9315      	str	r3, [sp, #84]	; 0x54
  401a7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a80:	2b13      	cmp	r3, #19
  401a82:	f200 8339 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401a86:	bf00      	nop
  401a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a8a:	3301      	adds	r3, #1
  401a8c:	9315      	str	r3, [sp, #84]	; 0x54
  401a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401a90:	2b13      	cmp	r3, #19
  401a92:	d9f8      	bls.n	401a86 <UDP_Handler+0x3de>
  401a94:	e330      	b.n	4020f8 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401a96:	4a3e      	ldr	r2, [pc, #248]	; (401b90 <UDP_Handler+0x4e8>)
  401a98:	4b3c      	ldr	r3, [pc, #240]	; (401b8c <UDP_Handler+0x4e4>)
  401a9a:	8818      	ldrh	r0, [r3, #0]
  401a9c:	8811      	ldrh	r1, [r2, #0]
  401a9e:	4401      	add	r1, r0
  401aa0:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  401aa2:	2200      	movs	r2, #0
  401aa4:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  401aa6:	4b37      	ldr	r3, [pc, #220]	; (401b84 <UDP_Handler+0x4dc>)
  401aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401aaa:	9216      	str	r2, [sp, #88]	; 0x58
  401aac:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401aae:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ab2:	9216      	str	r2, [sp, #88]	; 0x58
  401ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401ab6:	f022 0202 	bic.w	r2, r2, #2
  401aba:	9216      	str	r2, [sp, #88]	; 0x58
  401abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401abe:	631a      	str	r2, [r3, #48]	; 0x30
  401ac0:	2300      	movs	r3, #0
  401ac2:	9317      	str	r3, [sp, #92]	; 0x5c
  401ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401ac6:	2b13      	cmp	r3, #19
  401ac8:	f200 8316 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401acc:	bf00      	nop
  401ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401ad0:	3301      	adds	r3, #1
  401ad2:	9317      	str	r3, [sp, #92]	; 0x5c
  401ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401ad6:	2b13      	cmp	r3, #19
  401ad8:	d9f8      	bls.n	401acc <UDP_Handler+0x424>
  401ada:	e30d      	b.n	4020f8 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  401adc:	4b29      	ldr	r3, [pc, #164]	; (401b84 <UDP_Handler+0x4dc>)
  401ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ae0:	f013 0f08 	tst.w	r3, #8
  401ae4:	d106      	bne.n	401af4 <UDP_Handler+0x44c>
  401ae6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 401b9c <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401aea:	4664      	mov	r4, ip
  401aec:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401aee:	4a25      	ldr	r2, [pc, #148]	; (401b84 <UDP_Handler+0x4dc>)
  401af0:	461e      	mov	r6, r3
  401af2:	e01a      	b.n	401b2a <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  401af4:	4b23      	ldr	r3, [pc, #140]	; (401b84 <UDP_Handler+0x4dc>)
  401af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401af8:	9200      	str	r2, [sp, #0]
  401afa:	9a00      	ldr	r2, [sp, #0]
  401afc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b00:	9200      	str	r2, [sp, #0]
  401b02:	9a00      	ldr	r2, [sp, #0]
  401b04:	f022 0208 	bic.w	r2, r2, #8
  401b08:	9200      	str	r2, [sp, #0]
  401b0a:	9a00      	ldr	r2, [sp, #0]
  401b0c:	631a      	str	r2, [r3, #48]	; 0x30
  401b0e:	2300      	movs	r3, #0
  401b10:	9301      	str	r3, [sp, #4]
  401b12:	9b01      	ldr	r3, [sp, #4]
  401b14:	2b13      	cmp	r3, #19
  401b16:	f200 82ef 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401b1a:	bf00      	nop
  401b1c:	9b01      	ldr	r3, [sp, #4]
  401b1e:	3301      	adds	r3, #1
  401b20:	9301      	str	r3, [sp, #4]
  401b22:	9b01      	ldr	r3, [sp, #4]
  401b24:	2b13      	cmp	r3, #19
  401b26:	d9f8      	bls.n	401b1a <UDP_Handler+0x472>
  401b28:	e2e6      	b.n	4020f8 <UDP_Handler+0xa50>
  401b2a:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401b2e:	6991      	ldr	r1, [r2, #24]
  401b30:	461f      	mov	r7, r3
  401b32:	fa06 f503 	lsl.w	r5, r6, r3
  401b36:	420d      	tst	r5, r1
  401b38:	f000 81f1 	beq.w	401f1e <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  401b3c:	46a1      	mov	r9, r4
  401b3e:	0099      	lsls	r1, r3, #2
  401b40:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401b44:	f501 2100 	add.w	r1, r1, #524288	; 0x80000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  401b48:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401b4a:	f010 0f42 	tst.w	r0, #66	; 0x42
  401b4e:	d044      	beq.n	401bda <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401b50:	68a2      	ldr	r2, [r4, #8]
  401b52:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  401b54:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  401b58:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401b5c:	6860      	ldr	r0, [r4, #4]
  401b5e:	4418      	add	r0, r3
  401b60:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  401b62:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  401b64:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  401b68:	2e00      	cmp	r6, #0
  401b6a:	f000 82b6 	beq.w	4020da <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401b6e:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  401b70:	42b1      	cmp	r1, r6
  401b72:	f200 82a9 	bhi.w	4020c8 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  401b76:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401b7a:	2900      	cmp	r1, #0
  401b7c:	f040 82aa 	bne.w	4020d4 <UDP_Handler+0xa2c>
  401b80:	e2b6      	b.n	4020f0 <UDP_Handler+0xa48>
  401b82:	bf00      	nop
  401b84:	40084000 	.word	0x40084000
  401b88:	20000c14 	.word	0x20000c14
  401b8c:	20000bc6 	.word	0x20000bc6
  401b90:	20000b84 	.word	0x20000b84
  401b94:	0040119d 	.word	0x0040119d
  401b98:	004011e5 	.word	0x004011e5
  401b9c:	20000b88 	.word	0x20000b88
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401ba0:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401ba2:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401ba4:	3301      	adds	r3, #1
  401ba6:	428b      	cmp	r3, r1
  401ba8:	d3fa      	bcc.n	401ba0 <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401baa:	4640      	mov	r0, r8
  401bac:	4b95      	ldr	r3, [pc, #596]	; (401e04 <UDP_Handler+0x75c>)
  401bae:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401bb0:	b917      	cbnz	r7, 401bb8 <UDP_Handler+0x510>
  401bb2:	45b2      	cmp	sl, r6
  401bb4:	f240 82a0 	bls.w	4020f8 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  401bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401bba:	f013 0f20 	tst.w	r3, #32
  401bbe:	f040 829b 	bne.w	4020f8 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  401bc2:	4b91      	ldr	r3, [pc, #580]	; (401e08 <UDP_Handler+0x760>)
  401bc4:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401bc6:	f8d9 300c 	ldr.w	r3, [r9, #12]
  401bca:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401bce:	4648      	mov	r0, r9
  401bd0:	2100      	movs	r1, #0
  401bd2:	4642      	mov	r2, r8
  401bd4:	4b8d      	ldr	r3, [pc, #564]	; (401e0c <UDP_Handler+0x764>)
  401bd6:	4798      	blx	r3
  401bd8:	e28e      	b.n	4020f8 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  401bda:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401bdc:	f010 0f01 	tst.w	r0, #1
  401be0:	f000 8173 	beq.w	401eca <UDP_Handler+0x822>

			ptr_job->bank--;
  401be4:	7c63      	ldrb	r3, [r4, #17]
  401be6:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401bea:	3203      	adds	r2, #3
  401bec:	f002 0203 	and.w	r2, r2, #3
  401bf0:	f362 0383 	bfi	r3, r2, #2, #2
  401bf4:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401bf6:	f013 0f20 	tst.w	r3, #32
  401bfa:	d074      	beq.n	401ce6 <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  401bfc:	2a00      	cmp	r2, #0
  401bfe:	d036      	beq.n	401c6e <UDP_Handler+0x5c6>
  401c00:	00ba      	lsls	r2, r7, #2
  401c02:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401c06:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
					// Send remaining
					udd_set_transmit_ready(ep);
  401c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c0c:	9318      	str	r3, [sp, #96]	; 0x60
  401c0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401c10:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c14:	9318      	str	r3, [sp, #96]	; 0x60
  401c16:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401c18:	f043 0310 	orr.w	r3, r3, #16
  401c1c:	9318      	str	r3, [sp, #96]	; 0x60
  401c1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401c20:	6313      	str	r3, [r2, #48]	; 0x30
  401c22:	2300      	movs	r3, #0
  401c24:	9319      	str	r3, [sp, #100]	; 0x64
  401c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c28:	2b13      	cmp	r3, #19
  401c2a:	d806      	bhi.n	401c3a <UDP_Handler+0x592>
  401c2c:	bf00      	nop
  401c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c30:	3301      	adds	r3, #1
  401c32:	9319      	str	r3, [sp, #100]	; 0x64
  401c34:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401c36:	2b13      	cmp	r3, #19
  401c38:	d9f8      	bls.n	401c2c <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  401c3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c3c:	931a      	str	r3, [sp, #104]	; 0x68
  401c3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401c40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c44:	931a      	str	r3, [sp, #104]	; 0x68
  401c46:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401c48:	f023 0301 	bic.w	r3, r3, #1
  401c4c:	931a      	str	r3, [sp, #104]	; 0x68
  401c4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401c50:	6313      	str	r3, [r2, #48]	; 0x30
  401c52:	2300      	movs	r3, #0
  401c54:	931b      	str	r3, [sp, #108]	; 0x6c
  401c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401c58:	2b13      	cmp	r3, #19
  401c5a:	f200 824d 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401c5e:	bf00      	nop
  401c60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401c62:	3301      	adds	r3, #1
  401c64:	931b      	str	r3, [sp, #108]	; 0x6c
  401c66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401c68:	2b13      	cmp	r3, #19
  401c6a:	d9f8      	bls.n	401c5e <UDP_Handler+0x5b6>
  401c6c:	e244      	b.n	4020f8 <UDP_Handler+0xa50>
  401c6e:	00ba      	lsls	r2, r7, #2
  401c70:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401c74:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401c78:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401c7a:	931c      	str	r3, [sp, #112]	; 0x70
  401c7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401c7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c82:	931c      	str	r3, [sp, #112]	; 0x70
  401c84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401c86:	f023 0301 	bic.w	r3, r3, #1
  401c8a:	931c      	str	r3, [sp, #112]	; 0x70
  401c8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401c8e:	6313      	str	r3, [r2, #48]	; 0x30
  401c90:	2300      	movs	r3, #0
  401c92:	931d      	str	r3, [sp, #116]	; 0x74
  401c94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401c96:	2b13      	cmp	r3, #19
  401c98:	d806      	bhi.n	401ca8 <UDP_Handler+0x600>
  401c9a:	bf00      	nop
  401c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401c9e:	3301      	adds	r3, #1
  401ca0:	931d      	str	r3, [sp, #116]	; 0x74
  401ca2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401ca4:	2b13      	cmp	r3, #19
  401ca6:	d9f8      	bls.n	401c9a <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401ca8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401caa:	931e      	str	r3, [sp, #120]	; 0x78
  401cac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401cae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401cb2:	931e      	str	r3, [sp, #120]	; 0x78
  401cb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401cb6:	f043 0320 	orr.w	r3, r3, #32
  401cba:	931e      	str	r3, [sp, #120]	; 0x78
  401cbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401cbe:	6313      	str	r3, [r2, #48]	; 0x30
  401cc0:	2300      	movs	r3, #0
  401cc2:	931f      	str	r3, [sp, #124]	; 0x7c
  401cc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401cc6:	2b13      	cmp	r3, #19
  401cc8:	d806      	bhi.n	401cd8 <UDP_Handler+0x630>
  401cca:	bf00      	nop
  401ccc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401cce:	3301      	adds	r3, #1
  401cd0:	931f      	str	r3, [sp, #124]	; 0x7c
  401cd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401cd4:	2b13      	cmp	r3, #19
  401cd6:	d9f8      	bls.n	401cca <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401cd8:	f899 3011 	ldrb.w	r3, [r9, #17]
  401cdc:	f36f 1345 	bfc	r3, #5, #1
  401ce0:	f889 3011 	strb.w	r3, [r9, #17]
  401ce4:	e208      	b.n	4020f8 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401ce6:	7c63      	ldrb	r3, [r4, #17]
  401ce8:	09db      	lsrs	r3, r3, #7
  401cea:	d00a      	beq.n	401d02 <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  401cec:	7c63      	ldrb	r3, [r4, #17]
  401cee:	f36f 13c7 	bfc	r3, #7, #1
  401cf2:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401cf4:	68e3      	ldr	r3, [r4, #12]
  401cf6:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401cf8:	4620      	mov	r0, r4
  401cfa:	2100      	movs	r1, #0
  401cfc:	4642      	mov	r2, r8
  401cfe:	4b43      	ldr	r3, [pc, #268]	; (401e0c <UDP_Handler+0x764>)
  401d00:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401d02:	f8d9 200c 	ldr.w	r2, [r9, #12]
  401d06:	f8d9 3008 	ldr.w	r3, [r9, #8]
  401d0a:	429a      	cmp	r2, r3
  401d0c:	d334      	bcc.n	401d78 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  401d0e:	f899 3011 	ldrb.w	r3, [r9, #17]
  401d12:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401d16:	d12f      	bne.n	401d78 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401d18:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401d1c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401d1e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401d22:	2100      	movs	r1, #0
  401d24:	4a3a      	ldr	r2, [pc, #232]	; (401e10 <UDP_Handler+0x768>)
  401d26:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401d28:	4a37      	ldr	r2, [pc, #220]	; (401e08 <UDP_Handler+0x760>)
  401d2a:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401d2c:	b92b      	cbnz	r3, 401d3a <UDP_Handler+0x692>
		cpu_irq_enable();
  401d2e:	2201      	movs	r2, #1
  401d30:	4b37      	ldr	r3, [pc, #220]	; (401e10 <UDP_Handler+0x768>)
  401d32:	701a      	strb	r2, [r3, #0]
  401d34:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401d38:	b662      	cpsie	i
  401d3a:	00bb      	lsls	r3, r7, #2
  401d3c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401d40:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d46:	9220      	str	r2, [sp, #128]	; 0x80
  401d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401d4a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d4e:	9220      	str	r2, [sp, #128]	; 0x80
  401d50:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401d52:	f022 0201 	bic.w	r2, r2, #1
  401d56:	9220      	str	r2, [sp, #128]	; 0x80
  401d58:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401d5a:	631a      	str	r2, [r3, #48]	; 0x30
  401d5c:	2300      	movs	r3, #0
  401d5e:	9321      	str	r3, [sp, #132]	; 0x84
  401d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401d62:	2b13      	cmp	r3, #19
  401d64:	f200 81c8 	bhi.w	4020f8 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401d68:	bf00      	nop
  401d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401d6c:	3301      	adds	r3, #1
  401d6e:	9321      	str	r3, [sp, #132]	; 0x84
  401d70:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401d72:	2b13      	cmp	r3, #19
  401d74:	d9f8      	bls.n	401d68 <UDP_Handler+0x6c0>
  401d76:	e1bf      	b.n	4020f8 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401d78:	f1b8 0f00 	cmp.w	r8, #0
  401d7c:	f000 8082 	beq.w	401e84 <UDP_Handler+0x7dc>
  401d80:	f1b8 0f03 	cmp.w	r8, #3
  401d84:	d07e      	beq.n	401e84 <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  401d86:	f899 3011 	ldrb.w	r3, [r9, #17]
  401d8a:	f013 0f0c 	tst.w	r3, #12
  401d8e:	d043      	beq.n	401e18 <UDP_Handler+0x770>
  401d90:	00ba      	lsls	r2, r7, #2
  401d92:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401d96:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  401d9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d9c:	9322      	str	r3, [sp, #136]	; 0x88
  401d9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401da0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401da4:	9322      	str	r3, [sp, #136]	; 0x88
  401da6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401da8:	f043 0310 	orr.w	r3, r3, #16
  401dac:	9322      	str	r3, [sp, #136]	; 0x88
  401dae:	9b22      	ldr	r3, [sp, #136]	; 0x88
  401db0:	6313      	str	r3, [r2, #48]	; 0x30
  401db2:	2300      	movs	r3, #0
  401db4:	9323      	str	r3, [sp, #140]	; 0x8c
  401db6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401db8:	2b13      	cmp	r3, #19
  401dba:	d806      	bhi.n	401dca <UDP_Handler+0x722>
  401dbc:	bf00      	nop
  401dbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401dc0:	3301      	adds	r3, #1
  401dc2:	9323      	str	r3, [sp, #140]	; 0x8c
  401dc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  401dc6:	2b13      	cmp	r3, #19
  401dc8:	d9f8      	bls.n	401dbc <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  401dca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401dcc:	9324      	str	r3, [sp, #144]	; 0x90
  401dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401dd0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401dd4:	9324      	str	r3, [sp, #144]	; 0x90
  401dd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401dd8:	f023 0301 	bic.w	r3, r3, #1
  401ddc:	9324      	str	r3, [sp, #144]	; 0x90
  401dde:	9b24      	ldr	r3, [sp, #144]	; 0x90
  401de0:	6313      	str	r3, [r2, #48]	; 0x30
  401de2:	2300      	movs	r3, #0
  401de4:	9325      	str	r3, [sp, #148]	; 0x94
  401de6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401de8:	2b13      	cmp	r3, #19
  401dea:	d806      	bhi.n	401dfa <UDP_Handler+0x752>
  401dec:	bf00      	nop
  401dee:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401df0:	3301      	adds	r3, #1
  401df2:	9325      	str	r3, [sp, #148]	; 0x94
  401df4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  401df6:	2b13      	cmp	r3, #19
  401df8:	d9f8      	bls.n	401dec <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  401dfa:	4640      	mov	r0, r8
  401dfc:	2100      	movs	r1, #0
  401dfe:	4b05      	ldr	r3, [pc, #20]	; (401e14 <UDP_Handler+0x76c>)
  401e00:	4798      	blx	r3
  401e02:	e179      	b.n	4020f8 <UDP_Handler+0xa50>
  401e04:	0040147d 	.word	0x0040147d
  401e08:	40084000 	.word	0x40084000
  401e0c:	0040143d 	.word	0x0040143d
  401e10:	200000e8 	.word	0x200000e8
  401e14:	00401549 	.word	0x00401549
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  401e18:	4640      	mov	r0, r8
  401e1a:	2101      	movs	r1, #1
  401e1c:	4b67      	ldr	r3, [pc, #412]	; (401fbc <UDP_Handler+0x914>)
  401e1e:	4798      	blx	r3
  401e20:	b970      	cbnz	r0, 401e40 <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  401e22:	f899 3011 	ldrb.w	r3, [r9, #17]
  401e26:	f36f 13c7 	bfc	r3, #7, #1
  401e2a:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401e2e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  401e32:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401e36:	4648      	mov	r0, r9
  401e38:	2100      	movs	r1, #0
  401e3a:	4642      	mov	r2, r8
  401e3c:	4b60      	ldr	r3, [pc, #384]	; (401fc0 <UDP_Handler+0x918>)
  401e3e:	4798      	blx	r3
  401e40:	00bb      	lsls	r3, r7, #2
  401e42:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401e46:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				}
				udd_ack_in_sent(ep);
  401e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e4c:	9226      	str	r2, [sp, #152]	; 0x98
  401e4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401e50:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401e54:	9226      	str	r2, [sp, #152]	; 0x98
  401e56:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401e58:	f022 0201 	bic.w	r2, r2, #1
  401e5c:	9226      	str	r2, [sp, #152]	; 0x98
  401e5e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  401e60:	631a      	str	r2, [r3, #48]	; 0x30
  401e62:	2300      	movs	r3, #0
  401e64:	9327      	str	r3, [sp, #156]	; 0x9c
  401e66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401e68:	2b13      	cmp	r3, #19
  401e6a:	d806      	bhi.n	401e7a <UDP_Handler+0x7d2>
  401e6c:	bf00      	nop
  401e6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401e70:	3301      	adds	r3, #1
  401e72:	9327      	str	r3, [sp, #156]	; 0x9c
  401e74:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  401e76:	2b13      	cmp	r3, #19
  401e78:	d9f8      	bls.n	401e6c <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  401e7a:	4640      	mov	r0, r8
  401e7c:	2100      	movs	r1, #0
  401e7e:	4b4f      	ldr	r3, [pc, #316]	; (401fbc <UDP_Handler+0x914>)
  401e80:	4798      	blx	r3
  401e82:	e139      	b.n	4020f8 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  401e84:	4640      	mov	r0, r8
  401e86:	2101      	movs	r1, #1
  401e88:	4b4c      	ldr	r3, [pc, #304]	; (401fbc <UDP_Handler+0x914>)
  401e8a:	4798      	blx	r3
  401e8c:	00bb      	lsls	r3, r7, #2
  401e8e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401e92:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
				udd_ack_in_sent(ep);
  401e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e98:	9228      	str	r2, [sp, #160]	; 0xa0
  401e9a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401e9c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ea0:	9228      	str	r2, [sp, #160]	; 0xa0
  401ea2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401ea4:	f022 0201 	bic.w	r2, r2, #1
  401ea8:	9228      	str	r2, [sp, #160]	; 0xa0
  401eaa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  401eac:	631a      	str	r2, [r3, #48]	; 0x30
  401eae:	2300      	movs	r3, #0
  401eb0:	9329      	str	r3, [sp, #164]	; 0xa4
  401eb2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  401eb4:	2b13      	cmp	r3, #19
  401eb6:	f200 811f 	bhi.w	4020f8 <UDP_Handler+0xa50>
  401eba:	bf00      	nop
  401ebc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  401ebe:	3301      	adds	r3, #1
  401ec0:	9329      	str	r3, [sp, #164]	; 0xa4
  401ec2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  401ec4:	2b13      	cmp	r3, #19
  401ec6:	d9f8      	bls.n	401eba <UDP_Handler+0x812>
  401ec8:	e116      	b.n	4020f8 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  401eca:	6b09      	ldr	r1, [r1, #48]	; 0x30
  401ecc:	f011 0f08 	tst.w	r1, #8
  401ed0:	d025      	beq.n	401f1e <UDP_Handler+0x876>
  401ed2:	009a      	lsls	r2, r3, #2
  401ed4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401ed8:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
			udd_ack_stall(ep);
  401edc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ede:	932a      	str	r3, [sp, #168]	; 0xa8
  401ee0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  401ee2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ee6:	932a      	str	r3, [sp, #168]	; 0xa8
  401ee8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  401eea:	f023 0308 	bic.w	r3, r3, #8
  401eee:	932a      	str	r3, [sp, #168]	; 0xa8
  401ef0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  401ef2:	6313      	str	r3, [r2, #48]	; 0x30
  401ef4:	2300      	movs	r3, #0
  401ef6:	932b      	str	r3, [sp, #172]	; 0xac
  401ef8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  401efa:	2b13      	cmp	r3, #19
  401efc:	d806      	bhi.n	401f0c <UDP_Handler+0x864>
  401efe:	bf00      	nop
  401f00:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  401f02:	3301      	adds	r3, #1
  401f04:	932b      	str	r3, [sp, #172]	; 0xac
  401f06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  401f08:	2b13      	cmp	r3, #19
  401f0a:	d9f8      	bls.n	401efe <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  401f0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  401f16:	f000 80ef 	beq.w	4020f8 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  401f1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f1c:	e0ec      	b.n	4020f8 <UDP_Handler+0xa50>
  401f1e:	3301      	adds	r3, #1
  401f20:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  401f22:	2b04      	cmp	r3, #4
  401f24:	f47f ae01 	bne.w	401b2a <UDP_Handler+0x482>
  401f28:	e0db      	b.n	4020e2 <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401f2a:	4b26      	ldr	r3, [pc, #152]	; (401fc4 <UDP_Handler+0x91c>)
  401f2c:	69db      	ldr	r3, [r3, #28]
  401f2e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  401f32:	d113      	bne.n	401f5c <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f34:	4b23      	ldr	r3, [pc, #140]	; (401fc4 <UDP_Handler+0x91c>)
  401f36:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  401f38:	f413 7f00 	tst.w	r3, #512	; 0x200
  401f3c:	d004      	beq.n	401f48 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f3e:	4b21      	ldr	r3, [pc, #132]	; (401fc4 <UDP_Handler+0x91c>)
  401f40:	69db      	ldr	r3, [r3, #28]
  401f42:	f413 7f00 	tst.w	r3, #512	; 0x200
  401f46:	d109      	bne.n	401f5c <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401f48:	4b1e      	ldr	r3, [pc, #120]	; (401fc4 <UDP_Handler+0x91c>)
  401f4a:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  401f4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401f50:	d014      	beq.n	401f7c <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  401f52:	4b1c      	ldr	r3, [pc, #112]	; (401fc4 <UDP_Handler+0x91c>)
  401f54:	69db      	ldr	r3, [r3, #28]
  401f56:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401f5a:	d00f      	beq.n	401f7c <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  401f5c:	4c19      	ldr	r4, [pc, #100]	; (401fc4 <UDP_Handler+0x91c>)
  401f5e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  401f62:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  401f64:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  401f66:	2001      	movs	r0, #1
  401f68:	4b17      	ldr	r3, [pc, #92]	; (401fc8 <UDP_Handler+0x920>)
  401f6a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  401f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
  401f70:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  401f72:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  401f74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401f78:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  401f7a:	e0bd      	b.n	4020f8 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  401f7c:	4b11      	ldr	r3, [pc, #68]	; (401fc4 <UDP_Handler+0x91c>)
  401f7e:	699b      	ldr	r3, [r3, #24]
  401f80:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f84:	d024      	beq.n	401fd0 <UDP_Handler+0x928>
  401f86:	4b0f      	ldr	r3, [pc, #60]	; (401fc4 <UDP_Handler+0x91c>)
  401f88:	69db      	ldr	r3, [r3, #28]
  401f8a:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f8e:	d01f      	beq.n	401fd0 <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  401f90:	4b0c      	ldr	r3, [pc, #48]	; (401fc4 <UDP_Handler+0x91c>)
  401f92:	f44f 7280 	mov.w	r2, #256	; 0x100
  401f96:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  401f98:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  401f9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401f9e:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  401fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
  401fa4:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  401fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  401faa:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  401fac:	2023      	movs	r0, #35	; 0x23
  401fae:	4b07      	ldr	r3, [pc, #28]	; (401fcc <UDP_Handler+0x924>)
  401fb0:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  401fb2:	2000      	movs	r0, #0
  401fb4:	4b04      	ldr	r3, [pc, #16]	; (401fc8 <UDP_Handler+0x920>)
  401fb6:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  401fb8:	e09e      	b.n	4020f8 <UDP_Handler+0xa50>
  401fba:	bf00      	nop
  401fbc:	00401549 	.word	0x00401549
  401fc0:	0040143d 	.word	0x0040143d
  401fc4:	40084000 	.word	0x40084000
  401fc8:	00401111 	.word	0x00401111
  401fcc:	00402e05 	.word	0x00402e05
	}
	if (Is_udd_reset()) {
  401fd0:	4b4b      	ldr	r3, [pc, #300]	; (402100 <UDP_Handler+0xa58>)
  401fd2:	69db      	ldr	r3, [r3, #28]
  401fd4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  401fd8:	f000 808e 	beq.w	4020f8 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  401fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401fe0:	4b47      	ldr	r3, [pc, #284]	; (402100 <UDP_Handler+0xa58>)
  401fe2:	621a      	str	r2, [r3, #32]
  401fe4:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401fe6:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  401fe8:	2701      	movs	r7, #1
  401fea:	4e46      	ldr	r6, [pc, #280]	; (402104 <UDP_Handler+0xa5c>)
  401fec:	3401      	adds	r4, #1
  401fee:	b2e4      	uxtb	r4, r4
  401ff0:	4628      	mov	r0, r5
  401ff2:	4639      	mov	r1, r7
  401ff4:	4622      	mov	r2, r4
  401ff6:	47b0      	blx	r6
  401ff8:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  401ffa:	2c03      	cmp	r4, #3
  401ffc:	d1f6      	bne.n	401fec <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  401ffe:	4b42      	ldr	r3, [pc, #264]	; (402108 <UDP_Handler+0xa60>)
  402000:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  402002:	4b3f      	ldr	r3, [pc, #252]	; (402100 <UDP_Handler+0xa58>)
  402004:	685a      	ldr	r2, [r3, #4]
  402006:	f022 0201 	bic.w	r2, r2, #1
  40200a:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  40200c:	685a      	ldr	r2, [r3, #4]
  40200e:	f022 0202 	bic.w	r2, r2, #2
  402012:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  402014:	689a      	ldr	r2, [r3, #8]
  402016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40201a:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  40201c:	689a      	ldr	r2, [r3, #8]
  40201e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402022:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402026:	922c      	str	r2, [sp, #176]	; 0xb0
  402028:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40202a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40202e:	922c      	str	r2, [sp, #176]	; 0xb0
  402030:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402032:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40203a:	922c      	str	r2, [sp, #176]	; 0xb0
  40203c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402042:	922c      	str	r2, [sp, #176]	; 0xb0
  402044:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402046:	631a      	str	r2, [r3, #48]	; 0x30
  402048:	2300      	movs	r3, #0
  40204a:	932d      	str	r3, [sp, #180]	; 0xb4
  40204c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40204e:	2b13      	cmp	r3, #19
  402050:	d806      	bhi.n	402060 <UDP_Handler+0x9b8>
  402052:	bf00      	nop
  402054:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402056:	3301      	adds	r3, #1
  402058:	932d      	str	r3, [sp, #180]	; 0xb4
  40205a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40205c:	2b13      	cmp	r3, #19
  40205e:	d9f8      	bls.n	402052 <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  402060:	4b27      	ldr	r3, [pc, #156]	; (402100 <UDP_Handler+0xa58>)
  402062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402064:	922e      	str	r2, [sp, #184]	; 0xb8
  402066:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402068:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40206c:	922e      	str	r2, [sp, #184]	; 0xb8
  40206e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402074:	922e      	str	r2, [sp, #184]	; 0xb8
  402076:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402078:	631a      	str	r2, [r3, #48]	; 0x30
  40207a:	2300      	movs	r3, #0
  40207c:	932f      	str	r3, [sp, #188]	; 0xbc
  40207e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402080:	2b13      	cmp	r3, #19
  402082:	d806      	bhi.n	402092 <UDP_Handler+0x9ea>
  402084:	bf00      	nop
  402086:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402088:	3301      	adds	r3, #1
  40208a:	932f      	str	r3, [sp, #188]	; 0xbc
  40208c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40208e:	2b13      	cmp	r3, #19
  402090:	d9f8      	bls.n	402084 <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402092:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402096:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402098:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40209c:	2100      	movs	r1, #0
  40209e:	4a1b      	ldr	r2, [pc, #108]	; (40210c <UDP_Handler+0xa64>)
  4020a0:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  4020a2:	2101      	movs	r1, #1
  4020a4:	4a16      	ldr	r2, [pc, #88]	; (402100 <UDP_Handler+0xa58>)
  4020a6:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4020a8:	b923      	cbnz	r3, 4020b4 <UDP_Handler+0xa0c>
		cpu_irq_enable();
  4020aa:	4b18      	ldr	r3, [pc, #96]	; (40210c <UDP_Handler+0xa64>)
  4020ac:	7019      	strb	r1, [r3, #0]
  4020ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4020b2:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  4020b4:	4b16      	ldr	r3, [pc, #88]	; (402110 <UDP_Handler+0xa68>)
  4020b6:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  4020b8:	4b11      	ldr	r3, [pc, #68]	; (402100 <UDP_Handler+0xa58>)
  4020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  4020be:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4020c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4020c4:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4020c6:	e017      	b.n	4020f8 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4020c8:	4433      	add	r3, r6
  4020ca:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4020ce:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  4020d0:	2700      	movs	r7, #0
  4020d2:	e000      	b.n	4020d6 <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  4020d4:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4020d6:	2300      	movs	r3, #0
  4020d8:	e562      	b.n	401ba0 <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4020da:	4640      	mov	r0, r8
  4020dc:	4b0d      	ldr	r3, [pc, #52]	; (402114 <UDP_Handler+0xa6c>)
  4020de:	4798      	blx	r3
  4020e0:	e567      	b.n	401bb2 <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4020e2:	4b07      	ldr	r3, [pc, #28]	; (402100 <UDP_Handler+0xa58>)
  4020e4:	699b      	ldr	r3, [r3, #24]
  4020e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4020ea:	f47f af1e 	bne.w	401f2a <UDP_Handler+0x882>
  4020ee:	e721      	b.n	401f34 <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4020f0:	4640      	mov	r0, r8
  4020f2:	4b08      	ldr	r3, [pc, #32]	; (402114 <UDP_Handler+0xa6c>)
  4020f4:	4798      	blx	r3
  4020f6:	e55f      	b.n	401bb8 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  4020f8:	b030      	add	sp, #192	; 0xc0
  4020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020fe:	bf00      	nop
  402100:	40084000 	.word	0x40084000
  402104:	0040143d 	.word	0x0040143d
  402108:	00400981 	.word	0x00400981
  40210c:	200000e8 	.word	0x200000e8
  402110:	00401185 	.word	0x00401185
  402114:	0040147d 	.word	0x0040147d

00402118 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  402118:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40211a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40211e:	b672      	cpsid	i
  402120:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402124:	2200      	movs	r2, #0
  402126:	4b14      	ldr	r3, [pc, #80]	; (402178 <udd_attach+0x60>)
  402128:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  40212a:	2001      	movs	r0, #1
  40212c:	4b13      	ldr	r3, [pc, #76]	; (40217c <udd_attach+0x64>)
  40212e:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402130:	2023      	movs	r0, #35	; 0x23
  402132:	4b13      	ldr	r3, [pc, #76]	; (402180 <udd_attach+0x68>)
  402134:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  402136:	4b13      	ldr	r3, [pc, #76]	; (402184 <udd_attach+0x6c>)
  402138:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40213a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40213e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402140:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402146:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  402148:	f44f 7280 	mov.w	r2, #256	; 0x100
  40214c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  40214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402152:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  402154:	f44f 7200 	mov.w	r2, #512	; 0x200
  402158:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  40215a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40215e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402160:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402164:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402166:	b92c      	cbnz	r4, 402174 <udd_attach+0x5c>
		cpu_irq_enable();
  402168:	2201      	movs	r2, #1
  40216a:	4b03      	ldr	r3, [pc, #12]	; (402178 <udd_attach+0x60>)
  40216c:	701a      	strb	r2, [r3, #0]
  40216e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402172:	b662      	cpsie	i
  402174:	bd10      	pop	{r4, pc}
  402176:	bf00      	nop
  402178:	200000e8 	.word	0x200000e8
  40217c:	00401111 	.word	0x00401111
  402180:	00402dad 	.word	0x00402dad
  402184:	40084000 	.word	0x40084000

00402188 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402188:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40218a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40218e:	b672      	cpsid	i
  402190:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402194:	2500      	movs	r5, #0
  402196:	4b21      	ldr	r3, [pc, #132]	; (40221c <udd_enable+0x94>)
  402198:	701d      	strb	r5, [r3, #0]
	irqflags_t flags;

	flags = cpu_irq_save();

	// Enable USB hardware
	udd_enable_periph_ck();
  40219a:	2023      	movs	r0, #35	; 0x23
  40219c:	4b20      	ldr	r3, [pc, #128]	; (402220 <udd_enable+0x98>)
  40219e:	4798      	blx	r3
	sysclk_enable_usb();
  4021a0:	4b20      	ldr	r3, [pc, #128]	; (402224 <udd_enable+0x9c>)
  4021a2:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4021a4:	4b20      	ldr	r3, [pc, #128]	; (402228 <udd_enable+0xa0>)
  4021a6:	2250      	movs	r2, #80	; 0x50
  4021a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4021ac:	2208      	movs	r2, #8
  4021ae:	605a      	str	r2, [r3, #4]
  4021b0:	462b      	mov	r3, r5

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  4021b2:	481e      	ldr	r0, [pc, #120]	; (40222c <udd_enable+0xa4>)
  4021b4:	0099      	lsls	r1, r3, #2
  4021b6:	18ca      	adds	r2, r1, r3
  4021b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4021bc:	7c52      	ldrb	r2, [r2, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  4021be:	4419      	add	r1, r3
  4021c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  4021c4:	f002 0283 	and.w	r2, r2, #131	; 0x83
  4021c8:	f36f 12c7 	bfc	r2, #7, #1
  4021cc:	744a      	strb	r2, [r1, #17]
  4021ce:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4021d0:	2b03      	cmp	r3, #3
  4021d2:	d1ef      	bne.n	4021b4 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4021d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4021d8:	4b15      	ldr	r3, [pc, #84]	; (402230 <udd_enable+0xa8>)
  4021da:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4021dc:	2300      	movs	r3, #0
  4021de:	4a15      	ldr	r2, [pc, #84]	; (402234 <udd_enable+0xac>)
  4021e0:	7013      	strb	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4021e2:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4021e6:	b672      	cpsid	i
  4021e8:	f3bf 8f5f 	dmb	sy
  4021ec:	490b      	ldr	r1, [pc, #44]	; (40221c <udd_enable+0x94>)
  4021ee:	700b      	strb	r3, [r1, #0]
  4021f0:	4b11      	ldr	r3, [pc, #68]	; (402238 <udd_enable+0xb0>)
  4021f2:	78d9      	ldrb	r1, [r3, #3]
  4021f4:	3101      	adds	r1, #1
  4021f6:	70d9      	strb	r1, [r3, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4021f8:	b92a      	cbnz	r2, 402206 <udd_enable+0x7e>
		cpu_irq_enable();
  4021fa:	2201      	movs	r2, #1
  4021fc:	4b07      	ldr	r3, [pc, #28]	; (40221c <udd_enable+0x94>)
  4021fe:	701a      	strb	r2, [r3, #0]
  402200:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402204:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402206:	4b0d      	ldr	r3, [pc, #52]	; (40223c <udd_enable+0xb4>)
  402208:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40220a:	b92c      	cbnz	r4, 402218 <udd_enable+0x90>
		cpu_irq_enable();
  40220c:	2201      	movs	r2, #1
  40220e:	4b03      	ldr	r3, [pc, #12]	; (40221c <udd_enable+0x94>)
  402210:	701a      	strb	r2, [r3, #0]
  402212:	f3bf 8f5f 	dmb	sy
  402216:	b662      	cpsie	i
  402218:	bd38      	pop	{r3, r4, r5, pc}
  40221a:	bf00      	nop
  40221c:	200000e8 	.word	0x200000e8
  402220:	00402dad 	.word	0x00402dad
  402224:	00402af5 	.word	0x00402af5
  402228:	e000e100 	.word	0xe000e100
  40222c:	20000b88 	.word	0x20000b88
  402230:	00402e79 	.word	0x00402e79
  402234:	20000bc4 	.word	0x20000bc4
  402238:	20000c08 	.word	0x20000c08
  40223c:	00402119 	.word	0x00402119

00402240 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402240:	2000      	movs	r0, #0
  402242:	4770      	bx	lr

00402244 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402244:	4b0c      	ldr	r3, [pc, #48]	; (402278 <udd_set_address+0x34>)
  402246:	685a      	ldr	r2, [r3, #4]
  402248:	f022 0201 	bic.w	r2, r2, #1
  40224c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  40224e:	689a      	ldr	r2, [r3, #8]
  402250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402254:	609a      	str	r2, [r3, #8]
	if (address) {
  402256:	b170      	cbz	r0, 402276 <udd_set_address+0x32>
		udd_configure_address(address);
  402258:	6899      	ldr	r1, [r3, #8]
  40225a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  40225e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  402262:	430a      	orrs	r2, r1
  402264:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402266:	689a      	ldr	r2, [r3, #8]
  402268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40226c:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  40226e:	685a      	ldr	r2, [r3, #4]
  402270:	f042 0201 	orr.w	r2, r2, #1
  402274:	605a      	str	r2, [r3, #4]
  402276:	4770      	bx	lr
  402278:	40084000 	.word	0x40084000

0040227c <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  40227c:	4b05      	ldr	r3, [pc, #20]	; (402294 <udd_getaddress+0x18>)
  40227e:	685b      	ldr	r3, [r3, #4]
  402280:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402284:	bf1d      	ittte	ne
  402286:	4b03      	ldrne	r3, [pc, #12]	; (402294 <udd_getaddress+0x18>)
  402288:	6898      	ldrne	r0, [r3, #8]
  40228a:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  40228e:	2000      	moveq	r0, #0
}
  402290:	4770      	bx	lr
  402292:	bf00      	nop
  402294:	40084000 	.word	0x40084000

00402298 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402298:	4b02      	ldr	r3, [pc, #8]	; (4022a4 <udd_get_frame_number+0xc>)
  40229a:	6818      	ldr	r0, [r3, #0]
}
  40229c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4022a0:	4770      	bx	lr
  4022a2:	bf00      	nop
  4022a4:	40084000 	.word	0x40084000

004022a8 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  4022a8:	2000      	movs	r0, #0
  4022aa:	4770      	bx	lr

004022ac <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  4022ac:	4b01      	ldr	r3, [pc, #4]	; (4022b4 <udd_set_setup_payload+0x8>)
  4022ae:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4022b0:	8199      	strh	r1, [r3, #12]
  4022b2:	4770      	bx	lr
  4022b4:	20000c14 	.word	0x20000c14

004022b8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  4022b8:	b470      	push	{r4, r5, r6}
  4022ba:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  4022bc:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  4022c0:	2b03      	cmp	r3, #3
  4022c2:	d866      	bhi.n	402392 <udd_ep_alloc+0xda>
  4022c4:	009c      	lsls	r4, r3, #2
  4022c6:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  4022ca:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  4022ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
  4022d0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  4022d4:	d15f      	bne.n	402396 <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4022d6:	f001 0503 	and.w	r5, r1, #3
  4022da:	2d01      	cmp	r5, #1
  4022dc:	d103      	bne.n	4022e6 <udd_ep_alloc+0x2e>
  4022de:	2b00      	cmp	r3, #0
  4022e0:	d05b      	beq.n	40239a <udd_ep_alloc+0xe2>
  4022e2:	2b03      	cmp	r3, #3
  4022e4:	d05b      	beq.n	40239e <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4022e6:	1f1d      	subs	r5, r3, #4
  4022e8:	b2ed      	uxtb	r5, r5
  4022ea:	2d01      	cmp	r5, #1
  4022ec:	bf8c      	ite	hi
  4022ee:	2540      	movhi	r5, #64	; 0x40
  4022f0:	f44f 7500 	movls.w	r5, #512	; 0x200
  4022f4:	4295      	cmp	r5, r2
  4022f6:	db54      	blt.n	4023a2 <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  4022f8:	1e5d      	subs	r5, r3, #1
  4022fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4022fe:	4e2d      	ldr	r6, [pc, #180]	; (4023b4 <udd_ep_alloc+0xfc>)
  402300:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402304:	8a2e      	ldrh	r6, [r5, #16]
  402306:	f362 0609 	bfi	r6, r2, #0, #10
  40230a:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  40230c:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  40230e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402312:	f36f 1245 	bfc	r2, #5, #1
  402316:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402318:	09c0      	lsrs	r0, r0, #7
  40231a:	d003      	beq.n	402324 <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  40231c:	b2d2      	uxtb	r2, r2
  40231e:	f36f 0283 	bfc	r2, #2, #2
  402322:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402324:	4a24      	ldr	r2, [pc, #144]	; (4023b8 <udd_ep_alloc+0x100>)
  402326:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402328:	2601      	movs	r6, #1
  40232a:	fa06 f303 	lsl.w	r3, r6, r3
  40232e:	431d      	orrs	r5, r3
  402330:	6295      	str	r5, [r2, #40]	; 0x28
  402332:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402334:	ea25 0303 	bic.w	r3, r5, r3
  402338:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  40233a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40233c:	9300      	str	r3, [sp, #0]
  40233e:	9b00      	ldr	r3, [sp, #0]
  402340:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402344:	9300      	str	r3, [sp, #0]
  402346:	9b00      	ldr	r3, [sp, #0]
  402348:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  40234c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402350:	9300      	str	r3, [sp, #0]
  402352:	b138      	cbz	r0, 402364 <udd_ep_alloc+0xac>
  402354:	f041 0204 	orr.w	r2, r1, #4
  402358:	0212      	lsls	r2, r2, #8
  40235a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  40235e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402362:	e004      	b.n	40236e <udd_ep_alloc+0xb6>
  402364:	020a      	lsls	r2, r1, #8
  402366:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  40236a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40236e:	9b00      	ldr	r3, [sp, #0]
  402370:	4313      	orrs	r3, r2
  402372:	9300      	str	r3, [sp, #0]
  402374:	9b00      	ldr	r3, [sp, #0]
  402376:	6323      	str	r3, [r4, #48]	; 0x30
  402378:	2300      	movs	r3, #0
  40237a:	9301      	str	r3, [sp, #4]
  40237c:	9b01      	ldr	r3, [sp, #4]
  40237e:	2b13      	cmp	r3, #19
  402380:	d811      	bhi.n	4023a6 <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402382:	bf00      	nop
  402384:	9b01      	ldr	r3, [sp, #4]
  402386:	3301      	adds	r3, #1
  402388:	9301      	str	r3, [sp, #4]
  40238a:	9b01      	ldr	r3, [sp, #4]
  40238c:	2b13      	cmp	r3, #19
  40238e:	d9f8      	bls.n	402382 <udd_ep_alloc+0xca>
  402390:	e00b      	b.n	4023aa <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  402392:	2000      	movs	r0, #0
  402394:	e00a      	b.n	4023ac <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  402396:	2000      	movs	r0, #0
  402398:	e008      	b.n	4023ac <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  40239a:	2000      	movs	r0, #0
  40239c:	e006      	b.n	4023ac <udd_ep_alloc+0xf4>
  40239e:	2000      	movs	r0, #0
  4023a0:	e004      	b.n	4023ac <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  4023a2:	2000      	movs	r0, #0
  4023a4:	e002      	b.n	4023ac <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4023a6:	2001      	movs	r0, #1
  4023a8:	e000      	b.n	4023ac <udd_ep_alloc+0xf4>
  4023aa:	2001      	movs	r0, #1
}
  4023ac:	b003      	add	sp, #12
  4023ae:	bc70      	pop	{r4, r5, r6}
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	20000b88 	.word	0x20000b88
  4023b8:	40084000 	.word	0x40084000

004023bc <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  4023bc:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4023be:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  4023c2:	2a03      	cmp	r2, #3
  4023c4:	d811      	bhi.n	4023ea <udd_ep_free+0x2e>
  4023c6:	0093      	lsls	r3, r2, #2
  4023c8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4023cc:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
		return;
	}
	udd_disable_endpoint(ep_index);
  4023d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4023d2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  4023d6:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4023d8:	1e50      	subs	r0, r2, #1
  4023da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023de:	4b03      	ldr	r3, [pc, #12]	; (4023ec <udd_ep_free+0x30>)
  4023e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023e4:	2101      	movs	r1, #1
  4023e6:	4b02      	ldr	r3, [pc, #8]	; (4023f0 <udd_ep_free+0x34>)
  4023e8:	4798      	blx	r3
  4023ea:	bd08      	pop	{r3, pc}
  4023ec:	20000b88 	.word	0x20000b88
  4023f0:	0040143d 	.word	0x0040143d

004023f4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4023f4:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  4023f8:	2803      	cmp	r0, #3
  4023fa:	d815      	bhi.n	402428 <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4023fc:	1e43      	subs	r3, r0, #1
  4023fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402402:	4a0a      	ldr	r2, [pc, #40]	; (40242c <udd_ep_is_halted+0x38>)
  402404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402408:	7c5b      	ldrb	r3, [r3, #17]
  40240a:	f013 0f20 	tst.w	r3, #32
  40240e:	d109      	bne.n	402424 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402410:	300c      	adds	r0, #12
  402412:	4b07      	ldr	r3, [pc, #28]	; (402430 <udd_ep_is_halted+0x3c>)
  402414:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402418:	f013 0f28 	tst.w	r3, #40	; 0x28
  40241c:	bf0c      	ite	eq
  40241e:	2000      	moveq	r0, #0
  402420:	2001      	movne	r0, #1
  402422:	4770      	bx	lr
  402424:	2001      	movs	r0, #1
  402426:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402428:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40242a:	4770      	bx	lr
  40242c:	20000b88 	.word	0x20000b88
  402430:	40084000 	.word	0x40084000

00402434 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402434:	b410      	push	{r4}
  402436:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402438:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  40243c:	2a03      	cmp	r2, #3
  40243e:	d85d      	bhi.n	4024fc <udd_ep_set_halt+0xc8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402440:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402444:	f1d1 0101 	rsbs	r1, r1, #1
  402448:	bf38      	it	cc
  40244a:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40244c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40244e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402452:	2400      	movs	r4, #0
  402454:	4b2e      	ldr	r3, [pc, #184]	; (402510 <udd_ep_set_halt+0xdc>)
  402456:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402458:	f010 0f80 	tst.w	r0, #128	; 0x80
  40245c:	d024      	beq.n	4024a8 <udd_ep_set_halt+0x74>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40245e:	1e53      	subs	r3, r2, #1
  402460:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402464:	482b      	ldr	r0, [pc, #172]	; (402514 <udd_ep_set_halt+0xe0>)
  402466:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40246a:	f102 040c 	add.w	r4, r2, #12
  40246e:	482a      	ldr	r0, [pc, #168]	; (402518 <udd_ep_set_halt+0xe4>)
  402470:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402474:	f010 0f10 	tst.w	r0, #16
  402478:	d104      	bne.n	402484 <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  40247a:	7c58      	ldrb	r0, [r3, #17]
  40247c:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402480:	2801      	cmp	r0, #1
  402482:	dd11      	ble.n	4024a8 <udd_ep_set_halt+0x74>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402484:	7c58      	ldrb	r0, [r3, #17]
  402486:	f040 0020 	orr.w	r0, r0, #32
  40248a:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  40248c:	2301      	movs	r3, #1
  40248e:	fa03 f202 	lsl.w	r2, r3, r2
  402492:	4b21      	ldr	r3, [pc, #132]	; (402518 <udd_ep_set_halt+0xe4>)
  402494:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402496:	2900      	cmp	r1, #0
  402498:	d032      	beq.n	402500 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  40249a:	2001      	movs	r0, #1
  40249c:	4b1c      	ldr	r3, [pc, #112]	; (402510 <udd_ep_set_halt+0xdc>)
  40249e:	7018      	strb	r0, [r3, #0]
  4024a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4024a4:	b662      	cpsie	i
  4024a6:	e02e      	b.n	402506 <udd_ep_set_halt+0xd2>
  4024a8:	0093      	lsls	r3, r2, #2
  4024aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4024ae:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4024b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4024b4:	9000      	str	r0, [sp, #0]
  4024b6:	9800      	ldr	r0, [sp, #0]
  4024b8:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  4024bc:	9000      	str	r0, [sp, #0]
  4024be:	9800      	ldr	r0, [sp, #0]
  4024c0:	f040 0020 	orr.w	r0, r0, #32
  4024c4:	9000      	str	r0, [sp, #0]
  4024c6:	9800      	ldr	r0, [sp, #0]
  4024c8:	6318      	str	r0, [r3, #48]	; 0x30
  4024ca:	2300      	movs	r3, #0
  4024cc:	9301      	str	r3, [sp, #4]
  4024ce:	9b01      	ldr	r3, [sp, #4]
  4024d0:	2b13      	cmp	r3, #19
  4024d2:	d806      	bhi.n	4024e2 <udd_ep_set_halt+0xae>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4024d4:	bf00      	nop
  4024d6:	9b01      	ldr	r3, [sp, #4]
  4024d8:	3301      	adds	r3, #1
  4024da:	9301      	str	r3, [sp, #4]
  4024dc:	9b01      	ldr	r3, [sp, #4]
  4024de:	2b13      	cmp	r3, #19
  4024e0:	d9f8      	bls.n	4024d4 <udd_ep_set_halt+0xa0>
		udd_enable_endpoint_interrupt(ep_index);
  4024e2:	2301      	movs	r3, #1
  4024e4:	fa03 f202 	lsl.w	r2, r3, r2
  4024e8:	4b0b      	ldr	r3, [pc, #44]	; (402518 <udd_ep_set_halt+0xe4>)
  4024ea:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024ec:	b151      	cbz	r1, 402504 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  4024ee:	2001      	movs	r0, #1
  4024f0:	4b07      	ldr	r3, [pc, #28]	; (402510 <udd_ep_set_halt+0xdc>)
  4024f2:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4024f4:	f3bf 8f5f 	dmb	sy
  4024f8:	b662      	cpsie	i
  4024fa:	e004      	b.n	402506 <udd_ep_set_halt+0xd2>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  4024fc:	2000      	movs	r0, #0
  4024fe:	e002      	b.n	402506 <udd_ep_set_halt+0xd2>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402500:	2001      	movs	r0, #1
  402502:	e000      	b.n	402506 <udd_ep_set_halt+0xd2>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402504:	2001      	movs	r0, #1
}
  402506:	b003      	add	sp, #12
  402508:	f85d 4b04 	ldr.w	r4, [sp], #4
  40250c:	4770      	bx	lr
  40250e:	bf00      	nop
  402510:	200000e8 	.word	0x200000e8
  402514:	20000b88 	.word	0x20000b88
  402518:	40084000 	.word	0x40084000

0040251c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  40251c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40251e:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402520:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402524:	2803      	cmp	r0, #3
  402526:	d859      	bhi.n	4025dc <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402528:	4c30      	ldr	r4, [pc, #192]	; (4025ec <udd_ep_clear_halt+0xd0>)
  40252a:	1e43      	subs	r3, r0, #1
  40252c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402530:	009d      	lsls	r5, r3, #2
  402532:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  402534:	7c4b      	ldrb	r3, [r1, #17]
  402536:	f36f 1345 	bfc	r3, #5, #1
  40253a:	744b      	strb	r3, [r1, #17]
  40253c:	0082      	lsls	r2, r0, #2
  40253e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402542:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402546:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402548:	f013 0f20 	tst.w	r3, #32
  40254c:	d048      	beq.n	4025e0 <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  40254e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402550:	9300      	str	r3, [sp, #0]
  402552:	9b00      	ldr	r3, [sp, #0]
  402554:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402558:	9300      	str	r3, [sp, #0]
  40255a:	9b00      	ldr	r3, [sp, #0]
  40255c:	f023 0320 	bic.w	r3, r3, #32
  402560:	9300      	str	r3, [sp, #0]
  402562:	9b00      	ldr	r3, [sp, #0]
  402564:	6313      	str	r3, [r2, #48]	; 0x30
  402566:	2300      	movs	r3, #0
  402568:	9301      	str	r3, [sp, #4]
  40256a:	9b01      	ldr	r3, [sp, #4]
  40256c:	2b13      	cmp	r3, #19
  40256e:	d806      	bhi.n	40257e <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402570:	bf00      	nop
  402572:	9b01      	ldr	r3, [sp, #4]
  402574:	3301      	adds	r3, #1
  402576:	9301      	str	r3, [sp, #4]
  402578:	9b01      	ldr	r3, [sp, #4]
  40257a:	2b13      	cmp	r3, #19
  40257c:	d9f8      	bls.n	402570 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  40257e:	4b1c      	ldr	r3, [pc, #112]	; (4025f0 <udd_ep_clear_halt+0xd4>)
  402580:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402582:	2701      	movs	r7, #1
  402584:	fa07 f000 	lsl.w	r0, r7, r0
  402588:	4306      	orrs	r6, r0
  40258a:	629e      	str	r6, [r3, #40]	; 0x28
  40258c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  40258e:	ea26 0000 	bic.w	r0, r6, r0
  402592:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402594:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402596:	9302      	str	r3, [sp, #8]
  402598:	9b02      	ldr	r3, [sp, #8]
  40259a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40259e:	9302      	str	r3, [sp, #8]
  4025a0:	9b02      	ldr	r3, [sp, #8]
  4025a2:	f023 0308 	bic.w	r3, r3, #8
  4025a6:	9302      	str	r3, [sp, #8]
  4025a8:	9b02      	ldr	r3, [sp, #8]
  4025aa:	6313      	str	r3, [r2, #48]	; 0x30
  4025ac:	2300      	movs	r3, #0
  4025ae:	9303      	str	r3, [sp, #12]
  4025b0:	9b03      	ldr	r3, [sp, #12]
  4025b2:	2b13      	cmp	r3, #19
  4025b4:	d806      	bhi.n	4025c4 <udd_ep_clear_halt+0xa8>
  4025b6:	bf00      	nop
  4025b8:	9b03      	ldr	r3, [sp, #12]
  4025ba:	3301      	adds	r3, #1
  4025bc:	9303      	str	r3, [sp, #12]
  4025be:	9b03      	ldr	r3, [sp, #12]
  4025c0:	2b13      	cmp	r3, #19
  4025c2:	d9f8      	bls.n	4025b6 <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  4025c4:	7c4b      	ldrb	r3, [r1, #17]
  4025c6:	f013 0f10 	tst.w	r3, #16
  4025ca:	d00b      	beq.n	4025e4 <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  4025cc:	7c4b      	ldrb	r3, [r1, #17]
  4025ce:	f36f 1304 	bfc	r3, #4, #1
  4025d2:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  4025d4:	5963      	ldr	r3, [r4, r5]
  4025d6:	4798      	blx	r3
		}
	}
	return true;
  4025d8:	2001      	movs	r0, #1
  4025da:	e004      	b.n	4025e6 <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  4025dc:	2000      	movs	r0, #0
  4025de:	e002      	b.n	4025e6 <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  4025e0:	2001      	movs	r0, #1
  4025e2:	e000      	b.n	4025e6 <udd_ep_clear_halt+0xca>
  4025e4:	2001      	movs	r0, #1
}
  4025e6:	b005      	add	sp, #20
  4025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4025ea:	bf00      	nop
  4025ec:	20000b88 	.word	0x20000b88
  4025f0:	40084000 	.word	0x40084000

004025f4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  4025f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  4025f8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  4025fc:	2c03      	cmp	r4, #3
  4025fe:	f200 8088 	bhi.w	402712 <udd_ep_run+0x11e>
  402602:	00a5      	lsls	r5, r4, #2
  402604:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402608:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  40260c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  40260e:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402612:	f000 8081 	beq.w	402718 <udd_ep_run+0x124>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402616:	f8df c12c 	ldr.w	ip, [pc, #300]	; 402744 <udd_ep_run+0x150>
  40261a:	1e66      	subs	r6, r4, #1
  40261c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402620:	00b7      	lsls	r7, r6, #2
  402622:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402626:	f896 8011 	ldrb.w	r8, [r6, #17]
  40262a:	f018 0f20 	tst.w	r8, #32
  40262e:	d176      	bne.n	40271e <udd_ep_run+0x12a>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402630:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  402634:	f018 0f20 	tst.w	r8, #32
  402638:	d174      	bne.n	402724 <udd_ep_run+0x130>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40263a:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40263e:	f1d8 0a01 	rsbs	sl, r8, #1
  402642:	bf38      	it	cc
  402644:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402648:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40264a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40264e:	f04f 0900 	mov.w	r9, #0
  402652:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402738 <udd_ep_run+0x144>
  402656:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  40265a:	f896 8011 	ldrb.w	r8, [r6, #17]
  40265e:	f018 0f10 	tst.w	r8, #16
  402662:	d00b      	beq.n	40267c <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402664:	f1ba 0f00 	cmp.w	sl, #0
  402668:	d05f      	beq.n	40272a <udd_ep_run+0x136>
		cpu_irq_enable();
  40266a:	2201      	movs	r2, #1
  40266c:	4b32      	ldr	r3, [pc, #200]	; (402738 <udd_ep_run+0x144>)
  40266e:	701a      	strb	r2, [r3, #0]
  402670:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402674:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402676:	4648      	mov	r0, r9
  402678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  40267c:	f896 8011 	ldrb.w	r8, [r6, #17]
  402680:	f048 0810 	orr.w	r8, r8, #16
  402684:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402688:	f1ba 0f00 	cmp.w	sl, #0
  40268c:	d008      	beq.n	4026a0 <udd_ep_run+0xac>
		cpu_irq_enable();
  40268e:	f04f 0901 	mov.w	r9, #1
  402692:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402738 <udd_ep_run+0x144>
  402696:	f888 9000 	strb.w	r9, [r8]
  40269a:	f3bf 8f5f 	dmb	sy
  40269e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  4026a0:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  4026a2:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  4026a4:	2200      	movs	r2, #0
  4026a6:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  4026a8:	9a08      	ldr	r2, [sp, #32]
  4026aa:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4026ae:	b921      	cbnz	r1, 4026ba <udd_ep_run+0xc6>
  4026b0:	f1d3 0201 	rsbs	r2, r3, #1
  4026b4:	bf38      	it	cc
  4026b6:	2200      	movcc	r2, #0
  4026b8:	e000      	b.n	4026bc <udd_ep_run+0xc8>
  4026ba:	2201      	movs	r2, #1
  4026bc:	7c73      	ldrb	r3, [r6, #17]
  4026be:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  4026c2:	f36f 13c7 	bfc	r3, #7, #1
  4026c6:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4026c8:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4026cc:	b672      	cpsid	i
  4026ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4026d2:	2200      	movs	r2, #0
  4026d4:	4b18      	ldr	r3, [pc, #96]	; (402738 <udd_ep_run+0x144>)
  4026d6:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  4026d8:	2201      	movs	r2, #1
  4026da:	40a2      	lsls	r2, r4
  4026dc:	4b17      	ldr	r3, [pc, #92]	; (40273c <udd_ep_run+0x148>)
  4026de:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  4026e0:	f010 0f80 	tst.w	r0, #128	; 0x80
  4026e4:	d00c      	beq.n	402700 <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  4026e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4026e8:	f013 0f11 	tst.w	r3, #17
  4026ec:	d108      	bne.n	402700 <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  4026ee:	4620      	mov	r0, r4
  4026f0:	2101      	movs	r1, #1
  4026f2:	4b13      	ldr	r3, [pc, #76]	; (402740 <udd_ep_run+0x14c>)
  4026f4:	4798      	blx	r3
  4026f6:	b118      	cbz	r0, 402700 <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  4026f8:	4620      	mov	r0, r4
  4026fa:	2100      	movs	r1, #0
  4026fc:	4b10      	ldr	r3, [pc, #64]	; (402740 <udd_ep_run+0x14c>)
  4026fe:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402700:	b9b6      	cbnz	r6, 402730 <udd_ep_run+0x13c>
		cpu_irq_enable();
  402702:	2001      	movs	r0, #1
  402704:	4b0c      	ldr	r3, [pc, #48]	; (402738 <udd_ep_run+0x144>)
  402706:	7018      	strb	r0, [r3, #0]
  402708:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40270c:	b662      	cpsie	i
  40270e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  402712:	2000      	movs	r0, #0
  402714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402718:	2000      	movs	r0, #0
  40271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40271e:	2000      	movs	r0, #0
  402720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402724:	2000      	movs	r0, #0
  402726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  40272a:	2000      	movs	r0, #0
  40272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402730:	2001      	movs	r0, #1
}
  402732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402736:	bf00      	nop
  402738:	200000e8 	.word	0x200000e8
  40273c:	40084000 	.word	0x40084000
  402740:	00401549 	.word	0x00401549
  402744:	20000b88 	.word	0x20000b88

00402748 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  402748:	b5f0      	push	{r4, r5, r6, r7, lr}
  40274a:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  40274c:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402750:	2c03      	cmp	r4, #3
  402752:	f200 8090 	bhi.w	402876 <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402756:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40275a:	b672      	cpsid	i
  40275c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402760:	2100      	movs	r1, #0
  402762:	4a46      	ldr	r2, [pc, #280]	; (40287c <udd_ep_abort+0x134>)
  402764:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  402766:	2601      	movs	r6, #1
  402768:	40a6      	lsls	r6, r4
  40276a:	4a45      	ldr	r2, [pc, #276]	; (402880 <udd_ep_abort+0x138>)
  40276c:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40276e:	b92b      	cbnz	r3, 40277c <udd_ep_abort+0x34>
		cpu_irq_enable();
  402770:	2201      	movs	r2, #1
  402772:	4b42      	ldr	r3, [pc, #264]	; (40287c <udd_ep_abort+0x134>)
  402774:	701a      	strb	r2, [r3, #0]
  402776:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40277a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  40277c:	f010 0f80 	tst.w	r0, #128	; 0x80
  402780:	d109      	bne.n	402796 <udd_ep_abort+0x4e>
  402782:	00a5      	lsls	r5, r4, #2
  402784:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402788:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40278c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40278e:	f013 0f42 	tst.w	r3, #66	; 0x42
  402792:	d157      	bne.n	402844 <udd_ep_abort+0xfc>
  402794:	e05d      	b.n	402852 <udd_ep_abort+0x10a>
  402796:	00a3      	lsls	r3, r4, #2
  402798:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40279c:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  4027a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027a2:	f012 0f10 	tst.w	r2, #16
  4027a6:	d02a      	beq.n	4027fe <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  4027a8:	b18c      	cbz	r4, 4027ce <udd_ep_abort+0x86>
  4027aa:	2c03      	cmp	r4, #3
  4027ac:	d00f      	beq.n	4027ce <udd_ep_abort+0x86>
  4027ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027b0:	f022 0210 	bic.w	r2, r2, #16
  4027b4:	631a      	str	r2, [r3, #48]	; 0x30
  4027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027b8:	f012 0f10 	tst.w	r2, #16
  4027bc:	d1fb      	bne.n	4027b6 <udd_ep_abort+0x6e>
  4027be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027c0:	f042 0210 	orr.w	r2, r2, #16
  4027c4:	631a      	str	r2, [r3, #48]	; 0x30
  4027c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027c8:	f012 0f10 	tst.w	r2, #16
  4027cc:	d0fb      	beq.n	4027c6 <udd_ep_abort+0x7e>
  4027ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4027d0:	9200      	str	r2, [sp, #0]
  4027d2:	9a00      	ldr	r2, [sp, #0]
  4027d4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4027d8:	9200      	str	r2, [sp, #0]
  4027da:	9a00      	ldr	r2, [sp, #0]
  4027dc:	f022 0210 	bic.w	r2, r2, #16
  4027e0:	9200      	str	r2, [sp, #0]
  4027e2:	9a00      	ldr	r2, [sp, #0]
  4027e4:	631a      	str	r2, [r3, #48]	; 0x30
  4027e6:	2200      	movs	r2, #0
  4027e8:	9201      	str	r2, [sp, #4]
  4027ea:	9a01      	ldr	r2, [sp, #4]
  4027ec:	2a13      	cmp	r2, #19
  4027ee:	d806      	bhi.n	4027fe <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4027f0:	bf00      	nop
  4027f2:	9a01      	ldr	r2, [sp, #4]
  4027f4:	3201      	adds	r2, #1
  4027f6:	9201      	str	r2, [sp, #4]
  4027f8:	9a01      	ldr	r2, [sp, #4]
  4027fa:	2a13      	cmp	r2, #19
  4027fc:	d9f8      	bls.n	4027f0 <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4027fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402800:	9202      	str	r2, [sp, #8]
  402802:	9a02      	ldr	r2, [sp, #8]
  402804:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402808:	9202      	str	r2, [sp, #8]
  40280a:	9a02      	ldr	r2, [sp, #8]
  40280c:	f022 0201 	bic.w	r2, r2, #1
  402810:	9202      	str	r2, [sp, #8]
  402812:	9a02      	ldr	r2, [sp, #8]
  402814:	631a      	str	r2, [r3, #48]	; 0x30
  402816:	2300      	movs	r3, #0
  402818:	9303      	str	r3, [sp, #12]
  40281a:	9b03      	ldr	r3, [sp, #12]
  40281c:	2b13      	cmp	r3, #19
  40281e:	d806      	bhi.n	40282e <udd_ep_abort+0xe6>
  402820:	bf00      	nop
  402822:	9b03      	ldr	r3, [sp, #12]
  402824:	3301      	adds	r3, #1
  402826:	9303      	str	r3, [sp, #12]
  402828:	9b03      	ldr	r3, [sp, #12]
  40282a:	2b13      	cmp	r3, #19
  40282c:	d9f8      	bls.n	402820 <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  40282e:	1e63      	subs	r3, r4, #1
  402830:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402834:	4a13      	ldr	r2, [pc, #76]	; (402884 <udd_ep_abort+0x13c>)
  402836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40283a:	7c5a      	ldrb	r2, [r3, #17]
  40283c:	f36f 0283 	bfc	r2, #2, #2
  402840:	745a      	strb	r2, [r3, #17]
  402842:	e006      	b.n	402852 <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  402844:	4f10      	ldr	r7, [pc, #64]	; (402888 <udd_ep_abort+0x140>)
  402846:	4620      	mov	r0, r4
  402848:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40284a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40284c:	f013 0f42 	tst.w	r3, #66	; 0x42
  402850:	d1f9      	bne.n	402846 <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402852:	4b0b      	ldr	r3, [pc, #44]	; (402880 <udd_ep_abort+0x138>)
  402854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402856:	4332      	orrs	r2, r6
  402858:	629a      	str	r2, [r3, #40]	; 0x28
  40285a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40285c:	ea22 0606 	bic.w	r6, r2, r6
  402860:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402862:	1e60      	subs	r0, r4, #1
  402864:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402868:	4b06      	ldr	r3, [pc, #24]	; (402884 <udd_ep_abort+0x13c>)
  40286a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40286e:	2101      	movs	r1, #1
  402870:	4622      	mov	r2, r4
  402872:	4b06      	ldr	r3, [pc, #24]	; (40288c <udd_ep_abort+0x144>)
  402874:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  402876:	b005      	add	sp, #20
  402878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40287a:	bf00      	nop
  40287c:	200000e8 	.word	0x200000e8
  402880:	40084000 	.word	0x40084000
  402884:	20000b88 	.word	0x20000b88
  402888:	0040147d 	.word	0x0040147d
  40288c:	0040143d 	.word	0x0040143d

00402890 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  402890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402894:	460e      	mov	r6, r1
  402896:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  402898:	3801      	subs	r0, #1
  40289a:	2802      	cmp	r0, #2
  40289c:	d80f      	bhi.n	4028be <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
  40289e:	b192      	cbz	r2, 4028c6 <_write+0x36>
  4028a0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4028a2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4028e0 <_write+0x50>
  4028a6:	4f0d      	ldr	r7, [pc, #52]	; (4028dc <_write+0x4c>)
  4028a8:	f8d8 0000 	ldr.w	r0, [r8]
  4028ac:	5d31      	ldrb	r1, [r6, r4]
  4028ae:	683b      	ldr	r3, [r7, #0]
  4028b0:	4798      	blx	r3
  4028b2:	2800      	cmp	r0, #0
  4028b4:	db0a      	blt.n	4028cc <_write+0x3c>
			return -1;
		}
		++nChars;
  4028b6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4028b8:	42a5      	cmp	r5, r4
  4028ba:	d1f5      	bne.n	4028a8 <_write+0x18>
  4028bc:	e00a      	b.n	4028d4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4028be:	f04f 30ff 	mov.w	r0, #4294967295
  4028c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  4028c6:	2000      	movs	r0, #0
  4028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4028cc:	f04f 30ff 	mov.w	r0, #4294967295
  4028d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
  4028d4:	4620      	mov	r0, r4
	}
	return nChars;
}
  4028d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4028da:	bf00      	nop
  4028dc:	20000c2c 	.word	0x20000c2c
  4028e0:	20000c30 	.word	0x20000c30

004028e4 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  4028e4:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  4028e8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
  4028ec:	bf0c      	ite	eq
  4028ee:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
  4028f0:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
  4028f2:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  4028f4:	bf0c      	ite	eq
  4028f6:	2000      	moveq	r0, #0
  4028f8:	2001      	movne	r0, #1
  4028fa:	4770      	bx	lr

004028fc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4028fc:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4028fe:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  402900:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402904:	d02e      	beq.n	402964 <pio_set_peripheral+0x68>
  402906:	d808      	bhi.n	40291a <pio_set_peripheral+0x1e>
  402908:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40290c:	d014      	beq.n	402938 <pio_set_peripheral+0x3c>
  40290e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402912:	d01d      	beq.n	402950 <pio_set_peripheral+0x54>
  402914:	2900      	cmp	r1, #0
  402916:	d135      	bne.n	402984 <pio_set_peripheral+0x88>
  402918:	e035      	b.n	402986 <pio_set_peripheral+0x8a>
  40291a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40291e:	d032      	beq.n	402986 <pio_set_peripheral+0x8a>
  402920:	d803      	bhi.n	40292a <pio_set_peripheral+0x2e>
  402922:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402926:	d027      	beq.n	402978 <pio_set_peripheral+0x7c>
  402928:	e02c      	b.n	402984 <pio_set_peripheral+0x88>
  40292a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40292e:	d02a      	beq.n	402986 <pio_set_peripheral+0x8a>
  402930:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402934:	d027      	beq.n	402986 <pio_set_peripheral+0x8a>
  402936:	e025      	b.n	402984 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402938:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40293a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40293c:	43d3      	mvns	r3, r2
  40293e:	4021      	ands	r1, r4
  402940:	4019      	ands	r1, r3
  402942:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402944:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402946:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402948:	4021      	ands	r1, r4
  40294a:	400b      	ands	r3, r1
  40294c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40294e:	e019      	b.n	402984 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402950:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402952:	4313      	orrs	r3, r2
  402954:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402956:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402958:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40295a:	400b      	ands	r3, r1
  40295c:	ea23 0302 	bic.w	r3, r3, r2
  402960:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402962:	e00f      	b.n	402984 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402964:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402966:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402968:	400b      	ands	r3, r1
  40296a:	ea23 0302 	bic.w	r3, r3, r2
  40296e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402970:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402972:	4313      	orrs	r3, r2
  402974:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402976:	e005      	b.n	402984 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402978:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40297a:	4313      	orrs	r3, r2
  40297c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40297e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402980:	4313      	orrs	r3, r2
  402982:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402984:	6042      	str	r2, [r0, #4]
}
  402986:	f85d 4b04 	ldr.w	r4, [sp], #4
  40298a:	4770      	bx	lr

0040298c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40298c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40298e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  402992:	bf14      	ite	ne
  402994:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402996:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402998:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40299c:	bf14      	ite	ne
  40299e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4029a0:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4029a2:	f012 0f02 	tst.w	r2, #2
  4029a6:	d002      	beq.n	4029ae <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4029a8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4029ac:	e004      	b.n	4029b8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4029ae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4029b2:	bf18      	it	ne
  4029b4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4029b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4029ba:	6001      	str	r1, [r0, #0]
  4029bc:	4770      	bx	lr
  4029be:	bf00      	nop

004029c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4029c0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4029c2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4029c4:	9c01      	ldr	r4, [sp, #4]
  4029c6:	b10c      	cbz	r4, 4029cc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4029c8:	6641      	str	r1, [r0, #100]	; 0x64
  4029ca:	e000      	b.n	4029ce <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4029cc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4029ce:	b10b      	cbz	r3, 4029d4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4029d0:	6501      	str	r1, [r0, #80]	; 0x50
  4029d2:	e000      	b.n	4029d6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4029d4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4029d6:	b10a      	cbz	r2, 4029dc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4029d8:	6301      	str	r1, [r0, #48]	; 0x30
  4029da:	e000      	b.n	4029de <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4029dc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4029de:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4029e0:	6001      	str	r1, [r0, #0]
}
  4029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4029e6:	4770      	bx	lr

004029e8 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  4029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4029ea:	b083      	sub	sp, #12
  4029ec:	4607      	mov	r7, r0
  4029ee:	460c      	mov	r4, r1
  4029f0:	4616      	mov	r6, r2
  4029f2:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
  4029f4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4029f8:	d014      	beq.n	402a24 <pio_configure+0x3c>
  4029fa:	d809      	bhi.n	402a10 <pio_configure+0x28>
  4029fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402a00:	d010      	beq.n	402a24 <pio_configure+0x3c>
  402a02:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402a06:	d00d      	beq.n	402a24 <pio_configure+0x3c>
  402a08:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402a0c:	d12c      	bne.n	402a68 <pio_configure+0x80>
  402a0e:	e009      	b.n	402a24 <pio_configure+0x3c>
  402a10:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402a14:	d018      	beq.n	402a48 <pio_configure+0x60>
  402a16:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402a1a:	d015      	beq.n	402a48 <pio_configure+0x60>
  402a1c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402a20:	d00c      	beq.n	402a3c <pio_configure+0x54>
  402a22:	e021      	b.n	402a68 <pio_configure+0x80>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  402a24:	4638      	mov	r0, r7
  402a26:	4621      	mov	r1, r4
  402a28:	4632      	mov	r2, r6
  402a2a:	4b11      	ldr	r3, [pc, #68]	; (402a70 <pio_configure+0x88>)
  402a2c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402a2e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  402a32:	bf14      	ite	ne
  402a34:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402a36:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402a38:	2001      	movs	r0, #1
  402a3a:	e016      	b.n	402a6a <pio_configure+0x82>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  402a3c:	4611      	mov	r1, r2
  402a3e:	461a      	mov	r2, r3
  402a40:	4b0c      	ldr	r3, [pc, #48]	; (402a74 <pio_configure+0x8c>)
  402a42:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402a44:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
  402a46:	e010      	b.n	402a6a <pio_configure+0x82>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  402a48:	f005 0301 	and.w	r3, r5, #1
  402a4c:	9300      	str	r3, [sp, #0]
  402a4e:	4638      	mov	r0, r7
  402a50:	4631      	mov	r1, r6
  402a52:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  402a56:	bf14      	ite	ne
  402a58:	2200      	movne	r2, #0
  402a5a:	2201      	moveq	r2, #1
  402a5c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  402a60:	4c05      	ldr	r4, [pc, #20]	; (402a78 <pio_configure+0x90>)
  402a62:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402a64:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
  402a66:	e000      	b.n	402a6a <pio_configure+0x82>

	default:
		return 0;
  402a68:	2000      	movs	r0, #0
	}

	return 1;
}
  402a6a:	b003      	add	sp, #12
  402a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402a6e:	bf00      	nop
  402a70:	004028fd 	.word	0x004028fd
  402a74:	0040298d 	.word	0x0040298d
  402a78:	004029c1 	.word	0x004029c1

00402a7c <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402a7c:	f012 0f10 	tst.w	r2, #16
  402a80:	d010      	beq.n	402aa4 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402a82:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402a86:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402a8a:	bf14      	ite	ne
  402a8c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402a90:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402a94:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402a98:	bf14      	ite	ne
  402a9a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402a9e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  402aa2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402aa4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402aa8:	4770      	bx	lr
  402aaa:	bf00      	nop

00402aac <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  402aac:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  402aae:	6401      	str	r1, [r0, #64]	; 0x40
  402ab0:	4770      	bx	lr
  402ab2:	bf00      	nop

00402ab4 <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402ab4:	6441      	str	r1, [r0, #68]	; 0x44
  402ab6:	4770      	bx	lr

00402ab8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402ab8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402aba:	4770      	bx	lr

00402abc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402abc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402abe:	4770      	bx	lr

00402ac0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  402ac0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  402ac2:	0189      	lsls	r1, r1, #6
  402ac4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  402ac6:	2402      	movs	r4, #2
  402ac8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  402aca:	f04f 31ff 	mov.w	r1, #4294967295
  402ace:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  402ad0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  402ad2:	605a      	str	r2, [r3, #4]
}
  402ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ad8:	4770      	bx	lr
  402ada:	bf00      	nop

00402adc <tc_sync_trigger>:
		Tc *p_tc)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BCR = TC_BCR_SYNC;
  402adc:	2301      	movs	r3, #1
  402ade:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  402ae2:	4770      	bx	lr

00402ae4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  402ae4:	0189      	lsls	r1, r1, #6
  402ae6:	2305      	movs	r3, #5
  402ae8:	5043      	str	r3, [r0, r1]
  402aea:	4770      	bx	lr

00402aec <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
  402aec:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  402af0:	6908      	ldr	r0, [r1, #16]
}
  402af2:	4770      	bx	lr

00402af4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  402af4:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402af6:	2000      	movs	r0, #0
  402af8:	213e      	movs	r1, #62	; 0x3e
  402afa:	4b0a      	ldr	r3, [pc, #40]	; (402b24 <sysclk_enable_usb+0x30>)
  402afc:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402afe:	4c0a      	ldr	r4, [pc, #40]	; (402b28 <sysclk_enable_usb+0x34>)
  402b00:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402b02:	2800      	cmp	r0, #0
  402b04:	d0fc      	beq.n	402b00 <sysclk_enable_usb+0xc>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402b06:	4b09      	ldr	r3, [pc, #36]	; (402b2c <sysclk_enable_usb+0x38>)
  402b08:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402b0a:	4a09      	ldr	r2, [pc, #36]	; (402b30 <sysclk_enable_usb+0x3c>)
  402b0c:	4b09      	ldr	r3, [pc, #36]	; (402b34 <sysclk_enable_usb+0x40>)
  402b0e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  402b10:	4c09      	ldr	r4, [pc, #36]	; (402b38 <sysclk_enable_usb+0x44>)
  402b12:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402b14:	2800      	cmp	r0, #0
  402b16:	d0fc      	beq.n	402b12 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_udpck_to_pllack(CONFIG_USBCLK_DIV - 1);
  402b18:	2003      	movs	r0, #3
  402b1a:	4b08      	ldr	r3, [pc, #32]	; (402b3c <sysclk_enable_usb+0x48>)
  402b1c:	4798      	blx	r3
		pmc_enable_udpck();
  402b1e:	4b08      	ldr	r3, [pc, #32]	; (402b40 <sysclk_enable_usb+0x4c>)
  402b20:	4798      	blx	r3
  402b22:	bd10      	pop	{r4, pc}
  402b24:	00402d29 	.word	0x00402d29
  402b28:	00402d7d 	.word	0x00402d7d
  402b2c:	00402d8d 	.word	0x00402d8d
  402b30:	200f3f01 	.word	0x200f3f01
  402b34:	400e0400 	.word	0x400e0400
  402b38:	00402d9d 	.word	0x00402d9d
  402b3c:	00402e5d 	.word	0x00402e5d
  402b40:	00402e6d 	.word	0x00402e6d

00402b44 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402b44:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402b46:	480e      	ldr	r0, [pc, #56]	; (402b80 <sysclk_init+0x3c>)
  402b48:	4b0e      	ldr	r3, [pc, #56]	; (402b84 <sysclk_init+0x40>)
  402b4a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402b4c:	2000      	movs	r0, #0
  402b4e:	213e      	movs	r1, #62	; 0x3e
  402b50:	4b0d      	ldr	r3, [pc, #52]	; (402b88 <sysclk_init+0x44>)
  402b52:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402b54:	4c0d      	ldr	r4, [pc, #52]	; (402b8c <sysclk_init+0x48>)
  402b56:	47a0      	blx	r4
  402b58:	2800      	cmp	r0, #0
  402b5a:	d0fc      	beq.n	402b56 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402b5c:	4b0c      	ldr	r3, [pc, #48]	; (402b90 <sysclk_init+0x4c>)
  402b5e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402b60:	4a0c      	ldr	r2, [pc, #48]	; (402b94 <sysclk_init+0x50>)
  402b62:	4b0d      	ldr	r3, [pc, #52]	; (402b98 <sysclk_init+0x54>)
  402b64:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  402b66:	4c0d      	ldr	r4, [pc, #52]	; (402b9c <sysclk_init+0x58>)
  402b68:	47a0      	blx	r4
  402b6a:	2800      	cmp	r0, #0
  402b6c:	d0fc      	beq.n	402b68 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402b6e:	2010      	movs	r0, #16
  402b70:	4b0b      	ldr	r3, [pc, #44]	; (402ba0 <sysclk_init+0x5c>)
  402b72:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402b74:	4b0b      	ldr	r3, [pc, #44]	; (402ba4 <sysclk_init+0x60>)
  402b76:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402b78:	480b      	ldr	r0, [pc, #44]	; (402ba8 <sysclk_init+0x64>)
  402b7a:	4b02      	ldr	r3, [pc, #8]	; (402b84 <sysclk_init+0x40>)
  402b7c:	4798      	blx	r3
  402b7e:	bd10      	pop	{r4, pc}
  402b80:	07270e00 	.word	0x07270e00
  402b84:	00403085 	.word	0x00403085
  402b88:	00402d29 	.word	0x00402d29
  402b8c:	00402d7d 	.word	0x00402d7d
  402b90:	00402d8d 	.word	0x00402d8d
  402b94:	200f3f01 	.word	0x200f3f01
  402b98:	400e0400 	.word	0x400e0400
  402b9c:	00402d9d 	.word	0x00402d9d
  402ba0:	00402cc5 	.word	0x00402cc5
  402ba4:	00402f75 	.word	0x00402f75
  402ba8:	05b8d800 	.word	0x05b8d800

00402bac <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  402bac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  402bae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402bb2:	4b40      	ldr	r3, [pc, #256]	; (402cb4 <board_init+0x108>)
  402bb4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  402bb6:	2009      	movs	r0, #9
  402bb8:	4c3f      	ldr	r4, [pc, #252]	; (402cb8 <board_init+0x10c>)
  402bba:	47a0      	blx	r4
  402bbc:	200a      	movs	r0, #10
  402bbe:	47a0      	blx	r4
  402bc0:	200b      	movs	r0, #11
  402bc2:	47a0      	blx	r4
  402bc4:	200c      	movs	r0, #12
  402bc6:	47a0      	blx	r4
  402bc8:	200d      	movs	r0, #13
  402bca:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bcc:	4b3b      	ldr	r3, [pc, #236]	; (402cbc <board_init+0x110>)
  402bce:	2201      	movs	r2, #1
  402bd0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402bd6:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402bd8:	4939      	ldr	r1, [pc, #228]	; (402cc0 <board_init+0x114>)
  402bda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402bde:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402be0:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402be4:	630a      	str	r2, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402be6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  402bea:	6108      	str	r0, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bec:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402bf0:	6308      	str	r0, [r1, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402bf2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402bf6:	6159      	str	r1, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402bf8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402bfc:	6659      	str	r1, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402bfe:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402c02:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402c04:	6219      	str	r1, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402c06:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402c0a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  402c0c:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  402c10:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402c12:	6f58      	ldr	r0, [r3, #116]	; 0x74
  402c14:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
  402c18:	6758      	str	r0, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402c1a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402c1e:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402c22:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c26:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402c2c:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402c32:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402c34:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402c3a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c3c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  402c40:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402c42:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402c44:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
  402c48:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
		base->PIO_REHLSR = mask;
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  402c4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  402c4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402c52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c56:	2202      	movs	r2, #2
  402c58:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c5a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402c5e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402c60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402c64:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402c66:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402c6c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c6e:	f021 0102 	bic.w	r1, r1, #2
  402c72:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402c74:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402c76:	f021 0102 	bic.w	r1, r1, #2
  402c7a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
		base->PIO_REHLSR = mask;
		break;
	default:
		base->PIO_AIMDR = mask;
  402c7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402c80:	2204      	movs	r2, #4
  402c82:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402c84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  402c88:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  402c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  402c8e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  402c90:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  402c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402c96:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402c98:	f021 0104 	bic.w	r1, r1, #4
  402c9c:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  402c9e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  402ca0:	f021 0104 	bic.w	r1, r1, #4
  402ca4:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  402ca6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  402caa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  402cae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  402cb2:	bd10      	pop	{r4, pc}
  402cb4:	400e1850 	.word	0x400e1850
  402cb8:	00402dad 	.word	0x00402dad
  402cbc:	400e0e00 	.word	0x400e0e00
  402cc0:	400e1400 	.word	0x400e1400

00402cc4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402cc4:	4b17      	ldr	r3, [pc, #92]	; (402d24 <pmc_switch_mck_to_pllack+0x60>)
  402cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402cc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  402ccc:	4310      	orrs	r0, r2
  402cce:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402cd2:	f013 0f08 	tst.w	r3, #8
  402cd6:	d109      	bne.n	402cec <pmc_switch_mck_to_pllack+0x28>
  402cd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402cdc:	4911      	ldr	r1, [pc, #68]	; (402d24 <pmc_switch_mck_to_pllack+0x60>)
  402cde:	e001      	b.n	402ce4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402ce0:	3b01      	subs	r3, #1
  402ce2:	d019      	beq.n	402d18 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402ce4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402ce6:	f012 0f08 	tst.w	r2, #8
  402cea:	d0f9      	beq.n	402ce0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402cec:	4b0d      	ldr	r3, [pc, #52]	; (402d24 <pmc_switch_mck_to_pllack+0x60>)
  402cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402cf0:	f022 0203 	bic.w	r2, r2, #3
  402cf4:	f042 0202 	orr.w	r2, r2, #2
  402cf8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402cfa:	6e98      	ldr	r0, [r3, #104]	; 0x68
  402cfc:	f010 0008 	ands.w	r0, r0, #8
  402d00:	d10c      	bne.n	402d1c <pmc_switch_mck_to_pllack+0x58>
  402d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402d06:	4907      	ldr	r1, [pc, #28]	; (402d24 <pmc_switch_mck_to_pllack+0x60>)
  402d08:	e001      	b.n	402d0e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402d0a:	3b01      	subs	r3, #1
  402d0c:	d008      	beq.n	402d20 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402d0e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402d10:	f012 0f08 	tst.w	r2, #8
  402d14:	d0f9      	beq.n	402d0a <pmc_switch_mck_to_pllack+0x46>
  402d16:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402d18:	2001      	movs	r0, #1
  402d1a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402d1c:	2000      	movs	r0, #0
  402d1e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402d20:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402d22:	4770      	bx	lr
  402d24:	400e0400 	.word	0x400e0400

00402d28 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402d28:	b138      	cbz	r0, 402d3a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d2a:	4911      	ldr	r1, [pc, #68]	; (402d70 <pmc_switch_mainck_to_xtal+0x48>)
  402d2c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402d2e:	4a11      	ldr	r2, [pc, #68]	; (402d74 <pmc_switch_mainck_to_xtal+0x4c>)
  402d30:	401a      	ands	r2, r3
  402d32:	4b11      	ldr	r3, [pc, #68]	; (402d78 <pmc_switch_mainck_to_xtal+0x50>)
  402d34:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402d36:	620b      	str	r3, [r1, #32]
  402d38:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d3a:	4a0d      	ldr	r2, [pc, #52]	; (402d70 <pmc_switch_mainck_to_xtal+0x48>)
  402d3c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402d3e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402d42:	f023 0303 	bic.w	r3, r3, #3
  402d46:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402d4a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402d4e:	0209      	lsls	r1, r1, #8
  402d50:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402d52:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402d54:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402d56:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402d58:	f013 0f01 	tst.w	r3, #1
  402d5c:	d0fb      	beq.n	402d56 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402d5e:	4a04      	ldr	r2, [pc, #16]	; (402d70 <pmc_switch_mainck_to_xtal+0x48>)
  402d60:	6a13      	ldr	r3, [r2, #32]
  402d62:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402d6a:	6213      	str	r3, [r2, #32]
  402d6c:	4770      	bx	lr
  402d6e:	bf00      	nop
  402d70:	400e0400 	.word	0x400e0400
  402d74:	fec8fffc 	.word	0xfec8fffc
  402d78:	01370002 	.word	0x01370002

00402d7c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402d7c:	4b02      	ldr	r3, [pc, #8]	; (402d88 <pmc_osc_is_ready_mainck+0xc>)
  402d7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402d80:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402d84:	4770      	bx	lr
  402d86:	bf00      	nop
  402d88:	400e0400 	.word	0x400e0400

00402d8c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402d8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402d90:	4b01      	ldr	r3, [pc, #4]	; (402d98 <pmc_disable_pllack+0xc>)
  402d92:	629a      	str	r2, [r3, #40]	; 0x28
  402d94:	4770      	bx	lr
  402d96:	bf00      	nop
  402d98:	400e0400 	.word	0x400e0400

00402d9c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402d9c:	4b02      	ldr	r3, [pc, #8]	; (402da8 <pmc_is_locked_pllack+0xc>)
  402d9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402da0:	f000 0002 	and.w	r0, r0, #2
  402da4:	4770      	bx	lr
  402da6:	bf00      	nop
  402da8:	400e0400 	.word	0x400e0400

00402dac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402dac:	282f      	cmp	r0, #47	; 0x2f
  402dae:	d820      	bhi.n	402df2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  402db0:	281f      	cmp	r0, #31
  402db2:	d80d      	bhi.n	402dd0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402db4:	4b12      	ldr	r3, [pc, #72]	; (402e00 <pmc_enable_periph_clk+0x54>)
  402db6:	699a      	ldr	r2, [r3, #24]
  402db8:	2301      	movs	r3, #1
  402dba:	4083      	lsls	r3, r0
  402dbc:	401a      	ands	r2, r3
  402dbe:	4293      	cmp	r3, r2
  402dc0:	d019      	beq.n	402df6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  402dc2:	2301      	movs	r3, #1
  402dc4:	fa03 f000 	lsl.w	r0, r3, r0
  402dc8:	4b0d      	ldr	r3, [pc, #52]	; (402e00 <pmc_enable_periph_clk+0x54>)
  402dca:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402dcc:	2000      	movs	r0, #0
  402dce:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402dd0:	4b0b      	ldr	r3, [pc, #44]	; (402e00 <pmc_enable_periph_clk+0x54>)
  402dd2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  402dd6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402dd8:	2301      	movs	r3, #1
  402dda:	4083      	lsls	r3, r0
  402ddc:	401a      	ands	r2, r3
  402dde:	4293      	cmp	r3, r2
  402de0:	d00b      	beq.n	402dfa <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  402de2:	2301      	movs	r3, #1
  402de4:	fa03 f000 	lsl.w	r0, r3, r0
  402de8:	4b05      	ldr	r3, [pc, #20]	; (402e00 <pmc_enable_periph_clk+0x54>)
  402dea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402dee:	2000      	movs	r0, #0
  402df0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402df2:	2001      	movs	r0, #1
  402df4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402df6:	2000      	movs	r0, #0
  402df8:	4770      	bx	lr
  402dfa:	2000      	movs	r0, #0
}
  402dfc:	4770      	bx	lr
  402dfe:	bf00      	nop
  402e00:	400e0400 	.word	0x400e0400

00402e04 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402e04:	282f      	cmp	r0, #47	; 0x2f
  402e06:	d820      	bhi.n	402e4a <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  402e08:	281f      	cmp	r0, #31
  402e0a:	d80d      	bhi.n	402e28 <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402e0c:	4b12      	ldr	r3, [pc, #72]	; (402e58 <pmc_disable_periph_clk+0x54>)
  402e0e:	699a      	ldr	r2, [r3, #24]
  402e10:	2301      	movs	r3, #1
  402e12:	4083      	lsls	r3, r0
  402e14:	401a      	ands	r2, r3
  402e16:	4293      	cmp	r3, r2
  402e18:	d119      	bne.n	402e4e <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  402e1a:	2301      	movs	r3, #1
  402e1c:	fa03 f000 	lsl.w	r0, r3, r0
  402e20:	4b0d      	ldr	r3, [pc, #52]	; (402e58 <pmc_disable_periph_clk+0x54>)
  402e22:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402e24:	2000      	movs	r0, #0
  402e26:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402e28:	4b0b      	ldr	r3, [pc, #44]	; (402e58 <pmc_disable_periph_clk+0x54>)
  402e2a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  402e2e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402e30:	2301      	movs	r3, #1
  402e32:	4083      	lsls	r3, r0
  402e34:	401a      	ands	r2, r3
  402e36:	4293      	cmp	r3, r2
  402e38:	d10b      	bne.n	402e52 <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  402e3a:	2301      	movs	r3, #1
  402e3c:	fa03 f000 	lsl.w	r0, r3, r0
  402e40:	4b05      	ldr	r3, [pc, #20]	; (402e58 <pmc_disable_periph_clk+0x54>)
  402e42:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  402e46:	2000      	movs	r0, #0
  402e48:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402e4a:	2001      	movs	r0, #1
  402e4c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  402e4e:	2000      	movs	r0, #0
  402e50:	4770      	bx	lr
  402e52:	2000      	movs	r0, #0
}
  402e54:	4770      	bx	lr
  402e56:	bf00      	nop
  402e58:	400e0400 	.word	0x400e0400

00402e5c <pmc_switch_udpck_to_pllack>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
  402e5c:	0200      	lsls	r0, r0, #8
  402e5e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  402e62:	4b01      	ldr	r3, [pc, #4]	; (402e68 <pmc_switch_udpck_to_pllack+0xc>)
  402e64:	6398      	str	r0, [r3, #56]	; 0x38
  402e66:	4770      	bx	lr
  402e68:	400e0400 	.word	0x400e0400

00402e6c <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
  402e6c:	2280      	movs	r2, #128	; 0x80
  402e6e:	4b01      	ldr	r3, [pc, #4]	; (402e74 <pmc_enable_udpck+0x8>)
  402e70:	601a      	str	r2, [r3, #0]
  402e72:	4770      	bx	lr
  402e74:	400e0400 	.word	0x400e0400

00402e78 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  402e78:	4b03      	ldr	r3, [pc, #12]	; (402e88 <pmc_set_fast_startup_input+0x10>)
  402e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402e7c:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  402e80:	4302      	orrs	r2, r0
  402e82:	671a      	str	r2, [r3, #112]	; 0x70
  402e84:	4770      	bx	lr
  402e86:	bf00      	nop
  402e88:	400e0400 	.word	0x400e0400

00402e8c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  402e8c:	4b02      	ldr	r3, [pc, #8]	; (402e98 <pmc_is_wakeup_clocks_restored+0xc>)
  402e8e:	7818      	ldrb	r0, [r3, #0]
}
  402e90:	f080 0001 	eor.w	r0, r0, #1
  402e94:	4770      	bx	lr
  402e96:	bf00      	nop
  402e98:	20000bca 	.word	0x20000bca

00402e9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402e9c:	e7fe      	b.n	402e9c <Dummy_Handler>
  402e9e:	bf00      	nop

00402ea0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402ea0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402ea2:	4b25      	ldr	r3, [pc, #148]	; (402f38 <Reset_Handler+0x98>)
  402ea4:	4a25      	ldr	r2, [pc, #148]	; (402f3c <Reset_Handler+0x9c>)
  402ea6:	429a      	cmp	r2, r3
  402ea8:	d003      	beq.n	402eb2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  402eaa:	4b25      	ldr	r3, [pc, #148]	; (402f40 <Reset_Handler+0xa0>)
  402eac:	4a22      	ldr	r2, [pc, #136]	; (402f38 <Reset_Handler+0x98>)
  402eae:	429a      	cmp	r2, r3
  402eb0:	d304      	bcc.n	402ebc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402eb2:	4b24      	ldr	r3, [pc, #144]	; (402f44 <Reset_Handler+0xa4>)
  402eb4:	4a24      	ldr	r2, [pc, #144]	; (402f48 <Reset_Handler+0xa8>)
  402eb6:	429a      	cmp	r2, r3
  402eb8:	d30f      	bcc.n	402eda <Reset_Handler+0x3a>
  402eba:	e01a      	b.n	402ef2 <Reset_Handler+0x52>
  402ebc:	4b23      	ldr	r3, [pc, #140]	; (402f4c <Reset_Handler+0xac>)
  402ebe:	4c24      	ldr	r4, [pc, #144]	; (402f50 <Reset_Handler+0xb0>)
  402ec0:	1ae4      	subs	r4, r4, r3
  402ec2:	f024 0403 	bic.w	r4, r4, #3
  402ec6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402ec8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  402eca:	481b      	ldr	r0, [pc, #108]	; (402f38 <Reset_Handler+0x98>)
  402ecc:	491b      	ldr	r1, [pc, #108]	; (402f3c <Reset_Handler+0x9c>)
  402ece:	585a      	ldr	r2, [r3, r1]
  402ed0:	501a      	str	r2, [r3, r0]
  402ed2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402ed4:	42a3      	cmp	r3, r4
  402ed6:	d1fa      	bne.n	402ece <Reset_Handler+0x2e>
  402ed8:	e7eb      	b.n	402eb2 <Reset_Handler+0x12>
  402eda:	4b1e      	ldr	r3, [pc, #120]	; (402f54 <Reset_Handler+0xb4>)
  402edc:	491e      	ldr	r1, [pc, #120]	; (402f58 <Reset_Handler+0xb8>)
  402ede:	1ac9      	subs	r1, r1, r3
  402ee0:	f021 0103 	bic.w	r1, r1, #3
  402ee4:	1d1a      	adds	r2, r3, #4
  402ee6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  402ee8:	2200      	movs	r2, #0
  402eea:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402eee:	428b      	cmp	r3, r1
  402ef0:	d1fb      	bne.n	402eea <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402ef2:	4b1a      	ldr	r3, [pc, #104]	; (402f5c <Reset_Handler+0xbc>)
  402ef4:	4a1a      	ldr	r2, [pc, #104]	; (402f60 <Reset_Handler+0xc0>)
  402ef6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402efa:	609a      	str	r2, [r3, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402efc:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f00:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f02:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402f06:	2100      	movs	r1, #0
  402f08:	4b16      	ldr	r3, [pc, #88]	; (402f64 <Reset_Handler+0xc4>)
  402f0a:	7019      	strb	r1, [r3, #0]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  402f0c:	4b16      	ldr	r3, [pc, #88]	; (402f68 <Reset_Handler+0xc8>)
  402f0e:	6819      	ldr	r1, [r3, #0]
  402f10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  402f14:	6019      	str	r1, [r3, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  402f16:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  402f1a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f1e:	b92a      	cbnz	r2, 402f2c <Reset_Handler+0x8c>
		cpu_irq_enable();
  402f20:	2201      	movs	r2, #1
  402f22:	4b10      	ldr	r3, [pc, #64]	; (402f64 <Reset_Handler+0xc4>)
  402f24:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402f2a:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  402f2c:	4b0f      	ldr	r3, [pc, #60]	; (402f6c <Reset_Handler+0xcc>)
  402f2e:	4798      	blx	r3

	/* Branch to main function */
	main();
  402f30:	4b0f      	ldr	r3, [pc, #60]	; (402f70 <Reset_Handler+0xd0>)
  402f32:	4798      	blx	r3
  402f34:	e7fe      	b.n	402f34 <Reset_Handler+0x94>
  402f36:	bf00      	nop
  402f38:	20000000 	.word	0x20000000
  402f3c:	0040d530 	.word	0x0040d530
  402f40:	20000994 	.word	0x20000994
  402f44:	2000c7c0 	.word	0x2000c7c0
  402f48:	20000994 	.word	0x20000994
  402f4c:	20000004 	.word	0x20000004
  402f50:	20000997 	.word	0x20000997
  402f54:	20000990 	.word	0x20000990
  402f58:	2000c7bb 	.word	0x2000c7bb
  402f5c:	e000ed00 	.word	0xe000ed00
  402f60:	00400000 	.word	0x00400000
  402f64:	200000e8 	.word	0x200000e8
  402f68:	e000ed88 	.word	0xe000ed88
  402f6c:	0040359d 	.word	0x0040359d
  402f70:	00403441 	.word	0x00403441

00402f74 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402f74:	4b3c      	ldr	r3, [pc, #240]	; (403068 <SystemCoreClockUpdate+0xf4>)
  402f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402f78:	f003 0303 	and.w	r3, r3, #3
  402f7c:	2b01      	cmp	r3, #1
  402f7e:	d00f      	beq.n	402fa0 <SystemCoreClockUpdate+0x2c>
  402f80:	b113      	cbz	r3, 402f88 <SystemCoreClockUpdate+0x14>
  402f82:	2b02      	cmp	r3, #2
  402f84:	d029      	beq.n	402fda <SystemCoreClockUpdate+0x66>
  402f86:	e057      	b.n	403038 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402f88:	4b38      	ldr	r3, [pc, #224]	; (40306c <SystemCoreClockUpdate+0xf8>)
  402f8a:	695b      	ldr	r3, [r3, #20]
  402f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402f90:	bf14      	ite	ne
  402f92:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402f96:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402f9a:	4b35      	ldr	r3, [pc, #212]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402f9c:	601a      	str	r2, [r3, #0]
  402f9e:	e04b      	b.n	403038 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402fa0:	4b31      	ldr	r3, [pc, #196]	; (403068 <SystemCoreClockUpdate+0xf4>)
  402fa2:	6a1b      	ldr	r3, [r3, #32]
  402fa4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402fa8:	d003      	beq.n	402fb2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402faa:	4a32      	ldr	r2, [pc, #200]	; (403074 <SystemCoreClockUpdate+0x100>)
  402fac:	4b30      	ldr	r3, [pc, #192]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402fae:	601a      	str	r2, [r3, #0]
  402fb0:	e042      	b.n	403038 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402fb2:	4a31      	ldr	r2, [pc, #196]	; (403078 <SystemCoreClockUpdate+0x104>)
  402fb4:	4b2e      	ldr	r3, [pc, #184]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402fb6:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402fb8:	4b2b      	ldr	r3, [pc, #172]	; (403068 <SystemCoreClockUpdate+0xf4>)
  402fba:	6a1b      	ldr	r3, [r3, #32]
  402fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402fc0:	2b10      	cmp	r3, #16
  402fc2:	d002      	beq.n	402fca <SystemCoreClockUpdate+0x56>
  402fc4:	2b20      	cmp	r3, #32
  402fc6:	d004      	beq.n	402fd2 <SystemCoreClockUpdate+0x5e>
  402fc8:	e036      	b.n	403038 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  402fca:	4a2c      	ldr	r2, [pc, #176]	; (40307c <SystemCoreClockUpdate+0x108>)
  402fcc:	4b28      	ldr	r3, [pc, #160]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402fce:	601a      	str	r2, [r3, #0]
				break;
  402fd0:	e032      	b.n	403038 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  402fd2:	4a28      	ldr	r2, [pc, #160]	; (403074 <SystemCoreClockUpdate+0x100>)
  402fd4:	4b26      	ldr	r3, [pc, #152]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402fd6:	601a      	str	r2, [r3, #0]
				break;
  402fd8:	e02e      	b.n	403038 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  402fda:	4b23      	ldr	r3, [pc, #140]	; (403068 <SystemCoreClockUpdate+0xf4>)
  402fdc:	6a1b      	ldr	r3, [r3, #32]
  402fde:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402fe2:	d003      	beq.n	402fec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402fe4:	4a23      	ldr	r2, [pc, #140]	; (403074 <SystemCoreClockUpdate+0x100>)
  402fe6:	4b22      	ldr	r3, [pc, #136]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402fe8:	601a      	str	r2, [r3, #0]
  402fea:	e012      	b.n	403012 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402fec:	4a22      	ldr	r2, [pc, #136]	; (403078 <SystemCoreClockUpdate+0x104>)
  402fee:	4b20      	ldr	r3, [pc, #128]	; (403070 <SystemCoreClockUpdate+0xfc>)
  402ff0:	601a      	str	r2, [r3, #0]

			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402ff2:	4b1d      	ldr	r3, [pc, #116]	; (403068 <SystemCoreClockUpdate+0xf4>)
  402ff4:	6a1b      	ldr	r3, [r3, #32]
  402ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ffa:	2b10      	cmp	r3, #16
  402ffc:	d002      	beq.n	403004 <SystemCoreClockUpdate+0x90>
  402ffe:	2b20      	cmp	r3, #32
  403000:	d004      	beq.n	40300c <SystemCoreClockUpdate+0x98>
  403002:	e006      	b.n	403012 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403004:	4a1d      	ldr	r2, [pc, #116]	; (40307c <SystemCoreClockUpdate+0x108>)
  403006:	4b1a      	ldr	r3, [pc, #104]	; (403070 <SystemCoreClockUpdate+0xfc>)
  403008:	601a      	str	r2, [r3, #0]
				break;
  40300a:	e002      	b.n	403012 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40300c:	4a19      	ldr	r2, [pc, #100]	; (403074 <SystemCoreClockUpdate+0x100>)
  40300e:	4b18      	ldr	r3, [pc, #96]	; (403070 <SystemCoreClockUpdate+0xfc>)
  403010:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  403012:	4b15      	ldr	r3, [pc, #84]	; (403068 <SystemCoreClockUpdate+0xf4>)
  403014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403016:	f003 0303 	and.w	r3, r3, #3
  40301a:	2b02      	cmp	r3, #2
  40301c:	d10c      	bne.n	403038 <SystemCoreClockUpdate+0xc4>
		{
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40301e:	4b12      	ldr	r3, [pc, #72]	; (403068 <SystemCoreClockUpdate+0xf4>)
  403020:	6a98      	ldr	r0, [r3, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403022:	6a99      	ldr	r1, [r3, #40]	; 0x28
  403024:	4b12      	ldr	r3, [pc, #72]	; (403070 <SystemCoreClockUpdate+0xfc>)
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
		{
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  403026:	f3c0 400a 	ubfx	r0, r0, #16, #11
  40302a:	681a      	ldr	r2, [r3, #0]
  40302c:	fb00 2202 	mla	r2, r0, r2, r2
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  403030:	b2c9      	uxtb	r1, r1
  403032:	fbb2 f2f1 	udiv	r2, r2, r1
  403036:	601a      	str	r2, [r3, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403038:	4b0b      	ldr	r3, [pc, #44]	; (403068 <SystemCoreClockUpdate+0xf4>)
  40303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40303c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403040:	2b70      	cmp	r3, #112	; 0x70
  403042:	d107      	bne.n	403054 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  403044:	4b0a      	ldr	r3, [pc, #40]	; (403070 <SystemCoreClockUpdate+0xfc>)
  403046:	681a      	ldr	r2, [r3, #0]
  403048:	490d      	ldr	r1, [pc, #52]	; (403080 <SystemCoreClockUpdate+0x10c>)
  40304a:	fba1 0202 	umull	r0, r2, r1, r2
  40304e:	0852      	lsrs	r2, r2, #1
  403050:	601a      	str	r2, [r3, #0]
  403052:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  403054:	4b04      	ldr	r3, [pc, #16]	; (403068 <SystemCoreClockUpdate+0xf4>)
  403056:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403058:	4b05      	ldr	r3, [pc, #20]	; (403070 <SystemCoreClockUpdate+0xfc>)
  40305a:	f3c1 1102 	ubfx	r1, r1, #4, #3
  40305e:	681a      	ldr	r2, [r3, #0]
  403060:	40ca      	lsrs	r2, r1
  403062:	601a      	str	r2, [r3, #0]
  403064:	4770      	bx	lr
  403066:	bf00      	nop
  403068:	400e0400 	.word	0x400e0400
  40306c:	400e1810 	.word	0x400e1810
  403070:	200000ec 	.word	0x200000ec
  403074:	00b71b00 	.word	0x00b71b00
  403078:	003d0900 	.word	0x003d0900
  40307c:	007a1200 	.word	0x007a1200
  403080:	aaaaaaab 	.word	0xaaaaaaab

00403084 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403084:	4b12      	ldr	r3, [pc, #72]	; (4030d0 <system_init_flash+0x4c>)
  403086:	4298      	cmp	r0, r3
  403088:	d804      	bhi.n	403094 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40308a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40308e:	4b11      	ldr	r3, [pc, #68]	; (4030d4 <system_init_flash+0x50>)
  403090:	601a      	str	r2, [r3, #0]
  403092:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  403094:	4b10      	ldr	r3, [pc, #64]	; (4030d8 <system_init_flash+0x54>)
  403096:	4298      	cmp	r0, r3
  403098:	d803      	bhi.n	4030a2 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40309a:	4a10      	ldr	r2, [pc, #64]	; (4030dc <system_init_flash+0x58>)
  40309c:	4b0d      	ldr	r3, [pc, #52]	; (4030d4 <system_init_flash+0x50>)
  40309e:	601a      	str	r2, [r3, #0]
  4030a0:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4030a2:	4b0f      	ldr	r3, [pc, #60]	; (4030e0 <system_init_flash+0x5c>)
  4030a4:	4298      	cmp	r0, r3
  4030a6:	d803      	bhi.n	4030b0 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4030a8:	4a0e      	ldr	r2, [pc, #56]	; (4030e4 <system_init_flash+0x60>)
  4030aa:	4b0a      	ldr	r3, [pc, #40]	; (4030d4 <system_init_flash+0x50>)
  4030ac:	601a      	str	r2, [r3, #0]
  4030ae:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4030b0:	4b0d      	ldr	r3, [pc, #52]	; (4030e8 <system_init_flash+0x64>)
  4030b2:	4298      	cmp	r0, r3
  4030b4:	d803      	bhi.n	4030be <system_init_flash+0x3a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4030b6:	4a0d      	ldr	r2, [pc, #52]	; (4030ec <system_init_flash+0x68>)
  4030b8:	4b06      	ldr	r3, [pc, #24]	; (4030d4 <system_init_flash+0x50>)
  4030ba:	601a      	str	r2, [r3, #0]
  4030bc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4030be:	4b0c      	ldr	r3, [pc, #48]	; (4030f0 <system_init_flash+0x6c>)
  4030c0:	4298      	cmp	r0, r3
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4030c2:	bf94      	ite	ls
  4030c4:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4030c8:	4a0a      	ldrhi	r2, [pc, #40]	; (4030f4 <system_init_flash+0x70>)
  4030ca:	4b02      	ldr	r3, [pc, #8]	; (4030d4 <system_init_flash+0x50>)
  4030cc:	601a      	str	r2, [r3, #0]
  4030ce:	4770      	bx	lr
  4030d0:	01312cff 	.word	0x01312cff
  4030d4:	400e0a00 	.word	0x400e0a00
  4030d8:	026259ff 	.word	0x026259ff
  4030dc:	04000100 	.word	0x04000100
  4030e0:	039386ff 	.word	0x039386ff
  4030e4:	04000200 	.word	0x04000200
  4030e8:	04c4b3ff 	.word	0x04c4b3ff
  4030ec:	04000300 	.word	0x04000300
  4030f0:	05f5e0ff 	.word	0x05f5e0ff
  4030f4:	04000500 	.word	0x04000500

004030f8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4030f8:	4b09      	ldr	r3, [pc, #36]	; (403120 <_sbrk+0x28>)
  4030fa:	681b      	ldr	r3, [r3, #0]
  4030fc:	b913      	cbnz	r3, 403104 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4030fe:	4a09      	ldr	r2, [pc, #36]	; (403124 <_sbrk+0x2c>)
  403100:	4b07      	ldr	r3, [pc, #28]	; (403120 <_sbrk+0x28>)
  403102:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403104:	4b06      	ldr	r3, [pc, #24]	; (403120 <_sbrk+0x28>)
  403106:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403108:	181a      	adds	r2, r3, r0
  40310a:	4907      	ldr	r1, [pc, #28]	; (403128 <_sbrk+0x30>)
  40310c:	4291      	cmp	r1, r2
  40310e:	db04      	blt.n	40311a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403110:	4610      	mov	r0, r2
  403112:	4a03      	ldr	r2, [pc, #12]	; (403120 <_sbrk+0x28>)
  403114:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403116:	4618      	mov	r0, r3
  403118:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40311a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40311e:	4770      	bx	lr
  403120:	20000bcc 	.word	0x20000bcc
  403124:	2000f7c0 	.word	0x2000f7c0
  403128:	2001fffc 	.word	0x2001fffc

0040312c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40312c:	f04f 30ff 	mov.w	r0, #4294967295
  403130:	4770      	bx	lr
  403132:	bf00      	nop

00403134 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  403134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  403138:	604b      	str	r3, [r1, #4]

	return 0;
}
  40313a:	2000      	movs	r0, #0
  40313c:	4770      	bx	lr
  40313e:	bf00      	nop

00403140 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  403140:	2001      	movs	r0, #1
  403142:	4770      	bx	lr

00403144 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403144:	2000      	movs	r0, #0
  403146:	4770      	bx	lr

00403148 <Trigger_Step>:
volatile uint16_t tertiary_count[HEAD_STEPS_MAX];

void parse_gcode(const char *line, uint8_t length);

static void Trigger_Step(uint32_t id, uint32_t pin)
{
  403148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int32_t head_step = pio_get(COUNTER_PIO, PIO_INPUT, COUNTER_DIR_PIN) ? 1 : -1;
  40314c:	482e      	ldr	r0, [pc, #184]	; (403208 <Trigger_Step+0xc0>)
  40314e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  403156:	4b2d      	ldr	r3, [pc, #180]	; (40320c <Trigger_Step+0xc4>)
  403158:	4798      	blx	r3
  40315a:	2800      	cmp	r0, #0
  40315c:	bf0c      	ite	eq
  40315e:	f04f 34ff 	moveq.w	r4, #4294967295
  403162:	2401      	movne	r4, #1

	if (enable_count)
  403164:	4b2a      	ldr	r3, [pc, #168]	; (403210 <Trigger_Step+0xc8>)
  403166:	781b      	ldrb	r3, [r3, #0]
  403168:	f013 0fff 	tst.w	r3, #255	; 0xff
  40316c:	d034      	beq.n	4031d8 <Trigger_Step+0x90>
	{
		primary_count[head_position] += (uint16_t)tc_read_cv(COUNTER_TC, PRIMARY_TC_CHANNEL);
  40316e:	4f29      	ldr	r7, [pc, #164]	; (403214 <Trigger_Step+0xcc>)
  403170:	f8d7 9000 	ldr.w	r9, [r7]
  403174:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 403228 <Trigger_Step+0xe0>
  403178:	f838 a019 	ldrh.w	sl, [r8, r9, lsl #1]
  40317c:	fa1f fa8a 	uxth.w	sl, sl
  403180:	4d25      	ldr	r5, [pc, #148]	; (403218 <Trigger_Step+0xd0>)
  403182:	4628      	mov	r0, r5
  403184:	2101      	movs	r1, #1
  403186:	4e25      	ldr	r6, [pc, #148]	; (40321c <Trigger_Step+0xd4>)
  403188:	47b0      	blx	r6
  40318a:	4450      	add	r0, sl
  40318c:	fa1f fa80 	uxth.w	sl, r0
  403190:	f828 a019 	strh.w	sl, [r8, r9, lsl #1]
		secondary_count[head_position] += (uint16_t)tc_read_cv(COUNTER_TC, SECONDARY_TC_CHANNEL);
  403194:	f8d7 9000 	ldr.w	r9, [r7]
  403198:	f8df 8090 	ldr.w	r8, [pc, #144]	; 40322c <Trigger_Step+0xe4>
  40319c:	f838 a019 	ldrh.w	sl, [r8, r9, lsl #1]
  4031a0:	fa1f fa8a 	uxth.w	sl, sl
  4031a4:	4628      	mov	r0, r5
  4031a6:	2102      	movs	r1, #2
  4031a8:	47b0      	blx	r6
  4031aa:	4450      	add	r0, sl
  4031ac:	fa1f fa80 	uxth.w	sl, r0
  4031b0:	f828 a019 	strh.w	sl, [r8, r9, lsl #1]
		tertiary_count[head_position] += (uint16_t)tc_read_cv(COUNTER_TC, TERTIARY_TC_CHANNEL);
  4031b4:	f8d7 8000 	ldr.w	r8, [r7]
  4031b8:	4f19      	ldr	r7, [pc, #100]	; (403220 <Trigger_Step+0xd8>)
  4031ba:	f837 9018 	ldrh.w	r9, [r7, r8, lsl #1]
  4031be:	fa1f f989 	uxth.w	r9, r9
  4031c2:	4628      	mov	r0, r5
  4031c4:	2103      	movs	r1, #3
  4031c6:	47b0      	blx	r6
  4031c8:	4448      	add	r0, r9
  4031ca:	fa1f f980 	uxth.w	r9, r0
  4031ce:	f827 9018 	strh.w	r9, [r7, r8, lsl #1]
		tc_sync_trigger(COUNTER_TC);
  4031d2:	4628      	mov	r0, r5
  4031d4:	4b13      	ldr	r3, [pc, #76]	; (403224 <Trigger_Step+0xdc>)
  4031d6:	4798      	blx	r3
	}

	head_position += head_step;
  4031d8:	4b0e      	ldr	r3, [pc, #56]	; (403214 <Trigger_Step+0xcc>)
  4031da:	681a      	ldr	r2, [r3, #0]
  4031dc:	4414      	add	r4, r2
  4031de:	601c      	str	r4, [r3, #0]

	// Check limits and loop around the buffer if we overflow
	if (head_position < 0)
  4031e0:	681b      	ldr	r3, [r3, #0]
  4031e2:	2b00      	cmp	r3, #0
  4031e4:	da04      	bge.n	4031f0 <Trigger_Step+0xa8>
		head_position += HEAD_STEPS_MAX;
  4031e6:	4b0b      	ldr	r3, [pc, #44]	; (403214 <Trigger_Step+0xcc>)
  4031e8:	681a      	ldr	r2, [r3, #0]
  4031ea:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
  4031ee:	601a      	str	r2, [r3, #0]
	
	if (head_position >= HEAD_STEPS_MAX)
  4031f0:	4b08      	ldr	r3, [pc, #32]	; (403214 <Trigger_Step+0xcc>)
  4031f2:	681b      	ldr	r3, [r3, #0]
  4031f4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
  4031f8:	db04      	blt.n	403204 <Trigger_Step+0xbc>
		head_position -= HEAD_STEPS_MAX;
  4031fa:	4b06      	ldr	r3, [pc, #24]	; (403214 <Trigger_Step+0xcc>)
  4031fc:	681a      	ldr	r2, [r3, #0]
  4031fe:	f5a2 52fa 	sub.w	r2, r2, #8000	; 0x1f40
  403202:	601a      	str	r2, [r3, #0]
  403204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403208:	400e0e00 	.word	0x400e0e00
  40320c:	004028e5 	.word	0x004028e5
  403210:	20000bd0 	.word	0x20000bd0
  403214:	20000c38 	.word	0x20000c38
  403218:	40090000 	.word	0x40090000
  40321c:	00402aed 	.word	0x00402aed
  403220:	2000893c 	.word	0x2000893c
  403224:	00402add 	.word	0x00402add
  403228:	20000c3c 	.word	0x20000c3c
  40322c:	20004abc 	.word	0x20004abc

00403230 <parse_gcode>:
}

void parse_gcode(const char *line, uint8_t length)
{
  403230:	b5f0      	push	{r4, r5, r6, r7, lr}
  403232:	b089      	sub	sp, #36	; 0x24
  403234:	4604      	mov	r4, r0
	// Really hacky fake-gcode interpreter
	// This is only a prototype so it doesn't need to be robust.
	// Assumes that there is exactly one command per line.

	// Report current position
	if (!strcmp(line, "M1001"))
  403236:	4962      	ldr	r1, [pc, #392]	; (4033c0 <parse_gcode+0x190>)
  403238:	4b62      	ldr	r3, [pc, #392]	; (4033c4 <parse_gcode+0x194>)
  40323a:	4798      	blx	r3
  40323c:	b938      	cbnz	r0, 40324e <parse_gcode+0x1e>
	{
		printf("ok\n");
  40323e:	4862      	ldr	r0, [pc, #392]	; (4033c8 <parse_gcode+0x198>)
  403240:	4c62      	ldr	r4, [pc, #392]	; (4033cc <parse_gcode+0x19c>)
  403242:	47a0      	blx	r4
		printf("%"PRId32"\n", head_position);
  403244:	4b62      	ldr	r3, [pc, #392]	; (4033d0 <parse_gcode+0x1a0>)
  403246:	6819      	ldr	r1, [r3, #0]
  403248:	4862      	ldr	r0, [pc, #392]	; (4033d4 <parse_gcode+0x1a4>)
  40324a:	47a0      	blx	r4
		return;
  40324c:	e0b5      	b.n	4033ba <parse_gcode+0x18a>
	}

	// Reset current position
	if (!strcmp(line, "M1002"))
  40324e:	4620      	mov	r0, r4
  403250:	4961      	ldr	r1, [pc, #388]	; (4033d8 <parse_gcode+0x1a8>)
  403252:	4b5c      	ldr	r3, [pc, #368]	; (4033c4 <parse_gcode+0x194>)
  403254:	4798      	blx	r3
  403256:	b930      	cbnz	r0, 403266 <parse_gcode+0x36>
	{
		head_position = 0;
  403258:	2200      	movs	r2, #0
  40325a:	4b5d      	ldr	r3, [pc, #372]	; (4033d0 <parse_gcode+0x1a0>)
  40325c:	601a      	str	r2, [r3, #0]
		printf("ok\n");
  40325e:	485a      	ldr	r0, [pc, #360]	; (4033c8 <parse_gcode+0x198>)
  403260:	4b5a      	ldr	r3, [pc, #360]	; (4033cc <parse_gcode+0x19c>)
  403262:	4798      	blx	r3
		return;
  403264:	e0a9      	b.n	4033ba <parse_gcode+0x18a>
	}
	
	// Enable counting
	if (!strcmp(line, "M1003"))
  403266:	4620      	mov	r0, r4
  403268:	495c      	ldr	r1, [pc, #368]	; (4033dc <parse_gcode+0x1ac>)
  40326a:	4b56      	ldr	r3, [pc, #344]	; (4033c4 <parse_gcode+0x194>)
  40326c:	4798      	blx	r3
  40326e:	b990      	cbnz	r0, 403296 <parse_gcode+0x66>
	{
		if (enable_count)
  403270:	4b5b      	ldr	r3, [pc, #364]	; (4033e0 <parse_gcode+0x1b0>)
  403272:	781b      	ldrb	r3, [r3, #0]
  403274:	f013 0fff 	tst.w	r3, #255	; 0xff
  403278:	d003      	beq.n	403282 <parse_gcode+0x52>
		{
			printf("error: counter is already active\n");
  40327a:	485a      	ldr	r0, [pc, #360]	; (4033e4 <parse_gcode+0x1b4>)
  40327c:	4b53      	ldr	r3, [pc, #332]	; (4033cc <parse_gcode+0x19c>)
  40327e:	4798      	blx	r3
			return;
  403280:	e09b      	b.n	4033ba <parse_gcode+0x18a>
		}

		tc_sync_trigger(COUNTER_TC);
  403282:	4859      	ldr	r0, [pc, #356]	; (4033e8 <parse_gcode+0x1b8>)
  403284:	4b59      	ldr	r3, [pc, #356]	; (4033ec <parse_gcode+0x1bc>)
  403286:	4798      	blx	r3
		enable_count = true;
  403288:	2201      	movs	r2, #1
  40328a:	4b55      	ldr	r3, [pc, #340]	; (4033e0 <parse_gcode+0x1b0>)
  40328c:	701a      	strb	r2, [r3, #0]
		printf("ok\n");
  40328e:	484e      	ldr	r0, [pc, #312]	; (4033c8 <parse_gcode+0x198>)
  403290:	4b4e      	ldr	r3, [pc, #312]	; (4033cc <parse_gcode+0x19c>)
  403292:	4798      	blx	r3
		return;
  403294:	e091      	b.n	4033ba <parse_gcode+0x18a>
	}
	
	// Disable counting
	if (!strcmp(line, "M1004"))
  403296:	4620      	mov	r0, r4
  403298:	4955      	ldr	r1, [pc, #340]	; (4033f0 <parse_gcode+0x1c0>)
  40329a:	4b4a      	ldr	r3, [pc, #296]	; (4033c4 <parse_gcode+0x194>)
  40329c:	4798      	blx	r3
  40329e:	b978      	cbnz	r0, 4032c0 <parse_gcode+0x90>
	{
		if (!enable_count)
  4032a0:	4b4f      	ldr	r3, [pc, #316]	; (4033e0 <parse_gcode+0x1b0>)
  4032a2:	781b      	ldrb	r3, [r3, #0]
  4032a4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4032a8:	d103      	bne.n	4032b2 <parse_gcode+0x82>
		{
			printf("error: counter is not active\n");
  4032aa:	4852      	ldr	r0, [pc, #328]	; (4033f4 <parse_gcode+0x1c4>)
  4032ac:	4b47      	ldr	r3, [pc, #284]	; (4033cc <parse_gcode+0x19c>)
  4032ae:	4798      	blx	r3
			return;
  4032b0:	e083      	b.n	4033ba <parse_gcode+0x18a>
		}

		enable_count = false;
  4032b2:	2200      	movs	r2, #0
  4032b4:	4b4a      	ldr	r3, [pc, #296]	; (4033e0 <parse_gcode+0x1b0>)
  4032b6:	701a      	strb	r2, [r3, #0]
		printf("ok\n");
  4032b8:	4843      	ldr	r0, [pc, #268]	; (4033c8 <parse_gcode+0x198>)
  4032ba:	4b44      	ldr	r3, [pc, #272]	; (4033cc <parse_gcode+0x19c>)
  4032bc:	4798      	blx	r3
		return;
  4032be:	e07c      	b.n	4033ba <parse_gcode+0x18a>
	}
	
	// Read primary counts
	if (!strncmp(line, "M1005", 5))
  4032c0:	4620      	mov	r0, r4
  4032c2:	494d      	ldr	r1, [pc, #308]	; (4033f8 <parse_gcode+0x1c8>)
  4032c4:	2205      	movs	r2, #5
  4032c6:	4b4d      	ldr	r3, [pc, #308]	; (4033fc <parse_gcode+0x1cc>)
  4032c8:	4798      	blx	r3
  4032ca:	2800      	cmp	r0, #0
  4032cc:	d150      	bne.n	403370 <parse_gcode+0x140>
	{
		if (enable_count)
  4032ce:	4b44      	ldr	r3, [pc, #272]	; (4033e0 <parse_gcode+0x1b0>)
  4032d0:	781b      	ldrb	r3, [r3, #0]
  4032d2:	f013 0fff 	tst.w	r3, #255	; 0xff
  4032d6:	d003      	beq.n	4032e0 <parse_gcode+0xb0>
		{
			printf("error: cannot read counter while it is active\n");
  4032d8:	4849      	ldr	r0, [pc, #292]	; (403400 <parse_gcode+0x1d0>)
  4032da:	4b3c      	ldr	r3, [pc, #240]	; (4033cc <parse_gcode+0x19c>)
  4032dc:	4798      	blx	r3
			return;
  4032de:	e06c      	b.n	4033ba <parse_gcode+0x18a>
		}

		int32_t channel, start, end;
		if (sscanf(line, "M1005 %"SCNd32" %"SCNd32" %"SCNd32, &channel, &start, &end) != 3)
  4032e0:	ab04      	add	r3, sp, #16
  4032e2:	9300      	str	r3, [sp, #0]
  4032e4:	4620      	mov	r0, r4
  4032e6:	4947      	ldr	r1, [pc, #284]	; (403404 <parse_gcode+0x1d4>)
  4032e8:	aa02      	add	r2, sp, #8
  4032ea:	ab03      	add	r3, sp, #12
  4032ec:	4c46      	ldr	r4, [pc, #280]	; (403408 <parse_gcode+0x1d8>)
  4032ee:	47a0      	blx	r4
  4032f0:	2803      	cmp	r0, #3
  4032f2:	d003      	beq.n	4032fc <parse_gcode+0xcc>
		{
			printf("error: read command requires three arguments\n");
  4032f4:	4845      	ldr	r0, [pc, #276]	; (40340c <parse_gcode+0x1dc>)
  4032f6:	4b35      	ldr	r3, [pc, #212]	; (4033cc <parse_gcode+0x19c>)
  4032f8:	4798      	blx	r3
			return;
  4032fa:	e05e      	b.n	4033ba <parse_gcode+0x18a>
		}

		if (channel < 0 || channel > 2)
  4032fc:	9b02      	ldr	r3, [sp, #8]
  4032fe:	2b02      	cmp	r3, #2
  403300:	d903      	bls.n	40330a <parse_gcode+0xda>
		{
			printf("error: invalid counter\n");
  403302:	4843      	ldr	r0, [pc, #268]	; (403410 <parse_gcode+0x1e0>)
  403304:	4b31      	ldr	r3, [pc, #196]	; (4033cc <parse_gcode+0x19c>)
  403306:	4798      	blx	r3
			return;
  403308:	e057      	b.n	4033ba <parse_gcode+0x18a>
		}

		if (start < 0 || start >= HEAD_STEPS_MAX || end < 0 || end >= HEAD_STEPS_MAX || start > end)
  40330a:	9b03      	ldr	r3, [sp, #12]
  40330c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
  403310:	d205      	bcs.n	40331e <parse_gcode+0xee>
  403312:	9a04      	ldr	r2, [sp, #16]
  403314:	f5b2 5ffa 	cmp.w	r2, #8000	; 0x1f40
  403318:	d201      	bcs.n	40331e <parse_gcode+0xee>
  40331a:	4293      	cmp	r3, r2
  40331c:	dd03      	ble.n	403326 <parse_gcode+0xf6>
		{
			printf("error: invalid column range\n");
  40331e:	483d      	ldr	r0, [pc, #244]	; (403414 <parse_gcode+0x1e4>)
  403320:	4b2a      	ldr	r3, [pc, #168]	; (4033cc <parse_gcode+0x19c>)
  403322:	4798      	blx	r3
			return;
  403324:	e049      	b.n	4033ba <parse_gcode+0x18a>
		}

		printf("ok\n");
  403326:	4828      	ldr	r0, [pc, #160]	; (4033c8 <parse_gcode+0x198>)
  403328:	4b28      	ldr	r3, [pc, #160]	; (4033cc <parse_gcode+0x19c>)
  40332a:	4798      	blx	r3

		// TODO: This really should transfer in binary,
		// but text is easier to debug using a terminal
		volatile uint16_t *counts[3] = { primary_count, secondary_count, tertiary_count };
  40332c:	4b3a      	ldr	r3, [pc, #232]	; (403418 <parse_gcode+0x1e8>)
  40332e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403332:	ab08      	add	r3, sp, #32
  403334:	e903 0007 	stmdb	r3, {r0, r1, r2}
		for (int32_t i = start; i <= end; i++)
  403338:	9c03      	ldr	r4, [sp, #12]
  40333a:	9b04      	ldr	r3, [sp, #16]
  40333c:	429c      	cmp	r4, r3
  40333e:	dc11      	bgt.n	403364 <parse_gcode+0x134>
  403340:	0065      	lsls	r5, r4, #1
			printf("%"PRIu16" ", counts[channel][i]);
  403342:	4f36      	ldr	r7, [pc, #216]	; (40341c <parse_gcode+0x1ec>)
  403344:	4e21      	ldr	r6, [pc, #132]	; (4033cc <parse_gcode+0x19c>)
  403346:	9b02      	ldr	r3, [sp, #8]
  403348:	aa08      	add	r2, sp, #32
  40334a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40334e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
  403352:	5b59      	ldrh	r1, [r3, r5]
  403354:	4638      	mov	r0, r7
  403356:	b289      	uxth	r1, r1
  403358:	47b0      	blx	r6
		printf("ok\n");

		// TODO: This really should transfer in binary,
		// but text is easier to debug using a terminal
		volatile uint16_t *counts[3] = { primary_count, secondary_count, tertiary_count };
		for (int32_t i = start; i <= end; i++)
  40335a:	3401      	adds	r4, #1
  40335c:	3502      	adds	r5, #2
  40335e:	9b04      	ldr	r3, [sp, #16]
  403360:	42a3      	cmp	r3, r4
  403362:	daf0      	bge.n	403346 <parse_gcode+0x116>
			printf("%"PRIu16" ", counts[channel][i]);
		printf("\n");
  403364:	482e      	ldr	r0, [pc, #184]	; (403420 <parse_gcode+0x1f0>)
  403366:	4c19      	ldr	r4, [pc, #100]	; (4033cc <parse_gcode+0x19c>)
  403368:	47a0      	blx	r4

		printf("ok\n");
  40336a:	4817      	ldr	r0, [pc, #92]	; (4033c8 <parse_gcode+0x198>)
  40336c:	47a0      	blx	r4
		return;
  40336e:	e024      	b.n	4033ba <parse_gcode+0x18a>
	}
	
	// Reset counts
	if (!strcmp(line, "M1006"))
  403370:	4620      	mov	r0, r4
  403372:	492c      	ldr	r1, [pc, #176]	; (403424 <parse_gcode+0x1f4>)
  403374:	4b13      	ldr	r3, [pc, #76]	; (4033c4 <parse_gcode+0x194>)
  403376:	4798      	blx	r3
  403378:	b9d8      	cbnz	r0, 4033b2 <parse_gcode+0x182>
	{
		if (enable_count)
  40337a:	4b19      	ldr	r3, [pc, #100]	; (4033e0 <parse_gcode+0x1b0>)
  40337c:	781b      	ldrb	r3, [r3, #0]
  40337e:	f013 0fff 	tst.w	r3, #255	; 0xff
  403382:	d003      	beq.n	40338c <parse_gcode+0x15c>
		{
			printf("error: cannot reset counter while it is active\n");
  403384:	4828      	ldr	r0, [pc, #160]	; (403428 <parse_gcode+0x1f8>)
  403386:	4b11      	ldr	r3, [pc, #68]	; (4033cc <parse_gcode+0x19c>)
  403388:	4798      	blx	r3
			return;
  40338a:	e016      	b.n	4033ba <parse_gcode+0x18a>
		}

		memset((uint8_t *)primary_count, 0, 2 * HEAD_STEPS_MAX);
  40338c:	f44f 557a 	mov.w	r5, #16000	; 0x3e80
  403390:	4826      	ldr	r0, [pc, #152]	; (40342c <parse_gcode+0x1fc>)
  403392:	2100      	movs	r1, #0
  403394:	462a      	mov	r2, r5
  403396:	4c26      	ldr	r4, [pc, #152]	; (403430 <parse_gcode+0x200>)
  403398:	47a0      	blx	r4
		memset((uint8_t *)secondary_count, 0, 2 * HEAD_STEPS_MAX);
  40339a:	4826      	ldr	r0, [pc, #152]	; (403434 <parse_gcode+0x204>)
  40339c:	2100      	movs	r1, #0
  40339e:	462a      	mov	r2, r5
  4033a0:	47a0      	blx	r4
		memset((uint8_t *)tertiary_count, 0, 2 * HEAD_STEPS_MAX);
  4033a2:	4825      	ldr	r0, [pc, #148]	; (403438 <parse_gcode+0x208>)
  4033a4:	2100      	movs	r1, #0
  4033a6:	462a      	mov	r2, r5
  4033a8:	47a0      	blx	r4
		printf("ok\n");
  4033aa:	4807      	ldr	r0, [pc, #28]	; (4033c8 <parse_gcode+0x198>)
  4033ac:	4b07      	ldr	r3, [pc, #28]	; (4033cc <parse_gcode+0x19c>)
  4033ae:	4798      	blx	r3
		return;
  4033b0:	e003      	b.n	4033ba <parse_gcode+0x18a>
	}

	printf("error: unknown command '%s'\n", line);
  4033b2:	4822      	ldr	r0, [pc, #136]	; (40343c <parse_gcode+0x20c>)
  4033b4:	4621      	mov	r1, r4
  4033b6:	4b05      	ldr	r3, [pc, #20]	; (4033cc <parse_gcode+0x19c>)
  4033b8:	4798      	blx	r3
}
  4033ba:	b009      	add	sp, #36	; 0x24
  4033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4033be:	bf00      	nop
  4033c0:	0040cf04 	.word	0x0040cf04
  4033c4:	004039cd 	.word	0x004039cd
  4033c8:	0040cf0c 	.word	0x0040cf0c
  4033cc:	004035ed 	.word	0x004035ed
  4033d0:	20000c38 	.word	0x20000c38
  4033d4:	0040cf10 	.word	0x0040cf10
  4033d8:	0040cf18 	.word	0x0040cf18
  4033dc:	0040cf20 	.word	0x0040cf20
  4033e0:	20000bd0 	.word	0x20000bd0
  4033e4:	0040cf28 	.word	0x0040cf28
  4033e8:	40090000 	.word	0x40090000
  4033ec:	00402add 	.word	0x00402add
  4033f0:	0040cf4c 	.word	0x0040cf4c
  4033f4:	0040cf54 	.word	0x0040cf54
  4033f8:	0040cf74 	.word	0x0040cf74
  4033fc:	00403c49 	.word	0x00403c49
  403400:	0040cf7c 	.word	0x0040cf7c
  403404:	0040cfac 	.word	0x0040cfac
  403408:	004038ed 	.word	0x004038ed
  40340c:	0040cfc0 	.word	0x0040cfc0
  403410:	0040cff0 	.word	0x0040cff0
  403414:	0040d008 	.word	0x0040d008
  403418:	0040cef8 	.word	0x0040cef8
  40341c:	0040d028 	.word	0x0040d028
  403420:	0040d0c4 	.word	0x0040d0c4
  403424:	0040d02c 	.word	0x0040d02c
  403428:	0040d034 	.word	0x0040d034
  40342c:	20000c3c 	.word	0x20000c3c
  403430:	00403749 	.word	0x00403749
  403434:	20004abc 	.word	0x20004abc
  403438:	2000893c 	.word	0x2000893c
  40343c:	0040d064 	.word	0x0040d064

00403440 <main>:

int main (void)
{
  403440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403444:	b0c3      	sub	sp, #268	; 0x10c
	sysclk_init();
  403446:	4b3f      	ldr	r3, [pc, #252]	; (403544 <main+0x104>)
  403448:	4798      	blx	r3
	board_init();
  40344a:	4b3f      	ldr	r3, [pc, #252]	; (403548 <main+0x108>)
  40344c:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
  40344e:	2701      	movs	r7, #1
  403450:	4b3e      	ldr	r3, [pc, #248]	; (40354c <main+0x10c>)
  403452:	701f      	strb	r7, [r3, #0]
  403454:	f3bf 8f5f 	dmb	sy
  403458:	b662      	cpsie	i
	stdio_usb_init();
  40345a:	4b3d      	ldr	r3, [pc, #244]	; (403550 <main+0x110>)
  40345c:	4798      	blx	r3

	// Count primary counts in channel 0 (attached to TCLK0, PA4)
	// Count secondary counts in channel 2 (attached to TCLK1, PA28)
	// Count tertiary counts in channel 3 (attached to TCLK2, PA29)
	pmc_enable_periph_clk(PRIMARY_TC_CHANNEL_ID);
  40345e:	2016      	movs	r0, #22
  403460:	4e3c      	ldr	r6, [pc, #240]	; (403554 <main+0x114>)
  403462:	47b0      	blx	r6
	pmc_enable_periph_clk(SECONDARY_TC_CHANNEL_ID);
  403464:	2017      	movs	r0, #23
  403466:	47b0      	blx	r6
	pmc_enable_periph_clk(TERTIARY_TC_CHANNEL_ID);
  403468:	2018      	movs	r0, #24
  40346a:	47b0      	blx	r6
	pmc_enable_periph_clk(COUNTER_PIO_ID);
  40346c:	2009      	movs	r0, #9
  40346e:	47b0      	blx	r6

	pio_configure(COUNTER_PIO, PIO_TYPE_PIO_PERIPH_B, PIO_PA4 | PIO_PA28 | PIO_PA29, 0);
  403470:	4c39      	ldr	r4, [pc, #228]	; (403558 <main+0x118>)
  403472:	4620      	mov	r0, r4
  403474:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  403478:	4a38      	ldr	r2, [pc, #224]	; (40355c <main+0x11c>)
  40347a:	2300      	movs	r3, #0
  40347c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 403594 <main+0x154>
  403480:	47c8      	blx	r9

	tc_init(COUNTER_TC, PRIMARY_TC_CHANNEL, TC_CMR_TCCLKS_XC0); // TCLK0 -> PA4
  403482:	4d37      	ldr	r5, [pc, #220]	; (403560 <main+0x120>)
  403484:	4628      	mov	r0, r5
  403486:	4639      	mov	r1, r7
  403488:	2205      	movs	r2, #5
  40348a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 403598 <main+0x158>
  40348e:	47c0      	blx	r8
	tc_init(COUNTER_TC, SECONDARY_TC_CHANNEL, TC_CMR_TCCLKS_XC1); // TCLK1 -> PA28
  403490:	4628      	mov	r0, r5
  403492:	2102      	movs	r1, #2
  403494:	2206      	movs	r2, #6
  403496:	47c0      	blx	r8
	tc_init(COUNTER_TC, TERTIARY_TC_CHANNEL, TC_CMR_TCCLKS_XC2); // TCLK2 -> PA29
  403498:	4628      	mov	r0, r5
  40349a:	2103      	movs	r1, #3
  40349c:	2207      	movs	r2, #7
  40349e:	47c0      	blx	r8

	tc_start(COUNTER_TC, PRIMARY_TC_CHANNEL);
  4034a0:	4628      	mov	r0, r5
  4034a2:	4639      	mov	r1, r7
  4034a4:	4f2f      	ldr	r7, [pc, #188]	; (403564 <main+0x124>)
  4034a6:	47b8      	blx	r7
	tc_start(COUNTER_TC, SECONDARY_TC_CHANNEL);
  4034a8:	4628      	mov	r0, r5
  4034aa:	2102      	movs	r1, #2
  4034ac:	47b8      	blx	r7
	tc_start(COUNTER_TC, TERTIARY_TC_CHANNEL);
  4034ae:	4628      	mov	r0, r5
  4034b0:	2103      	movs	r1, #3
  4034b2:	47b8      	blx	r7

	// Enable step tracking
	pmc_enable_periph_clk(COUNTER_PIO_ID);
  4034b4:	2009      	movs	r0, #9
  4034b6:	47b0      	blx	r6
	pio_configure(COUNTER_PIO, PIO_TYPE_PIO_INPUT, COUNTER_STEP_PIN | COUNTER_DIR_PIN, 0);
  4034b8:	4620      	mov	r0, r4
  4034ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4034be:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  4034c2:	2300      	movs	r3, #0
  4034c4:	47c8      	blx	r9
	pio_handler_set(COUNTER_PIO, ID_PIOA, COUNTER_STEP_PIN, PIO_IT_RISE_EDGE, Trigger_Step);
  4034c6:	4b28      	ldr	r3, [pc, #160]	; (403568 <main+0x128>)
  4034c8:	9300      	str	r3, [sp, #0]
  4034ca:	4620      	mov	r0, r4
  4034cc:	2109      	movs	r1, #9
  4034ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4034d2:	2370      	movs	r3, #112	; 0x70
  4034d4:	4d25      	ldr	r5, [pc, #148]	; (40356c <main+0x12c>)
  4034d6:	47a8      	blx	r5
	pio_set_input(COUNTER_PIO, COUNTER_STEP_PIN, PIO_DEGLITCH);
  4034d8:	4620      	mov	r0, r4
  4034da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4034de:	2202      	movs	r2, #2
  4034e0:	4b23      	ldr	r3, [pc, #140]	; (403570 <main+0x130>)
  4034e2:	4798      	blx	r3
  4034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4034e8:	4b22      	ldr	r3, [pc, #136]	; (403574 <main+0x134>)
  4034ea:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ((IRQn_Type)COUNTER_PIO_ID);
	pio_handler_set_priority(COUNTER_PIO, (IRQn_Type)COUNTER_PIO_ID, COUNTER_IRQ_PRIORITY);
  4034ec:	4620      	mov	r0, r4
  4034ee:	2109      	movs	r1, #9
  4034f0:	2200      	movs	r2, #0
  4034f2:	4b21      	ldr	r3, [pc, #132]	; (403578 <main+0x138>)
  4034f4:	4798      	blx	r3
	pio_enable_interrupt(COUNTER_PIO, COUNTER_STEP_PIN);
  4034f6:	4620      	mov	r0, r4
  4034f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4034fc:	4b1f      	ldr	r3, [pc, #124]	; (40357c <main+0x13c>)
  4034fe:	4798      	blx	r3

	// The main loop only needs to parse commands.
	// The counting and position monitoring is handled by interrupts.
	char linebuf[256];
	uint8_t buflen = 0;
  403500:	2400      	movs	r4, #0

	while (true)
	{
		while (udi_cdc_is_rx_ready())
  403502:	4e1f      	ldr	r6, [pc, #124]	; (403580 <main+0x140>)
		{
			// buflen will wrap to 0 on increment.  Notify the caller of the data loss
			if (buflen == 255)
			printf("WARNING: input buffer full.  Buffered data have been discarded.\r\n");
  403504:	4f1f      	ldr	r7, [pc, #124]	; (403584 <main+0x144>)
  403506:	e018      	b.n	40353a <main+0xfa>
	while (true)
	{
		while (udi_cdc_is_rx_ready())
		{
			// buflen will wrap to 0 on increment.  Notify the caller of the data loss
			if (buflen == 255)
  403508:	2cff      	cmp	r4, #255	; 0xff
  40350a:	d102      	bne.n	403512 <main+0xd2>
			printf("WARNING: input buffer full.  Buffered data have been discarded.\r\n");
  40350c:	4638      	mov	r0, r7
  40350e:	4b1e      	ldr	r3, [pc, #120]	; (403588 <main+0x148>)
  403510:	4798      	blx	r3

			char c = udi_cdc_getc();
  403512:	4b1e      	ldr	r3, [pc, #120]	; (40358c <main+0x14c>)
  403514:	4798      	blx	r3
  403516:	b2c0      	uxtb	r0, r0
			if (c == '\n' || c == '\r')
  403518:	280a      	cmp	r0, #10
  40351a:	d001      	beq.n	403520 <main+0xe0>
  40351c:	280d      	cmp	r0, #13
  40351e:	d108      	bne.n	403532 <main+0xf2>
			{
				linebuf[buflen++] = '\0';
  403520:	a802      	add	r0, sp, #8
  403522:	2500      	movs	r5, #0
  403524:	5505      	strb	r5, [r0, r4]
  403526:	1c61      	adds	r1, r4, #1
				parse_gcode(linebuf, buflen);
  403528:	b2c9      	uxtb	r1, r1
  40352a:	4b19      	ldr	r3, [pc, #100]	; (403590 <main+0x150>)
  40352c:	4798      	blx	r3
				buflen = 0;
  40352e:	462c      	mov	r4, r5
  403530:	e003      	b.n	40353a <main+0xfa>
			}
			else
				linebuf[buflen++] = c;
  403532:	1c62      	adds	r2, r4, #1
  403534:	a902      	add	r1, sp, #8
  403536:	5508      	strb	r0, [r1, r4]
  403538:	b2d4      	uxtb	r4, r2
	char linebuf[256];
	uint8_t buflen = 0;

	while (true)
	{
		while (udi_cdc_is_rx_ready())
  40353a:	47b0      	blx	r6
  40353c:	2800      	cmp	r0, #0
  40353e:	d1e3      	bne.n	403508 <main+0xc8>
  403540:	e7fb      	b.n	40353a <main+0xfa>
  403542:	bf00      	nop
  403544:	00402b45 	.word	0x00402b45
  403548:	00402bad 	.word	0x00402bad
  40354c:	200000e8 	.word	0x200000e8
  403550:	00400f25 	.word	0x00400f25
  403554:	00402dad 	.word	0x00402dad
  403558:	400e0e00 	.word	0x400e0e00
  40355c:	30000010 	.word	0x30000010
  403560:	40090000 	.word	0x40090000
  403564:	00402ae5 	.word	0x00402ae5
  403568:	00403149 	.word	0x00403149
  40356c:	00400fe5 	.word	0x00400fe5
  403570:	0040298d 	.word	0x0040298d
  403574:	e000e100 	.word	0xe000e100
  403578:	00401085 	.word	0x00401085
  40357c:	00402aad 	.word	0x00402aad
  403580:	004005fd 	.word	0x004005fd
  403584:	0040d084 	.word	0x0040d084
  403588:	004035ed 	.word	0x004035ed
  40358c:	004006b9 	.word	0x004006b9
  403590:	00403231 	.word	0x00403231
  403594:	004029e9 	.word	0x004029e9
  403598:	00402ac1 	.word	0x00402ac1

0040359c <__libc_init_array>:
  40359c:	b570      	push	{r4, r5, r6, lr}
  40359e:	4e0f      	ldr	r6, [pc, #60]	; (4035dc <__libc_init_array+0x40>)
  4035a0:	4d0f      	ldr	r5, [pc, #60]	; (4035e0 <__libc_init_array+0x44>)
  4035a2:	1b76      	subs	r6, r6, r5
  4035a4:	10b6      	asrs	r6, r6, #2
  4035a6:	d007      	beq.n	4035b8 <__libc_init_array+0x1c>
  4035a8:	3d04      	subs	r5, #4
  4035aa:	2400      	movs	r4, #0
  4035ac:	3401      	adds	r4, #1
  4035ae:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4035b2:	4798      	blx	r3
  4035b4:	42a6      	cmp	r6, r4
  4035b6:	d1f9      	bne.n	4035ac <__libc_init_array+0x10>
  4035b8:	4e0a      	ldr	r6, [pc, #40]	; (4035e4 <__libc_init_array+0x48>)
  4035ba:	4d0b      	ldr	r5, [pc, #44]	; (4035e8 <__libc_init_array+0x4c>)
  4035bc:	1b76      	subs	r6, r6, r5
  4035be:	f009 ffa1 	bl	40d504 <_init>
  4035c2:	10b6      	asrs	r6, r6, #2
  4035c4:	d008      	beq.n	4035d8 <__libc_init_array+0x3c>
  4035c6:	3d04      	subs	r5, #4
  4035c8:	2400      	movs	r4, #0
  4035ca:	3401      	adds	r4, #1
  4035cc:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4035d0:	4798      	blx	r3
  4035d2:	42a6      	cmp	r6, r4
  4035d4:	d1f9      	bne.n	4035ca <__libc_init_array+0x2e>
  4035d6:	bd70      	pop	{r4, r5, r6, pc}
  4035d8:	bd70      	pop	{r4, r5, r6, pc}
  4035da:	bf00      	nop
  4035dc:	0040d510 	.word	0x0040d510
  4035e0:	0040d510 	.word	0x0040d510
  4035e4:	0040d518 	.word	0x0040d518
  4035e8:	0040d510 	.word	0x0040d510

004035ec <iprintf>:
  4035ec:	b40f      	push	{r0, r1, r2, r3}
  4035ee:	b500      	push	{lr}
  4035f0:	4a07      	ldr	r2, [pc, #28]	; (403610 <iprintf+0x24>)
  4035f2:	b083      	sub	sp, #12
  4035f4:	ab04      	add	r3, sp, #16
  4035f6:	6810      	ldr	r0, [r2, #0]
  4035f8:	f853 2b04 	ldr.w	r2, [r3], #4
  4035fc:	6881      	ldr	r1, [r0, #8]
  4035fe:	9301      	str	r3, [sp, #4]
  403600:	f001 faf6 	bl	404bf0 <_vfiprintf_r>
  403604:	b003      	add	sp, #12
  403606:	f85d eb04 	ldr.w	lr, [sp], #4
  40360a:	b004      	add	sp, #16
  40360c:	4770      	bx	lr
  40360e:	bf00      	nop
  403610:	20000518 	.word	0x20000518

00403614 <memcpy>:
  403614:	4684      	mov	ip, r0
  403616:	ea41 0300 	orr.w	r3, r1, r0
  40361a:	f013 0303 	ands.w	r3, r3, #3
  40361e:	d16d      	bne.n	4036fc <memcpy+0xe8>
  403620:	3a40      	subs	r2, #64	; 0x40
  403622:	d341      	bcc.n	4036a8 <memcpy+0x94>
  403624:	f851 3b04 	ldr.w	r3, [r1], #4
  403628:	f840 3b04 	str.w	r3, [r0], #4
  40362c:	f851 3b04 	ldr.w	r3, [r1], #4
  403630:	f840 3b04 	str.w	r3, [r0], #4
  403634:	f851 3b04 	ldr.w	r3, [r1], #4
  403638:	f840 3b04 	str.w	r3, [r0], #4
  40363c:	f851 3b04 	ldr.w	r3, [r1], #4
  403640:	f840 3b04 	str.w	r3, [r0], #4
  403644:	f851 3b04 	ldr.w	r3, [r1], #4
  403648:	f840 3b04 	str.w	r3, [r0], #4
  40364c:	f851 3b04 	ldr.w	r3, [r1], #4
  403650:	f840 3b04 	str.w	r3, [r0], #4
  403654:	f851 3b04 	ldr.w	r3, [r1], #4
  403658:	f840 3b04 	str.w	r3, [r0], #4
  40365c:	f851 3b04 	ldr.w	r3, [r1], #4
  403660:	f840 3b04 	str.w	r3, [r0], #4
  403664:	f851 3b04 	ldr.w	r3, [r1], #4
  403668:	f840 3b04 	str.w	r3, [r0], #4
  40366c:	f851 3b04 	ldr.w	r3, [r1], #4
  403670:	f840 3b04 	str.w	r3, [r0], #4
  403674:	f851 3b04 	ldr.w	r3, [r1], #4
  403678:	f840 3b04 	str.w	r3, [r0], #4
  40367c:	f851 3b04 	ldr.w	r3, [r1], #4
  403680:	f840 3b04 	str.w	r3, [r0], #4
  403684:	f851 3b04 	ldr.w	r3, [r1], #4
  403688:	f840 3b04 	str.w	r3, [r0], #4
  40368c:	f851 3b04 	ldr.w	r3, [r1], #4
  403690:	f840 3b04 	str.w	r3, [r0], #4
  403694:	f851 3b04 	ldr.w	r3, [r1], #4
  403698:	f840 3b04 	str.w	r3, [r0], #4
  40369c:	f851 3b04 	ldr.w	r3, [r1], #4
  4036a0:	f840 3b04 	str.w	r3, [r0], #4
  4036a4:	3a40      	subs	r2, #64	; 0x40
  4036a6:	d2bd      	bcs.n	403624 <memcpy+0x10>
  4036a8:	3230      	adds	r2, #48	; 0x30
  4036aa:	d311      	bcc.n	4036d0 <memcpy+0xbc>
  4036ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4036b0:	f840 3b04 	str.w	r3, [r0], #4
  4036b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4036b8:	f840 3b04 	str.w	r3, [r0], #4
  4036bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4036c0:	f840 3b04 	str.w	r3, [r0], #4
  4036c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4036c8:	f840 3b04 	str.w	r3, [r0], #4
  4036cc:	3a10      	subs	r2, #16
  4036ce:	d2ed      	bcs.n	4036ac <memcpy+0x98>
  4036d0:	320c      	adds	r2, #12
  4036d2:	d305      	bcc.n	4036e0 <memcpy+0xcc>
  4036d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4036d8:	f840 3b04 	str.w	r3, [r0], #4
  4036dc:	3a04      	subs	r2, #4
  4036de:	d2f9      	bcs.n	4036d4 <memcpy+0xc0>
  4036e0:	3204      	adds	r2, #4
  4036e2:	d008      	beq.n	4036f6 <memcpy+0xe2>
  4036e4:	07d2      	lsls	r2, r2, #31
  4036e6:	bf1c      	itt	ne
  4036e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4036ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4036f0:	d301      	bcc.n	4036f6 <memcpy+0xe2>
  4036f2:	880b      	ldrh	r3, [r1, #0]
  4036f4:	8003      	strh	r3, [r0, #0]
  4036f6:	4660      	mov	r0, ip
  4036f8:	4770      	bx	lr
  4036fa:	bf00      	nop
  4036fc:	2a08      	cmp	r2, #8
  4036fe:	d313      	bcc.n	403728 <memcpy+0x114>
  403700:	078b      	lsls	r3, r1, #30
  403702:	d08d      	beq.n	403620 <memcpy+0xc>
  403704:	f010 0303 	ands.w	r3, r0, #3
  403708:	d08a      	beq.n	403620 <memcpy+0xc>
  40370a:	f1c3 0304 	rsb	r3, r3, #4
  40370e:	1ad2      	subs	r2, r2, r3
  403710:	07db      	lsls	r3, r3, #31
  403712:	bf1c      	itt	ne
  403714:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403718:	f800 3b01 	strbne.w	r3, [r0], #1
  40371c:	d380      	bcc.n	403620 <memcpy+0xc>
  40371e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403722:	f820 3b02 	strh.w	r3, [r0], #2
  403726:	e77b      	b.n	403620 <memcpy+0xc>
  403728:	3a04      	subs	r2, #4
  40372a:	d3d9      	bcc.n	4036e0 <memcpy+0xcc>
  40372c:	3a01      	subs	r2, #1
  40372e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403732:	f800 3b01 	strb.w	r3, [r0], #1
  403736:	d2f9      	bcs.n	40372c <memcpy+0x118>
  403738:	780b      	ldrb	r3, [r1, #0]
  40373a:	7003      	strb	r3, [r0, #0]
  40373c:	784b      	ldrb	r3, [r1, #1]
  40373e:	7043      	strb	r3, [r0, #1]
  403740:	788b      	ldrb	r3, [r1, #2]
  403742:	7083      	strb	r3, [r0, #2]
  403744:	4660      	mov	r0, ip
  403746:	4770      	bx	lr

00403748 <memset>:
  403748:	b4f0      	push	{r4, r5, r6, r7}
  40374a:	0784      	lsls	r4, r0, #30
  40374c:	d043      	beq.n	4037d6 <memset+0x8e>
  40374e:	1e54      	subs	r4, r2, #1
  403750:	2a00      	cmp	r2, #0
  403752:	d03e      	beq.n	4037d2 <memset+0x8a>
  403754:	b2cd      	uxtb	r5, r1
  403756:	4603      	mov	r3, r0
  403758:	e003      	b.n	403762 <memset+0x1a>
  40375a:	1e62      	subs	r2, r4, #1
  40375c:	2c00      	cmp	r4, #0
  40375e:	d038      	beq.n	4037d2 <memset+0x8a>
  403760:	4614      	mov	r4, r2
  403762:	f803 5b01 	strb.w	r5, [r3], #1
  403766:	079a      	lsls	r2, r3, #30
  403768:	d1f7      	bne.n	40375a <memset+0x12>
  40376a:	2c03      	cmp	r4, #3
  40376c:	d92a      	bls.n	4037c4 <memset+0x7c>
  40376e:	b2cd      	uxtb	r5, r1
  403770:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403774:	2c0f      	cmp	r4, #15
  403776:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40377a:	d915      	bls.n	4037a8 <memset+0x60>
  40377c:	f1a4 0710 	sub.w	r7, r4, #16
  403780:	093f      	lsrs	r7, r7, #4
  403782:	f103 0610 	add.w	r6, r3, #16
  403786:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  40378a:	461a      	mov	r2, r3
  40378c:	6015      	str	r5, [r2, #0]
  40378e:	6055      	str	r5, [r2, #4]
  403790:	6095      	str	r5, [r2, #8]
  403792:	60d5      	str	r5, [r2, #12]
  403794:	3210      	adds	r2, #16
  403796:	42b2      	cmp	r2, r6
  403798:	d1f8      	bne.n	40378c <memset+0x44>
  40379a:	f004 040f 	and.w	r4, r4, #15
  40379e:	3701      	adds	r7, #1
  4037a0:	2c03      	cmp	r4, #3
  4037a2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  4037a6:	d90d      	bls.n	4037c4 <memset+0x7c>
  4037a8:	461e      	mov	r6, r3
  4037aa:	4622      	mov	r2, r4
  4037ac:	3a04      	subs	r2, #4
  4037ae:	2a03      	cmp	r2, #3
  4037b0:	f846 5b04 	str.w	r5, [r6], #4
  4037b4:	d8fa      	bhi.n	4037ac <memset+0x64>
  4037b6:	1f22      	subs	r2, r4, #4
  4037b8:	f022 0203 	bic.w	r2, r2, #3
  4037bc:	3204      	adds	r2, #4
  4037be:	4413      	add	r3, r2
  4037c0:	f004 0403 	and.w	r4, r4, #3
  4037c4:	b12c      	cbz	r4, 4037d2 <memset+0x8a>
  4037c6:	b2c9      	uxtb	r1, r1
  4037c8:	441c      	add	r4, r3
  4037ca:	f803 1b01 	strb.w	r1, [r3], #1
  4037ce:	42a3      	cmp	r3, r4
  4037d0:	d1fb      	bne.n	4037ca <memset+0x82>
  4037d2:	bcf0      	pop	{r4, r5, r6, r7}
  4037d4:	4770      	bx	lr
  4037d6:	4614      	mov	r4, r2
  4037d8:	4603      	mov	r3, r0
  4037da:	e7c6      	b.n	40376a <memset+0x22>

004037dc <setbuf>:
  4037dc:	2900      	cmp	r1, #0
  4037de:	bf0c      	ite	eq
  4037e0:	2202      	moveq	r2, #2
  4037e2:	2200      	movne	r2, #0
  4037e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4037e8:	f000 b800 	b.w	4037ec <setvbuf>

004037ec <setvbuf>:
  4037ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037f0:	4c3c      	ldr	r4, [pc, #240]	; (4038e4 <setvbuf+0xf8>)
  4037f2:	6825      	ldr	r5, [r4, #0]
  4037f4:	4688      	mov	r8, r1
  4037f6:	4604      	mov	r4, r0
  4037f8:	4616      	mov	r6, r2
  4037fa:	461f      	mov	r7, r3
  4037fc:	b115      	cbz	r5, 403804 <setvbuf+0x18>
  4037fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403800:	2b00      	cmp	r3, #0
  403802:	d04f      	beq.n	4038a4 <setvbuf+0xb8>
  403804:	2e02      	cmp	r6, #2
  403806:	d830      	bhi.n	40386a <setvbuf+0x7e>
  403808:	2f00      	cmp	r7, #0
  40380a:	db2e      	blt.n	40386a <setvbuf+0x7e>
  40380c:	4628      	mov	r0, r5
  40380e:	4621      	mov	r1, r4
  403810:	f002 f996 	bl	405b40 <_fflush_r>
  403814:	89a3      	ldrh	r3, [r4, #12]
  403816:	2200      	movs	r2, #0
  403818:	6062      	str	r2, [r4, #4]
  40381a:	61a2      	str	r2, [r4, #24]
  40381c:	061a      	lsls	r2, r3, #24
  40381e:	d428      	bmi.n	403872 <setvbuf+0x86>
  403820:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  403824:	b29b      	uxth	r3, r3
  403826:	2e02      	cmp	r6, #2
  403828:	81a3      	strh	r3, [r4, #12]
  40382a:	d02d      	beq.n	403888 <setvbuf+0x9c>
  40382c:	f1b8 0f00 	cmp.w	r8, #0
  403830:	d03c      	beq.n	4038ac <setvbuf+0xc0>
  403832:	2e01      	cmp	r6, #1
  403834:	d013      	beq.n	40385e <setvbuf+0x72>
  403836:	b29b      	uxth	r3, r3
  403838:	f003 0008 	and.w	r0, r3, #8
  40383c:	4a2a      	ldr	r2, [pc, #168]	; (4038e8 <setvbuf+0xfc>)
  40383e:	63ea      	str	r2, [r5, #60]	; 0x3c
  403840:	b280      	uxth	r0, r0
  403842:	f8c4 8000 	str.w	r8, [r4]
  403846:	f8c4 8010 	str.w	r8, [r4, #16]
  40384a:	6167      	str	r7, [r4, #20]
  40384c:	b178      	cbz	r0, 40386e <setvbuf+0x82>
  40384e:	f013 0f03 	tst.w	r3, #3
  403852:	bf18      	it	ne
  403854:	2700      	movne	r7, #0
  403856:	60a7      	str	r7, [r4, #8]
  403858:	2000      	movs	r0, #0
  40385a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40385e:	f043 0301 	orr.w	r3, r3, #1
  403862:	427a      	negs	r2, r7
  403864:	81a3      	strh	r3, [r4, #12]
  403866:	61a2      	str	r2, [r4, #24]
  403868:	e7e5      	b.n	403836 <setvbuf+0x4a>
  40386a:	f04f 30ff 	mov.w	r0, #4294967295
  40386e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403872:	4628      	mov	r0, r5
  403874:	6921      	ldr	r1, [r4, #16]
  403876:	f002 fac1 	bl	405dfc <_free_r>
  40387a:	89a3      	ldrh	r3, [r4, #12]
  40387c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  403880:	b29b      	uxth	r3, r3
  403882:	2e02      	cmp	r6, #2
  403884:	81a3      	strh	r3, [r4, #12]
  403886:	d1d1      	bne.n	40382c <setvbuf+0x40>
  403888:	2000      	movs	r0, #0
  40388a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40388e:	f043 0302 	orr.w	r3, r3, #2
  403892:	2500      	movs	r5, #0
  403894:	2101      	movs	r1, #1
  403896:	81a3      	strh	r3, [r4, #12]
  403898:	60a5      	str	r5, [r4, #8]
  40389a:	6022      	str	r2, [r4, #0]
  40389c:	6122      	str	r2, [r4, #16]
  40389e:	6161      	str	r1, [r4, #20]
  4038a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4038a4:	4628      	mov	r0, r5
  4038a6:	f002 f967 	bl	405b78 <__sinit>
  4038aa:	e7ab      	b.n	403804 <setvbuf+0x18>
  4038ac:	2f00      	cmp	r7, #0
  4038ae:	bf08      	it	eq
  4038b0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4038b4:	4638      	mov	r0, r7
  4038b6:	f002 fdc1 	bl	40643c <malloc>
  4038ba:	4680      	mov	r8, r0
  4038bc:	b128      	cbz	r0, 4038ca <setvbuf+0xde>
  4038be:	89a3      	ldrh	r3, [r4, #12]
  4038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4038c4:	b29b      	uxth	r3, r3
  4038c6:	81a3      	strh	r3, [r4, #12]
  4038c8:	e7b3      	b.n	403832 <setvbuf+0x46>
  4038ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4038ce:	f002 fdb5 	bl	40643c <malloc>
  4038d2:	4680      	mov	r8, r0
  4038d4:	b918      	cbnz	r0, 4038de <setvbuf+0xf2>
  4038d6:	89a3      	ldrh	r3, [r4, #12]
  4038d8:	f04f 30ff 	mov.w	r0, #4294967295
  4038dc:	e7d5      	b.n	40388a <setvbuf+0x9e>
  4038de:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4038e2:	e7ec      	b.n	4038be <setvbuf+0xd2>
  4038e4:	20000518 	.word	0x20000518
  4038e8:	00405b6d 	.word	0x00405b6d

004038ec <sscanf>:
  4038ec:	b40e      	push	{r1, r2, r3}
  4038ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4038f0:	b09c      	sub	sp, #112	; 0x70
  4038f2:	ac21      	add	r4, sp, #132	; 0x84
  4038f4:	f44f 7201 	mov.w	r2, #516	; 0x204
  4038f8:	f854 6b04 	ldr.w	r6, [r4], #4
  4038fc:	f8ad 2014 	strh.w	r2, [sp, #20]
  403900:	9002      	str	r0, [sp, #8]
  403902:	9006      	str	r0, [sp, #24]
  403904:	f000 f970 	bl	403be8 <strlen>
  403908:	4b0c      	ldr	r3, [pc, #48]	; (40393c <sscanf+0x50>)
  40390a:	9401      	str	r4, [sp, #4]
  40390c:	4605      	mov	r5, r0
  40390e:	4632      	mov	r2, r6
  403910:	4f0b      	ldr	r7, [pc, #44]	; (403940 <sscanf+0x54>)
  403912:	6818      	ldr	r0, [r3, #0]
  403914:	9503      	str	r5, [sp, #12]
  403916:	4623      	mov	r3, r4
  403918:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40391c:	2400      	movs	r4, #0
  40391e:	a902      	add	r1, sp, #8
  403920:	9507      	str	r5, [sp, #28]
  403922:	970a      	str	r7, [sp, #40]	; 0x28
  403924:	940e      	str	r4, [sp, #56]	; 0x38
  403926:	9413      	str	r4, [sp, #76]	; 0x4c
  403928:	f8ad 6016 	strh.w	r6, [sp, #22]
  40392c:	f000 f9e6 	bl	403cfc <__ssvfscanf_r>
  403930:	b01c      	add	sp, #112	; 0x70
  403932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403936:	b003      	add	sp, #12
  403938:	4770      	bx	lr
  40393a:	bf00      	nop
  40393c:	20000518 	.word	0x20000518
  403940:	00403969 	.word	0x00403969

00403944 <__sread>:
  403944:	b510      	push	{r4, lr}
  403946:	460c      	mov	r4, r1
  403948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40394c:	f003 f90a 	bl	406b64 <_read_r>
  403950:	2800      	cmp	r0, #0
  403952:	db03      	blt.n	40395c <__sread+0x18>
  403954:	6d23      	ldr	r3, [r4, #80]	; 0x50
  403956:	4403      	add	r3, r0
  403958:	6523      	str	r3, [r4, #80]	; 0x50
  40395a:	bd10      	pop	{r4, pc}
  40395c:	89a3      	ldrh	r3, [r4, #12]
  40395e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  403962:	81a3      	strh	r3, [r4, #12]
  403964:	bd10      	pop	{r4, pc}
  403966:	bf00      	nop

00403968 <__seofread>:
  403968:	2000      	movs	r0, #0
  40396a:	4770      	bx	lr

0040396c <__swrite>:
  40396c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403970:	460c      	mov	r4, r1
  403972:	8989      	ldrh	r1, [r1, #12]
  403974:	461d      	mov	r5, r3
  403976:	05cb      	lsls	r3, r1, #23
  403978:	4616      	mov	r6, r2
  40397a:	4607      	mov	r7, r0
  40397c:	d506      	bpl.n	40398c <__swrite+0x20>
  40397e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403982:	2200      	movs	r2, #0
  403984:	2302      	movs	r3, #2
  403986:	f002 fcd5 	bl	406334 <_lseek_r>
  40398a:	89a1      	ldrh	r1, [r4, #12]
  40398c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  403990:	81a1      	strh	r1, [r4, #12]
  403992:	4638      	mov	r0, r7
  403994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  403998:	4632      	mov	r2, r6
  40399a:	462b      	mov	r3, r5
  40399c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4039a0:	f001 bf8c 	b.w	4058bc <_write_r>

004039a4 <__sseek>:
  4039a4:	b510      	push	{r4, lr}
  4039a6:	460c      	mov	r4, r1
  4039a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4039ac:	f002 fcc2 	bl	406334 <_lseek_r>
  4039b0:	89a3      	ldrh	r3, [r4, #12]
  4039b2:	1c42      	adds	r2, r0, #1
  4039b4:	bf0e      	itee	eq
  4039b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4039ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4039be:	6520      	strne	r0, [r4, #80]	; 0x50
  4039c0:	81a3      	strh	r3, [r4, #12]
  4039c2:	bd10      	pop	{r4, pc}

004039c4 <__sclose>:
  4039c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4039c8:	f001 bffe 	b.w	4059c8 <_close_r>

004039cc <strcmp>:
  4039cc:	ea40 0c01 	orr.w	ip, r0, r1
  4039d0:	f01c 0f07 	tst.w	ip, #7
  4039d4:	d123      	bne.n	403a1e <strcmp+0x52>
  4039d6:	f1bd 0d10 	subs.w	sp, sp, #16
  4039da:	e9cd 4502 	strd	r4, r5, [sp, #8]
  4039de:	e9cd 6700 	strd	r6, r7, [sp]
  4039e2:	f06f 0600 	mvn.w	r6, #0
  4039e6:	f04f 0700 	mov.w	r7, #0
  4039ea:	bf00      	nop
  4039ec:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  4039f0:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  4039f4:	42a2      	cmp	r2, r4
  4039f6:	fa82 fc46 	uadd8	ip, r2, r6
  4039fa:	faa7 fc86 	sel	ip, r7, r6
  4039fe:	bf08      	it	eq
  403a00:	f1bc 0f00 	cmpeq.w	ip, #0
  403a04:	f040 80d7 	bne.w	403bb6 <strcmp+0x1ea>
  403a08:	42ab      	cmp	r3, r5
  403a0a:	fa83 fc46 	uadd8	ip, r3, r6
  403a0e:	faa7 fc86 	sel	ip, r7, r6
  403a12:	bf08      	it	eq
  403a14:	f1bc 0f00 	cmpeq.w	ip, #0
  403a18:	f040 80ca 	bne.w	403bb0 <strcmp+0x1e4>
  403a1c:	e7e6      	b.n	4039ec <strcmp+0x20>
  403a1e:	f010 0c03 	ands.w	ip, r0, #3
  403a22:	d021      	beq.n	403a68 <strcmp+0x9c>
  403a24:	f020 0003 	bic.w	r0, r0, #3
  403a28:	f850 2b04 	ldr.w	r2, [r0], #4
  403a2c:	ea5f 7ccc 	movs.w	ip, ip, lsl #31
  403a30:	d008      	beq.n	403a44 <strcmp+0x78>
  403a32:	d20f      	bcs.n	403a54 <strcmp+0x88>
  403a34:	f811 cb01 	ldrb.w	ip, [r1], #1
  403a38:	fa5f f392 	uxtb.w	r3, r2, ror #8
  403a3c:	ebb3 0c0c 	subs.w	ip, r3, ip
  403a40:	d110      	bne.n	403a64 <strcmp+0x98>
  403a42:	b17b      	cbz	r3, 403a64 <strcmp+0x98>
  403a44:	f811 cb01 	ldrb.w	ip, [r1], #1
  403a48:	fa5f f3a2 	uxtb.w	r3, r2, ror #16
  403a4c:	ebb3 0c0c 	subs.w	ip, r3, ip
  403a50:	d108      	bne.n	403a64 <strcmp+0x98>
  403a52:	b13b      	cbz	r3, 403a64 <strcmp+0x98>
  403a54:	f811 cb01 	ldrb.w	ip, [r1], #1
  403a58:	fa5f f3b2 	uxtb.w	r3, r2, ror #24
  403a5c:	ebb3 0c0c 	subs.w	ip, r3, ip
  403a60:	d100      	bne.n	403a64 <strcmp+0x98>
  403a62:	b90b      	cbnz	r3, 403a68 <strcmp+0x9c>
  403a64:	4660      	mov	r0, ip
  403a66:	4770      	bx	lr
  403a68:	f1bd 0d10 	subs.w	sp, sp, #16
  403a6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
  403a70:	e9cd 6700 	strd	r6, r7, [sp]
  403a74:	f06f 0600 	mvn.w	r6, #0
  403a78:	f04f 0700 	mov.w	r7, #0
  403a7c:	f011 0c03 	ands.w	ip, r1, #3
  403a80:	d12d      	bne.n	403ade <strcmp+0x112>
  403a82:	f010 0f04 	tst.w	r0, #4
  403a86:	d00d      	beq.n	403aa4 <strcmp+0xd8>
  403a88:	f850 2b04 	ldr.w	r2, [r0], #4
  403a8c:	f851 4b04 	ldr.w	r4, [r1], #4
  403a90:	42a2      	cmp	r2, r4
  403a92:	fa82 fc46 	uadd8	ip, r2, r6
  403a96:	faa7 fc86 	sel	ip, r7, r6
  403a9a:	bf08      	it	eq
  403a9c:	f1bc 0f00 	cmpeq.w	ip, #0
  403aa0:	f040 8089 	bne.w	403bb6 <strcmp+0x1ea>
  403aa4:	f011 0f04 	tst.w	r1, #4
  403aa8:	d09f      	beq.n	4039ea <strcmp+0x1e>
  403aaa:	f851 5b04 	ldr.w	r5, [r1], #4
  403aae:	bf00      	nop
  403ab0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
  403ab4:	42aa      	cmp	r2, r5
  403ab6:	fa82 fc46 	uadd8	ip, r2, r6
  403aba:	faa7 fc86 	sel	ip, r7, r6
  403abe:	bf08      	it	eq
  403ac0:	f1bc 0f00 	cmpeq.w	ip, #0
  403ac4:	d171      	bne.n	403baa <strcmp+0x1de>
  403ac6:	e8f1 4502 	ldrd	r4, r5, [r1], #8
  403aca:	42a3      	cmp	r3, r4
  403acc:	fa83 fc46 	uadd8	ip, r3, r6
  403ad0:	faa7 fc86 	sel	ip, r7, r6
  403ad4:	bf08      	it	eq
  403ad6:	f1bc 0f00 	cmpeq.w	ip, #0
  403ada:	d163      	bne.n	403ba4 <strcmp+0x1d8>
  403adc:	e7e8      	b.n	403ab0 <strcmp+0xe4>
  403ade:	f021 0103 	bic.w	r1, r1, #3
  403ae2:	f1bc 0f02 	cmp.w	ip, #2
  403ae6:	d01e      	beq.n	403b26 <strcmp+0x15a>
  403ae8:	da3b      	bge.n	403b62 <strcmp+0x196>
  403aea:	f851 5b04 	ldr.w	r5, [r1], #4
  403aee:	bf00      	nop
  403af0:	f850 3b04 	ldr.w	r3, [r0], #4
  403af4:	ea4f 2515 	mov.w	r5, r5, lsr #8
  403af8:	fa83 fc46 	uadd8	ip, r3, r6
  403afc:	faa7 fc86 	sel	ip, r7, r6
  403b00:	ebb7 2f0c 	cmp.w	r7, ip, lsl #8
  403b04:	ea03 2216 	and.w	r2, r3, r6, lsr #8
  403b08:	bf08      	it	eq
  403b0a:	42aa      	cmpeq	r2, r5
  403b0c:	d14d      	bne.n	403baa <strcmp+0x1de>
  403b0e:	f851 5b04 	ldr.w	r5, [r1], #4
  403b12:	f1bc 0f00 	cmp.w	ip, #0
  403b16:	ea82 0303 	eor.w	r3, r2, r3
  403b1a:	ea4f 6205 	mov.w	r2, r5, lsl #24
  403b1e:	bf08      	it	eq
  403b20:	4293      	cmpeq	r3, r2
  403b22:	d13c      	bne.n	403b9e <strcmp+0x1d2>
  403b24:	e7e4      	b.n	403af0 <strcmp+0x124>
  403b26:	f851 5b04 	ldr.w	r5, [r1], #4
  403b2a:	bf00      	nop
  403b2c:	f850 3b04 	ldr.w	r3, [r0], #4
  403b30:	ea4f 4515 	mov.w	r5, r5, lsr #16
  403b34:	fa83 fc46 	uadd8	ip, r3, r6
  403b38:	faa7 fc86 	sel	ip, r7, r6
  403b3c:	ebb7 4f0c 	cmp.w	r7, ip, lsl #16
  403b40:	ea03 4216 	and.w	r2, r3, r6, lsr #16
  403b44:	bf08      	it	eq
  403b46:	42aa      	cmpeq	r2, r5
  403b48:	d12f      	bne.n	403baa <strcmp+0x1de>
  403b4a:	f851 5b04 	ldr.w	r5, [r1], #4
  403b4e:	f1bc 0f00 	cmp.w	ip, #0
  403b52:	ea82 0303 	eor.w	r3, r2, r3
  403b56:	ea4f 4205 	mov.w	r2, r5, lsl #16
  403b5a:	bf08      	it	eq
  403b5c:	4293      	cmpeq	r3, r2
  403b5e:	d11e      	bne.n	403b9e <strcmp+0x1d2>
  403b60:	e7e4      	b.n	403b2c <strcmp+0x160>
  403b62:	f851 5b04 	ldr.w	r5, [r1], #4
  403b66:	bf00      	nop
  403b68:	f850 3b04 	ldr.w	r3, [r0], #4
  403b6c:	ea4f 6515 	mov.w	r5, r5, lsr #24
  403b70:	fa83 fc46 	uadd8	ip, r3, r6
  403b74:	faa7 fc86 	sel	ip, r7, r6
  403b78:	ebb7 6f0c 	cmp.w	r7, ip, lsl #24
  403b7c:	ea03 6216 	and.w	r2, r3, r6, lsr #24
  403b80:	bf08      	it	eq
  403b82:	42aa      	cmpeq	r2, r5
  403b84:	d111      	bne.n	403baa <strcmp+0x1de>
  403b86:	f851 5b04 	ldr.w	r5, [r1], #4
  403b8a:	f1bc 0f00 	cmp.w	ip, #0
  403b8e:	ea82 0303 	eor.w	r3, r2, r3
  403b92:	ea4f 2205 	mov.w	r2, r5, lsl #8
  403b96:	bf08      	it	eq
  403b98:	4293      	cmpeq	r3, r2
  403b9a:	d100      	bne.n	403b9e <strcmp+0x1d2>
  403b9c:	e7e4      	b.n	403b68 <strcmp+0x19c>
  403b9e:	ba19      	rev	r1, r3
  403ba0:	ba12      	rev	r2, r2
  403ba2:	e00a      	b.n	403bba <strcmp+0x1ee>
  403ba4:	ba19      	rev	r1, r3
  403ba6:	ba22      	rev	r2, r4
  403ba8:	e007      	b.n	403bba <strcmp+0x1ee>
  403baa:	ba11      	rev	r1, r2
  403bac:	ba2a      	rev	r2, r5
  403bae:	e004      	b.n	403bba <strcmp+0x1ee>
  403bb0:	ba19      	rev	r1, r3
  403bb2:	ba2a      	rev	r2, r5
  403bb4:	e001      	b.n	403bba <strcmp+0x1ee>
  403bb6:	ba11      	rev	r1, r2
  403bb8:	ba22      	rev	r2, r4
  403bba:	fa9c f08c 	rev.w	r0, ip
  403bbe:	e9dd 6700 	ldrd	r6, r7, [sp]
  403bc2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  403bc6:	f11d 0d10 	adds.w	sp, sp, #16
  403bca:	b138      	cbz	r0, 403bdc <strcmp+0x210>
  403bcc:	fab0 f080 	clz	r0, r0
  403bd0:	f1c0 0018 	rsb	r0, r0, #24
  403bd4:	fa21 f100 	lsr.w	r1, r1, r0
  403bd8:	fa22 f200 	lsr.w	r2, r2, r0
  403bdc:	2001      	movs	r0, #1
  403bde:	4291      	cmp	r1, r2
  403be0:	bf98      	it	ls
  403be2:	4180      	sbcls	r0, r0
  403be4:	4770      	bx	lr
  403be6:	bf00      	nop

00403be8 <strlen>:
  403be8:	f020 0103 	bic.w	r1, r0, #3
  403bec:	f010 0003 	ands.w	r0, r0, #3
  403bf0:	f1c0 0000 	rsb	r0, r0, #0
  403bf4:	f851 3b04 	ldr.w	r3, [r1], #4
  403bf8:	f100 0c04 	add.w	ip, r0, #4
  403bfc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  403c00:	f06f 0200 	mvn.w	r2, #0
  403c04:	bf1c      	itt	ne
  403c06:	fa22 f20c 	lsrne.w	r2, r2, ip
  403c0a:	4313      	orrne	r3, r2
  403c0c:	f04f 0c01 	mov.w	ip, #1
  403c10:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  403c14:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  403c18:	eba3 020c 	sub.w	r2, r3, ip
  403c1c:	ea22 0203 	bic.w	r2, r2, r3
  403c20:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  403c24:	bf04      	itt	eq
  403c26:	f851 3b04 	ldreq.w	r3, [r1], #4
  403c2a:	3004      	addeq	r0, #4
  403c2c:	d0f4      	beq.n	403c18 <strlen+0x30>
  403c2e:	f013 0fff 	tst.w	r3, #255	; 0xff
  403c32:	bf1f      	itttt	ne
  403c34:	3001      	addne	r0, #1
  403c36:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  403c3a:	3001      	addne	r0, #1
  403c3c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  403c40:	bf18      	it	ne
  403c42:	3001      	addne	r0, #1
  403c44:	4770      	bx	lr
  403c46:	bf00      	nop

00403c48 <strncmp>:
  403c48:	b430      	push	{r4, r5}
  403c4a:	2a00      	cmp	r2, #0
  403c4c:	d04a      	beq.n	403ce4 <strncmp+0x9c>
  403c4e:	ea40 0301 	orr.w	r3, r0, r1
  403c52:	f013 0303 	ands.w	r3, r3, #3
  403c56:	d12d      	bne.n	403cb4 <strncmp+0x6c>
  403c58:	2a03      	cmp	r2, #3
  403c5a:	d92b      	bls.n	403cb4 <strncmp+0x6c>
  403c5c:	6804      	ldr	r4, [r0, #0]
  403c5e:	680d      	ldr	r5, [r1, #0]
  403c60:	42ac      	cmp	r4, r5
  403c62:	d127      	bne.n	403cb4 <strncmp+0x6c>
  403c64:	3a04      	subs	r2, #4
  403c66:	d03d      	beq.n	403ce4 <strncmp+0x9c>
  403c68:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
  403c6c:	ea25 0404 	bic.w	r4, r5, r4
  403c70:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
  403c74:	d13c      	bne.n	403cf0 <strncmp+0xa8>
  403c76:	460c      	mov	r4, r1
  403c78:	4603      	mov	r3, r0
  403c7a:	e00e      	b.n	403c9a <strncmp+0x52>
  403c7c:	685b      	ldr	r3, [r3, #4]
  403c7e:	6864      	ldr	r4, [r4, #4]
  403c80:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  403c84:	42a3      	cmp	r3, r4
  403c86:	ea25 0503 	bic.w	r5, r5, r3
  403c8a:	d113      	bne.n	403cb4 <strncmp+0x6c>
  403c8c:	3a04      	subs	r2, #4
  403c8e:	d029      	beq.n	403ce4 <strncmp+0x9c>
  403c90:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
  403c94:	d129      	bne.n	403cea <strncmp+0xa2>
  403c96:	4603      	mov	r3, r0
  403c98:	460c      	mov	r4, r1
  403c9a:	2a03      	cmp	r2, #3
  403c9c:	f100 0004 	add.w	r0, r0, #4
  403ca0:	f101 0104 	add.w	r1, r1, #4
  403ca4:	d8ea      	bhi.n	403c7c <strncmp+0x34>
  403ca6:	1e55      	subs	r5, r2, #1
  403ca8:	b92a      	cbnz	r2, 403cb6 <strncmp+0x6e>
  403caa:	7918      	ldrb	r0, [r3, #4]
  403cac:	7922      	ldrb	r2, [r4, #4]
  403cae:	1a80      	subs	r0, r0, r2
  403cb0:	bc30      	pop	{r4, r5}
  403cb2:	4770      	bx	lr
  403cb4:	1e55      	subs	r5, r2, #1
  403cb6:	7803      	ldrb	r3, [r0, #0]
  403cb8:	780a      	ldrb	r2, [r1, #0]
  403cba:	4293      	cmp	r3, r2
  403cbc:	d11a      	bne.n	403cf4 <strncmp+0xac>
  403cbe:	b1dd      	cbz	r5, 403cf8 <strncmp+0xb0>
  403cc0:	b1b3      	cbz	r3, 403cf0 <strncmp+0xa8>
  403cc2:	1c6c      	adds	r4, r5, #1
  403cc4:	440c      	add	r4, r1
  403cc6:	1c8b      	adds	r3, r1, #2
  403cc8:	4601      	mov	r1, r0
  403cca:	e004      	b.n	403cd6 <strncmp+0x8e>
  403ccc:	42a3      	cmp	r3, r4
  403cce:	d00c      	beq.n	403cea <strncmp+0xa2>
  403cd0:	3301      	adds	r3, #1
  403cd2:	2800      	cmp	r0, #0
  403cd4:	d0ec      	beq.n	403cb0 <strncmp+0x68>
  403cd6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  403cda:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  403cde:	4290      	cmp	r0, r2
  403ce0:	d0f4      	beq.n	403ccc <strncmp+0x84>
  403ce2:	e7e4      	b.n	403cae <strncmp+0x66>
  403ce4:	4610      	mov	r0, r2
  403ce6:	bc30      	pop	{r4, r5}
  403ce8:	4770      	bx	lr
  403cea:	2000      	movs	r0, #0
  403cec:	bc30      	pop	{r4, r5}
  403cee:	4770      	bx	lr
  403cf0:	4618      	mov	r0, r3
  403cf2:	e7dd      	b.n	403cb0 <strncmp+0x68>
  403cf4:	4618      	mov	r0, r3
  403cf6:	e7da      	b.n	403cae <strncmp+0x66>
  403cf8:	4628      	mov	r0, r5
  403cfa:	e7d9      	b.n	403cb0 <strncmp+0x68>

00403cfc <__ssvfscanf_r>:
  403cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403d00:	460d      	mov	r5, r1
  403d02:	8989      	ldrh	r1, [r1, #12]
  403d04:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
  403d08:	048c      	lsls	r4, r1, #18
  403d0a:	900e      	str	r0, [sp, #56]	; 0x38
  403d0c:	9306      	str	r3, [sp, #24]
  403d0e:	d406      	bmi.n	403d1e <__ssvfscanf_r+0x22>
  403d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  403d12:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  403d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  403d1a:	81a9      	strh	r1, [r5, #12]
  403d1c:	666b      	str	r3, [r5, #100]	; 0x64
  403d1e:	4692      	mov	sl, r2
  403d20:	2400      	movs	r4, #0
  403d22:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403d26:	9409      	str	r4, [sp, #36]	; 0x24
  403d28:	940c      	str	r4, [sp, #48]	; 0x30
  403d2a:	46a1      	mov	r9, r4
  403d2c:	940b      	str	r4, [sp, #44]	; 0x2c
  403d2e:	f8df 83e4 	ldr.w	r8, [pc, #996]	; 404114 <__ssvfscanf_r+0x418>
  403d32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  403d34:	9313      	str	r3, [sp, #76]	; 0x4c
  403d36:	b343      	cbz	r3, 403d8a <__ssvfscanf_r+0x8e>
  403d38:	f8d8 1000 	ldr.w	r1, [r8]
  403d3c:	18c8      	adds	r0, r1, r3
  403d3e:	7840      	ldrb	r0, [r0, #1]
  403d40:	f000 0008 	and.w	r0, r0, #8
  403d44:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  403d48:	b320      	cbz	r0, 403d94 <__ssvfscanf_r+0x98>
  403d4a:	686b      	ldr	r3, [r5, #4]
  403d4c:	e00e      	b.n	403d6c <__ssvfscanf_r+0x70>
  403d4e:	682b      	ldr	r3, [r5, #0]
  403d50:	f8d8 2000 	ldr.w	r2, [r8]
  403d54:	7819      	ldrb	r1, [r3, #0]
  403d56:	440a      	add	r2, r1
  403d58:	3301      	adds	r3, #1
  403d5a:	7852      	ldrb	r2, [r2, #1]
  403d5c:	0710      	lsls	r0, r2, #28
  403d5e:	d50d      	bpl.n	403d7c <__ssvfscanf_r+0x80>
  403d60:	686a      	ldr	r2, [r5, #4]
  403d62:	602b      	str	r3, [r5, #0]
  403d64:	1e53      	subs	r3, r2, #1
  403d66:	f109 0901 	add.w	r9, r9, #1
  403d6a:	606b      	str	r3, [r5, #4]
  403d6c:	2b00      	cmp	r3, #0
  403d6e:	dcee      	bgt.n	403d4e <__ssvfscanf_r+0x52>
  403d70:	4630      	mov	r0, r6
  403d72:	4629      	mov	r1, r5
  403d74:	f004 fc3c 	bl	4085f0 <__ssrefill_r>
  403d78:	2800      	cmp	r0, #0
  403d7a:	d0e8      	beq.n	403d4e <__ssvfscanf_r+0x52>
  403d7c:	4652      	mov	r2, sl
  403d7e:	4692      	mov	sl, r2
  403d80:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403d84:	9313      	str	r3, [sp, #76]	; 0x4c
  403d86:	2b00      	cmp	r3, #0
  403d88:	d1d6      	bne.n	403d38 <__ssvfscanf_r+0x3c>
  403d8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403d8c:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  403d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d94:	2b25      	cmp	r3, #37	; 0x25
  403d96:	f040 8084 	bne.w	403ea2 <__ssvfscanf_r+0x1a6>
  403d9a:	7853      	ldrb	r3, [r2, #1]
  403d9c:	463c      	mov	r4, r7
  403d9e:	f10a 0201 	add.w	r2, sl, #1
  403da2:	2b78      	cmp	r3, #120	; 0x78
  403da4:	f200 82e5 	bhi.w	404372 <__ssvfscanf_r+0x676>
  403da8:	e8df f013 	tbh	[pc, r3, lsl #1]
  403dac:	02e3008f 	.word	0x02e3008f
  403db0:	02e302e3 	.word	0x02e302e3
  403db4:	02e302e3 	.word	0x02e302e3
  403db8:	02e302e3 	.word	0x02e302e3
  403dbc:	02e302e3 	.word	0x02e302e3
  403dc0:	02e302e3 	.word	0x02e302e3
  403dc4:	02e302e3 	.word	0x02e302e3
  403dc8:	02e302e3 	.word	0x02e302e3
  403dcc:	02e302e3 	.word	0x02e302e3
  403dd0:	02e302e3 	.word	0x02e302e3
  403dd4:	02e302e3 	.word	0x02e302e3
  403dd8:	02e302e3 	.word	0x02e302e3
  403ddc:	02e302e3 	.word	0x02e302e3
  403de0:	02e302e3 	.word	0x02e302e3
  403de4:	02e302e3 	.word	0x02e302e3
  403de8:	02e302e3 	.word	0x02e302e3
  403dec:	02e302e3 	.word	0x02e302e3
  403df0:	02e302e3 	.word	0x02e302e3
  403df4:	007902e3 	.word	0x007902e3
  403df8:	02e302e3 	.word	0x02e302e3
  403dfc:	02e302e3 	.word	0x02e302e3
  403e00:	02e30226 	.word	0x02e30226
  403e04:	02e302e3 	.word	0x02e302e3
  403e08:	02e302e3 	.word	0x02e302e3
  403e0c:	024f024f 	.word	0x024f024f
  403e10:	024f024f 	.word	0x024f024f
  403e14:	024f024f 	.word	0x024f024f
  403e18:	024f024f 	.word	0x024f024f
  403e1c:	024f024f 	.word	0x024f024f
  403e20:	02e302e3 	.word	0x02e302e3
  403e24:	02e302e3 	.word	0x02e302e3
  403e28:	02e302e3 	.word	0x02e302e3
  403e2c:	02e302e3 	.word	0x02e302e3
  403e30:	02e302e3 	.word	0x02e302e3
  403e34:	0273022c 	.word	0x0273022c
  403e38:	027302e3 	.word	0x027302e3
  403e3c:	02e302e3 	.word	0x02e302e3
  403e40:	02e302e3 	.word	0x02e302e3
  403e44:	02e3026d 	.word	0x02e3026d
  403e48:	026302e3 	.word	0x026302e3
  403e4c:	02e302e3 	.word	0x02e302e3
  403e50:	02e302e3 	.word	0x02e302e3
  403e54:	02e302e3 	.word	0x02e302e3
  403e58:	02e302e3 	.word	0x02e302e3
  403e5c:	02e30259 	.word	0x02e30259
  403e60:	029302e3 	.word	0x029302e3
  403e64:	02e302e3 	.word	0x02e302e3
  403e68:	02e302e3 	.word	0x02e302e3
  403e6c:	02e302e3 	.word	0x02e302e3
  403e70:	028d02e3 	.word	0x028d02e3
  403e74:	0273029e 	.word	0x0273029e
  403e78:	02730273 	.word	0x02730273
  403e7c:	00950287 	.word	0x00950287
  403e80:	02e302e3 	.word	0x02e302e3
  403e84:	02e302b6 	.word	0x02e302b6
  403e88:	02770279 	.word	0x02770279
  403e8c:	02e302ac 	.word	0x02e302ac
  403e90:	02a802e3 	.word	0x02a802e3
  403e94:	02a002e3 	.word	0x02a002e3
  403e98:	02e302e3 	.word	0x02e302e3
  403e9c:	0259      	.short	0x0259
  403e9e:	9207      	str	r2, [sp, #28]
  403ea0:	4692      	mov	sl, r2
  403ea2:	686b      	ldr	r3, [r5, #4]
  403ea4:	2b00      	cmp	r3, #0
  403ea6:	f340 8557 	ble.w	404958 <__ssvfscanf_r+0xc5c>
  403eaa:	682b      	ldr	r3, [r5, #0]
  403eac:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
  403eb0:	7819      	ldrb	r1, [r3, #0]
  403eb2:	4291      	cmp	r1, r2
  403eb4:	f47f af69 	bne.w	403d8a <__ssvfscanf_r+0x8e>
  403eb8:	686a      	ldr	r2, [r5, #4]
  403eba:	3301      	adds	r3, #1
  403ebc:	3a01      	subs	r2, #1
  403ebe:	606a      	str	r2, [r5, #4]
  403ec0:	602b      	str	r3, [r5, #0]
  403ec2:	f109 0901 	add.w	r9, r9, #1
  403ec6:	4652      	mov	r2, sl
  403ec8:	e759      	b.n	403d7e <__ssvfscanf_r+0x82>
  403eca:	f04f 30ff 	mov.w	r0, #4294967295
  403ece:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  403ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ed6:	9207      	str	r2, [sp, #28]
  403ed8:	2300      	movs	r3, #0
  403eda:	4a8d      	ldr	r2, [pc, #564]	; (404110 <__ssvfscanf_r+0x414>)
  403edc:	9209      	str	r2, [sp, #36]	; 0x24
  403ede:	930c      	str	r3, [sp, #48]	; 0x30
  403ee0:	f04f 0a03 	mov.w	sl, #3
  403ee4:	686b      	ldr	r3, [r5, #4]
  403ee6:	2b00      	cmp	r3, #0
  403ee8:	f340 8199 	ble.w	40421e <__ssvfscanf_r+0x522>
  403eec:	0679      	lsls	r1, r7, #25
  403eee:	d512      	bpl.n	403f16 <__ssvfscanf_r+0x21a>
  403ef0:	f10a 3aff 	add.w	sl, sl, #4294967295
  403ef4:	f1ba 0f03 	cmp.w	sl, #3
  403ef8:	f200 80b7 	bhi.w	40406a <__ssvfscanf_r+0x36e>
  403efc:	e8df f01a 	tbh	[pc, sl, lsl #1]
  403f00:	008e00da 	.word	0x008e00da
  403f04:	0244001e 	.word	0x0244001e
  403f08:	4630      	mov	r0, r6
  403f0a:	4629      	mov	r1, r5
  403f0c:	f004 fb70 	bl	4085f0 <__ssrefill_r>
  403f10:	2800      	cmp	r0, #0
  403f12:	f040 818b 	bne.w	40422c <__ssvfscanf_r+0x530>
  403f16:	f8d8 1000 	ldr.w	r1, [r8]
  403f1a:	682b      	ldr	r3, [r5, #0]
  403f1c:	e000      	b.n	403f20 <__ssvfscanf_r+0x224>
  403f1e:	602b      	str	r3, [r5, #0]
  403f20:	781a      	ldrb	r2, [r3, #0]
  403f22:	440a      	add	r2, r1
  403f24:	3301      	adds	r3, #1
  403f26:	7852      	ldrb	r2, [r2, #1]
  403f28:	0712      	lsls	r2, r2, #28
  403f2a:	d5e1      	bpl.n	403ef0 <__ssvfscanf_r+0x1f4>
  403f2c:	686a      	ldr	r2, [r5, #4]
  403f2e:	3a01      	subs	r2, #1
  403f30:	2a00      	cmp	r2, #0
  403f32:	f109 0901 	add.w	r9, r9, #1
  403f36:	606a      	str	r2, [r5, #4]
  403f38:	dcf1      	bgt.n	403f1e <__ssvfscanf_r+0x222>
  403f3a:	e7e5      	b.n	403f08 <__ssvfscanf_r+0x20c>
  403f3c:	1e63      	subs	r3, r4, #1
  403f3e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  403f42:	bf86      	itte	hi
  403f44:	f46f 71ae 	mvnhi.w	r1, #348	; 0x15c
  403f48:	1863      	addhi	r3, r4, r1
  403f4a:	2300      	movls	r3, #0
  403f4c:	f04f 0b00 	mov.w	fp, #0
  403f50:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  403f54:	9308      	str	r3, [sp, #32]
  403f56:	465b      	mov	r3, fp
  403f58:	46b3      	mov	fp, r6
  403f5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  403f5c:	f8cd c014 	str.w	ip, [sp, #20]
  403f60:	46e2      	mov	sl, ip
  403f62:	bf88      	it	hi
  403f64:	f240 145d 	movwhi	r4, #349	; 0x15d
  403f68:	f447 6758 	orr.w	r7, r7, #3456	; 0xd80
  403f6c:	46cc      	mov	ip, r9
  403f6e:	6828      	ldr	r0, [r5, #0]
  403f70:	7801      	ldrb	r1, [r0, #0]
  403f72:	f1a1 022b 	sub.w	r2, r1, #43	; 0x2b
  403f76:	2a4d      	cmp	r2, #77	; 0x4d
  403f78:	f200 80e2 	bhi.w	404140 <__ssvfscanf_r+0x444>
  403f7c:	e8df f012 	tbh	[pc, r2, lsl #1]
  403f80:	00e00126 	.word	0x00e00126
  403f84:	00e00126 	.word	0x00e00126
  403f88:	00fd00e0 	.word	0x00fd00e0
  403f8c:	00cc00cc 	.word	0x00cc00cc
  403f90:	00cc00cc 	.word	0x00cc00cc
  403f94:	00cc00cc 	.word	0x00cc00cc
  403f98:	013600cc 	.word	0x013600cc
  403f9c:	00e00136 	.word	0x00e00136
  403fa0:	00e000e0 	.word	0x00e000e0
  403fa4:	00e000e0 	.word	0x00e000e0
  403fa8:	00e000e0 	.word	0x00e000e0
  403fac:	01210121 	.word	0x01210121
  403fb0:	01210121 	.word	0x01210121
  403fb4:	01210121 	.word	0x01210121
  403fb8:	00e000e0 	.word	0x00e000e0
  403fbc:	00e000e0 	.word	0x00e000e0
  403fc0:	00e000e0 	.word	0x00e000e0
  403fc4:	00e000e0 	.word	0x00e000e0
  403fc8:	00e000e0 	.word	0x00e000e0
  403fcc:	00e000e0 	.word	0x00e000e0
  403fd0:	00e000e0 	.word	0x00e000e0
  403fd4:	00e000e0 	.word	0x00e000e0
  403fd8:	012b00e0 	.word	0x012b00e0
  403fdc:	00e000e0 	.word	0x00e000e0
  403fe0:	00e000e0 	.word	0x00e000e0
  403fe4:	00e000e0 	.word	0x00e000e0
  403fe8:	00e000e0 	.word	0x00e000e0
  403fec:	01210121 	.word	0x01210121
  403ff0:	01210121 	.word	0x01210121
  403ff4:	01210121 	.word	0x01210121
  403ff8:	00e000e0 	.word	0x00e000e0
  403ffc:	00e000e0 	.word	0x00e000e0
  404000:	00e000e0 	.word	0x00e000e0
  404004:	00e000e0 	.word	0x00e000e0
  404008:	00e000e0 	.word	0x00e000e0
  40400c:	00e000e0 	.word	0x00e000e0
  404010:	00e000e0 	.word	0x00e000e0
  404014:	00e000e0 	.word	0x00e000e0
  404018:	012b00e0 	.word	0x012b00e0
  40401c:	2c00      	cmp	r4, #0
  40401e:	bf08      	it	eq
  404020:	f04f 34ff 	moveq.w	r4, #4294967295
  404024:	f017 0301 	ands.w	r3, r7, #1
  404028:	f040 817f 	bne.w	40432a <__ssvfscanf_r+0x62e>
  40402c:	06f9      	lsls	r1, r7, #27
  40402e:	f140 8390 	bpl.w	404752 <__ssvfscanf_r+0xa56>
  404032:	461f      	mov	r7, r3
  404034:	f8d8 1000 	ldr.w	r1, [r8]
  404038:	682b      	ldr	r3, [r5, #0]
  40403a:	781a      	ldrb	r2, [r3, #0]
  40403c:	440a      	add	r2, r1
  40403e:	3301      	adds	r3, #1
  404040:	7852      	ldrb	r2, [r2, #1]
  404042:	0712      	lsls	r2, r2, #28
  404044:	d431      	bmi.n	4040aa <__ssvfscanf_r+0x3ae>
  404046:	686a      	ldr	r2, [r5, #4]
  404048:	602b      	str	r3, [r5, #0]
  40404a:	3701      	adds	r7, #1
  40404c:	3a01      	subs	r2, #1
  40404e:	42bc      	cmp	r4, r7
  404050:	606a      	str	r2, [r5, #4]
  404052:	d02a      	beq.n	4040aa <__ssvfscanf_r+0x3ae>
  404054:	2a00      	cmp	r2, #0
  404056:	dcf0      	bgt.n	40403a <__ssvfscanf_r+0x33e>
  404058:	4630      	mov	r0, r6
  40405a:	4629      	mov	r1, r5
  40405c:	f004 fac8 	bl	4085f0 <__ssrefill_r>
  404060:	bb18      	cbnz	r0, 4040aa <__ssvfscanf_r+0x3ae>
  404062:	f8d8 1000 	ldr.w	r1, [r8]
  404066:	682b      	ldr	r3, [r5, #0]
  404068:	e7e7      	b.n	40403a <__ssvfscanf_r+0x33e>
  40406a:	2c00      	cmp	r4, #0
  40406c:	bf08      	it	eq
  40406e:	2401      	moveq	r4, #1
  404070:	f017 0301 	ands.w	r3, r7, #1
  404074:	f040 839f 	bne.w	4047b6 <__ssvfscanf_r+0xaba>
  404078:	06f9      	lsls	r1, r7, #27
  40407a:	f140 8454 	bpl.w	404926 <__ssvfscanf_r+0xc2a>
  40407e:	461f      	mov	r7, r3
  404080:	e008      	b.n	404094 <__ssvfscanf_r+0x398>
  404082:	441a      	add	r2, r3
  404084:	602a      	str	r2, [r5, #0]
  404086:	441f      	add	r7, r3
  404088:	1ae4      	subs	r4, r4, r3
  40408a:	f004 fab1 	bl	4085f0 <__ssrefill_r>
  40408e:	2800      	cmp	r0, #0
  404090:	f040 8441 	bne.w	404916 <__ssvfscanf_r+0xc1a>
  404094:	686b      	ldr	r3, [r5, #4]
  404096:	682a      	ldr	r2, [r5, #0]
  404098:	42a3      	cmp	r3, r4
  40409a:	4630      	mov	r0, r6
  40409c:	4629      	mov	r1, r5
  40409e:	dbf0      	blt.n	404082 <__ssvfscanf_r+0x386>
  4040a0:	1b1b      	subs	r3, r3, r4
  4040a2:	4422      	add	r2, r4
  4040a4:	606b      	str	r3, [r5, #4]
  4040a6:	4427      	add	r7, r4
  4040a8:	602a      	str	r2, [r5, #0]
  4040aa:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4040ae:	44b9      	add	r9, r7
  4040b0:	4652      	mov	r2, sl
  4040b2:	e664      	b.n	403d7e <__ssvfscanf_r+0x82>
  4040b4:	2c00      	cmp	r4, #0
  4040b6:	bf08      	it	eq
  4040b8:	f04f 34ff 	moveq.w	r4, #4294967295
  4040bc:	06fa      	lsls	r2, r7, #27
  4040be:	f140 8315 	bpl.w	4046ec <__ssvfscanf_r+0x9f0>
  4040c2:	682b      	ldr	r3, [r5, #0]
  4040c4:	2700      	movs	r7, #0
  4040c6:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  4040ca:	781a      	ldrb	r2, [r3, #0]
  4040cc:	f81b 2002 	ldrb.w	r2, [fp, r2]
  4040d0:	3301      	adds	r3, #1
  4040d2:	b1aa      	cbz	r2, 404100 <__ssvfscanf_r+0x404>
  4040d4:	686a      	ldr	r2, [r5, #4]
  4040d6:	602b      	str	r3, [r5, #0]
  4040d8:	3701      	adds	r7, #1
  4040da:	3a01      	subs	r2, #1
  4040dc:	42bc      	cmp	r4, r7
  4040de:	606a      	str	r2, [r5, #4]
  4040e0:	d0e3      	beq.n	4040aa <__ssvfscanf_r+0x3ae>
  4040e2:	2a00      	cmp	r2, #0
  4040e4:	dcf1      	bgt.n	4040ca <__ssvfscanf_r+0x3ce>
  4040e6:	4630      	mov	r0, r6
  4040e8:	4629      	mov	r1, r5
  4040ea:	f004 fa81 	bl	4085f0 <__ssrefill_r>
  4040ee:	2800      	cmp	r0, #0
  4040f0:	d1db      	bne.n	4040aa <__ssvfscanf_r+0x3ae>
  4040f2:	682b      	ldr	r3, [r5, #0]
  4040f4:	781a      	ldrb	r2, [r3, #0]
  4040f6:	f81b 2002 	ldrb.w	r2, [fp, r2]
  4040fa:	3301      	adds	r3, #1
  4040fc:	2a00      	cmp	r2, #0
  4040fe:	d1e9      	bne.n	4040d4 <__ssvfscanf_r+0x3d8>
  404100:	2f00      	cmp	r7, #0
  404102:	f43f ae42 	beq.w	403d8a <__ssvfscanf_r+0x8e>
  404106:	44b9      	add	r9, r7
  404108:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40410c:	e7d0      	b.n	4040b0 <__ssvfscanf_r+0x3b4>
  40410e:	bf00      	nop
  404110:	00408011 	.word	0x00408011
  404114:	2000051c 	.word	0x2000051c
  404118:	f8df 9364 	ldr.w	r9, [pc, #868]	; 404480 <__ssvfscanf_r+0x784>
  40411c:	f939 6016 	ldrsh.w	r6, [r9, r6, lsl #1]
  404120:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  404124:	686a      	ldr	r2, [r5, #4]
  404126:	f88a 1000 	strb.w	r1, [sl]
  40412a:	3a01      	subs	r2, #1
  40412c:	2a00      	cmp	r2, #0
  40412e:	f10a 0a01 	add.w	sl, sl, #1
  404132:	606a      	str	r2, [r5, #4]
  404134:	dd38      	ble.n	4041a8 <__ssvfscanf_r+0x4ac>
  404136:	3001      	adds	r0, #1
  404138:	6028      	str	r0, [r5, #0]
  40413a:	3c01      	subs	r4, #1
  40413c:	f47f af17 	bne.w	403f6e <__ssvfscanf_r+0x272>
  404140:	05f9      	lsls	r1, r7, #23
  404142:	960c      	str	r6, [sp, #48]	; 0x30
  404144:	46e1      	mov	r9, ip
  404146:	465e      	mov	r6, fp
  404148:	469b      	mov	fp, r3
  40414a:	d508      	bpl.n	40415e <__ssvfscanf_r+0x462>
  40414c:	9c05      	ldr	r4, [sp, #20]
  40414e:	45a2      	cmp	sl, r4
  404150:	f200 840a 	bhi.w	404968 <__ssvfscanf_r+0xc6c>
  404154:	f8dd c014 	ldr.w	ip, [sp, #20]
  404158:	45e2      	cmp	sl, ip
  40415a:	f43f ae16 	beq.w	403d8a <__ssvfscanf_r+0x8e>
  40415e:	f017 0410 	ands.w	r4, r7, #16
  404162:	f000 8372 	beq.w	40484a <__ssvfscanf_r+0xb4e>
  404166:	f8dd c014 	ldr.w	ip, [sp, #20]
  40416a:	ebcc 0a0a 	rsb	sl, ip, sl
  40416e:	44d3      	add	fp, sl
  404170:	f8dd a01c 	ldr.w	sl, [sp, #28]
  404174:	44d9      	add	r9, fp
  404176:	4652      	mov	r2, sl
  404178:	e601      	b.n	403d7e <__ssvfscanf_r+0x82>
  40417a:	053a      	lsls	r2, r7, #20
  40417c:	d5d2      	bpl.n	404124 <__ssvfscanf_r+0x428>
  40417e:	b916      	cbnz	r6, 404186 <__ssvfscanf_r+0x48a>
  404180:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  404184:	2608      	movs	r6, #8
  404186:	057a      	lsls	r2, r7, #21
  404188:	f100 837d 	bmi.w	404886 <__ssvfscanf_r+0xb8a>
  40418c:	9a08      	ldr	r2, [sp, #32]
  40418e:	f427 7760 	bic.w	r7, r7, #896	; 0x380
  404192:	b112      	cbz	r2, 40419a <__ssvfscanf_r+0x49e>
  404194:	3a01      	subs	r2, #1
  404196:	9208      	str	r2, [sp, #32]
  404198:	3401      	adds	r4, #1
  40419a:	686a      	ldr	r2, [r5, #4]
  40419c:	3a01      	subs	r2, #1
  40419e:	2a00      	cmp	r2, #0
  4041a0:	f103 0301 	add.w	r3, r3, #1
  4041a4:	606a      	str	r2, [r5, #4]
  4041a6:	dcc6      	bgt.n	404136 <__ssvfscanf_r+0x43a>
  4041a8:	4658      	mov	r0, fp
  4041aa:	4629      	mov	r1, r5
  4041ac:	9303      	str	r3, [sp, #12]
  4041ae:	f8cd c010 	str.w	ip, [sp, #16]
  4041b2:	f004 fa1d 	bl	4085f0 <__ssrefill_r>
  4041b6:	9b03      	ldr	r3, [sp, #12]
  4041b8:	f8dd c010 	ldr.w	ip, [sp, #16]
  4041bc:	2800      	cmp	r0, #0
  4041be:	d0bc      	beq.n	40413a <__ssvfscanf_r+0x43e>
  4041c0:	e7be      	b.n	404140 <__ssvfscanf_r+0x444>
  4041c2:	2e0a      	cmp	r6, #10
  4041c4:	ddbc      	ble.n	404140 <__ssvfscanf_r+0x444>
  4041c6:	f427 6738 	bic.w	r7, r7, #2944	; 0xb80
  4041ca:	e7ab      	b.n	404124 <__ssvfscanf_r+0x428>
  4041cc:	063a      	lsls	r2, r7, #24
  4041ce:	d5b7      	bpl.n	404140 <__ssvfscanf_r+0x444>
  4041d0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4041d4:	e7a6      	b.n	404124 <__ssvfscanf_r+0x428>
  4041d6:	f407 62c0 	and.w	r2, r7, #1536	; 0x600
  4041da:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4041de:	d1af      	bne.n	404140 <__ssvfscanf_r+0x444>
  4041e0:	f427 7700 	bic.w	r7, r7, #512	; 0x200
  4041e4:	f447 67a0 	orr.w	r7, r7, #1280	; 0x500
  4041e8:	2610      	movs	r6, #16
  4041ea:	e79b      	b.n	404124 <__ssvfscanf_r+0x428>
  4041ec:	4aa4      	ldr	r2, [pc, #656]	; (404480 <__ssvfscanf_r+0x784>)
  4041ee:	f932 6016 	ldrsh.w	r6, [r2, r6, lsl #1]
  4041f2:	2e08      	cmp	r6, #8
  4041f4:	dce7      	bgt.n	4041c6 <__ssvfscanf_r+0x4ca>
  4041f6:	e7a3      	b.n	404140 <__ssvfscanf_r+0x444>
  4041f8:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4041fc:	f047 0710 	orr.w	r7, r7, #16
  404200:	4692      	mov	sl, r2
  404202:	e5cc      	b.n	403d9e <__ssvfscanf_r+0xa2>
  404204:	9207      	str	r2, [sp, #28]
  404206:	f047 0701 	orr.w	r7, r7, #1
  40420a:	686b      	ldr	r3, [r5, #4]
  40420c:	489d      	ldr	r0, [pc, #628]	; (404484 <__ssvfscanf_r+0x788>)
  40420e:	9009      	str	r0, [sp, #36]	; 0x24
  404210:	210a      	movs	r1, #10
  404212:	2b00      	cmp	r3, #0
  404214:	910c      	str	r1, [sp, #48]	; 0x30
  404216:	f04f 0a03 	mov.w	sl, #3
  40421a:	f73f ae67 	bgt.w	403eec <__ssvfscanf_r+0x1f0>
  40421e:	4630      	mov	r0, r6
  404220:	4629      	mov	r1, r5
  404222:	f004 f9e5 	bl	4085f0 <__ssrefill_r>
  404226:	2800      	cmp	r0, #0
  404228:	f43f ae60 	beq.w	403eec <__ssvfscanf_r+0x1f0>
  40422c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40422e:	2c00      	cmp	r4, #0
  404230:	f43f ae4b 	beq.w	403eca <__ssvfscanf_r+0x1ce>
  404234:	89ab      	ldrh	r3, [r5, #12]
  404236:	4620      	mov	r0, r4
  404238:	f013 0f40 	tst.w	r3, #64	; 0x40
  40423c:	bf18      	it	ne
  40423e:	f04f 30ff 	movne.w	r0, #4294967295
  404242:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
  404246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40424a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40424e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
  404252:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
  404256:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40425a:	4692      	mov	sl, r2
  40425c:	e59f      	b.n	403d9e <__ssvfscanf_r+0xa2>
  40425e:	9207      	str	r2, [sp, #28]
  404260:	2310      	movs	r3, #16
  404262:	4a89      	ldr	r2, [pc, #548]	; (404488 <__ssvfscanf_r+0x78c>)
  404264:	9209      	str	r2, [sp, #36]	; 0x24
  404266:	f447 7700 	orr.w	r7, r7, #512	; 0x200
  40426a:	930c      	str	r3, [sp, #48]	; 0x30
  40426c:	f04f 0a03 	mov.w	sl, #3
  404270:	e638      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  404272:	9207      	str	r2, [sp, #28]
  404274:	f047 0701 	orr.w	r7, r7, #1
  404278:	4a83      	ldr	r2, [pc, #524]	; (404488 <__ssvfscanf_r+0x78c>)
  40427a:	9209      	str	r2, [sp, #36]	; 0x24
  40427c:	2308      	movs	r3, #8
  40427e:	930c      	str	r3, [sp, #48]	; 0x30
  404280:	f04f 0a03 	mov.w	sl, #3
  404284:	e62e      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  404286:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40428a:	f047 0702 	orr.w	r7, r7, #2
  40428e:	4692      	mov	sl, r2
  404290:	e585      	b.n	403d9e <__ssvfscanf_r+0xa2>
  404292:	9207      	str	r2, [sp, #28]
  404294:	f04f 0a04 	mov.w	sl, #4
  404298:	e624      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  40429a:	9207      	str	r2, [sp, #28]
  40429c:	e7ec      	b.n	404278 <__ssvfscanf_r+0x57c>
  40429e:	06f9      	lsls	r1, r7, #27
  4042a0:	9207      	str	r2, [sp, #28]
  4042a2:	d462      	bmi.n	40436a <__ssvfscanf_r+0x66e>
  4042a4:	077b      	lsls	r3, r7, #29
  4042a6:	f140 8381 	bpl.w	4049ac <__ssvfscanf_r+0xcb0>
  4042aa:	9c06      	ldr	r4, [sp, #24]
  4042ac:	6823      	ldr	r3, [r4, #0]
  4042ae:	3404      	adds	r4, #4
  4042b0:	4692      	mov	sl, r2
  4042b2:	f8a3 9000 	strh.w	r9, [r3]
  4042b6:	9406      	str	r4, [sp, #24]
  4042b8:	e560      	b.n	403d7c <__ssvfscanf_r+0x80>
  4042ba:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4042be:	f047 0704 	orr.w	r7, r7, #4
  4042c2:	4692      	mov	sl, r2
  4042c4:	e56b      	b.n	403d9e <__ssvfscanf_r+0xa2>
  4042c6:	9207      	str	r2, [sp, #28]
  4042c8:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4042cc:	f04f 0a00 	mov.w	sl, #0
  4042d0:	e608      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  4042d2:	4611      	mov	r1, r2
  4042d4:	a816      	add	r0, sp, #88	; 0x58
  4042d6:	9207      	str	r2, [sp, #28]
  4042d8:	f002 fe78 	bl	406fcc <__sccl>
  4042dc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4042e0:	9007      	str	r0, [sp, #28]
  4042e2:	f04f 0a01 	mov.w	sl, #1
  4042e6:	e5fd      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  4042e8:	9207      	str	r2, [sp, #28]
  4042ea:	e78e      	b.n	40420a <__ssvfscanf_r+0x50e>
  4042ec:	4866      	ldr	r0, [pc, #408]	; (404488 <__ssvfscanf_r+0x78c>)
  4042ee:	9207      	str	r2, [sp, #28]
  4042f0:	210a      	movs	r1, #10
  4042f2:	9009      	str	r0, [sp, #36]	; 0x24
  4042f4:	910c      	str	r1, [sp, #48]	; 0x30
  4042f6:	f04f 0a03 	mov.w	sl, #3
  4042fa:	e5f3      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  4042fc:	9207      	str	r2, [sp, #28]
  4042fe:	f04f 0a02 	mov.w	sl, #2
  404302:	e5ef      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  404304:	4860      	ldr	r0, [pc, #384]	; (404488 <__ssvfscanf_r+0x78c>)
  404306:	9207      	str	r2, [sp, #28]
  404308:	2110      	movs	r1, #16
  40430a:	f447 7708 	orr.w	r7, r7, #544	; 0x220
  40430e:	9009      	str	r0, [sp, #36]	; 0x24
  404310:	910c      	str	r1, [sp, #48]	; 0x30
  404312:	f04f 0a03 	mov.w	sl, #3
  404316:	e5e5      	b.n	403ee4 <__ssvfscanf_r+0x1e8>
  404318:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40431c:	2b6c      	cmp	r3, #108	; 0x6c
  40431e:	f000 8336 	beq.w	40498e <__ssvfscanf_r+0xc92>
  404322:	f047 0701 	orr.w	r7, r7, #1
  404326:	4692      	mov	sl, r2
  404328:	e539      	b.n	403d9e <__ssvfscanf_r+0xa2>
  40432a:	a814      	add	r0, sp, #80	; 0x50
  40432c:	2100      	movs	r1, #0
  40432e:	2208      	movs	r2, #8
  404330:	900a      	str	r0, [sp, #40]	; 0x28
  404332:	f7ff fa09 	bl	403748 <memset>
  404336:	f017 0b10 	ands.w	fp, r7, #16
  40433a:	f000 82bd 	beq.w	4048b8 <__ssvfscanf_r+0xbbc>
  40433e:	f10d 0a4c 	add.w	sl, sp, #76	; 0x4c
  404342:	2200      	movs	r2, #0
  404344:	6829      	ldr	r1, [r5, #0]
  404346:	f8d8 3000 	ldr.w	r3, [r8]
  40434a:	7809      	ldrb	r1, [r1, #0]
  40434c:	440b      	add	r3, r1
  40434e:	785b      	ldrb	r3, [r3, #1]
  404350:	0718      	lsls	r0, r3, #28
  404352:	d402      	bmi.n	40435a <__ssvfscanf_r+0x65e>
  404354:	2c00      	cmp	r4, #0
  404356:	f040 8372 	bne.w	404a3e <__ssvfscanf_r+0xd42>
  40435a:	f1bb 0f00 	cmp.w	fp, #0
  40435e:	d104      	bne.n	40436a <__ssvfscanf_r+0x66e>
  404360:	f8ca b000 	str.w	fp, [sl]
  404364:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404366:	3401      	adds	r4, #1
  404368:	940b      	str	r4, [sp, #44]	; 0x2c
  40436a:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40436e:	4652      	mov	r2, sl
  404370:	e505      	b.n	403d7e <__ssvfscanf_r+0x82>
  404372:	440b      	add	r3, r1
  404374:	9207      	str	r2, [sp, #28]
  404376:	785b      	ldrb	r3, [r3, #1]
  404378:	f003 0303 	and.w	r3, r3, #3
  40437c:	2b01      	cmp	r3, #1
  40437e:	f47f af44 	bne.w	40420a <__ssvfscanf_r+0x50e>
  404382:	f047 0701 	orr.w	r7, r7, #1
  404386:	e740      	b.n	40420a <__ssvfscanf_r+0x50e>
  404388:	4630      	mov	r0, r6
  40438a:	f001 ffcf 	bl	40632c <_localeconv_r>
  40438e:	1e63      	subs	r3, r4, #1
  404390:	6800      	ldr	r0, [r0, #0]
  404392:	900f      	str	r0, [sp, #60]	; 0x3c
  404394:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
  404398:	f240 81a5 	bls.w	4046e6 <__ssvfscanf_r+0x9ea>
  40439c:	f46f 70ae 	mvn.w	r0, #348	; 0x15c
  4043a0:	4404      	add	r4, r0
  4043a2:	940d      	str	r4, [sp, #52]	; 0x34
  4043a4:	f240 145d 	movw	r4, #349	; 0x15d
  4043a8:	f04f 0a00 	mov.w	sl, #0
  4043ac:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  4043b0:	960e      	str	r6, [sp, #56]	; 0x38
  4043b2:	f8cd c014 	str.w	ip, [sp, #20]
  4043b6:	f447 67f0 	orr.w	r7, r7, #1920	; 0x780
  4043ba:	4653      	mov	r3, sl
  4043bc:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  4043c0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  4043c4:	f8cd a020 	str.w	sl, [sp, #32]
  4043c8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  4043cc:	46e3      	mov	fp, ip
  4043ce:	4656      	mov	r6, sl
  4043d0:	6828      	ldr	r0, [r5, #0]
  4043d2:	7802      	ldrb	r2, [r0, #0]
  4043d4:	f1a2 012b 	sub.w	r1, r2, #43	; 0x2b
  4043d8:	294e      	cmp	r1, #78	; 0x4e
  4043da:	f200 8156 	bhi.w	40468a <__ssvfscanf_r+0x98e>
  4043de:	e8df f011 	tbh	[pc, r1, lsl #1]
  4043e2:	007e      	.short	0x007e
  4043e4:	007e0154 	.word	0x007e0154
  4043e8:	01540154 	.word	0x01540154
  4043ec:	00550072 	.word	0x00550072
  4043f0:	00550055 	.word	0x00550055
  4043f4:	00550055 	.word	0x00550055
  4043f8:	00550055 	.word	0x00550055
  4043fc:	00550055 	.word	0x00550055
  404400:	01540154 	.word	0x01540154
  404404:	01540154 	.word	0x01540154
  404408:	01540154 	.word	0x01540154
  40440c:	014f0154 	.word	0x014f0154
  404410:	01540154 	.word	0x01540154
  404414:	01350154 	.word	0x01350154
  404418:	0154012e 	.word	0x0154012e
  40441c:	00a40154 	.word	0x00a40154
  404420:	01540154 	.word	0x01540154
  404424:	01540154 	.word	0x01540154
  404428:	0154008f 	.word	0x0154008f
  40442c:	01540154 	.word	0x01540154
  404430:	01540154 	.word	0x01540154
  404434:	01540089 	.word	0x01540089
  404438:	01540154 	.word	0x01540154
  40443c:	00830154 	.word	0x00830154
  404440:	01540154 	.word	0x01540154
  404444:	01540154 	.word	0x01540154
  404448:	01540154 	.word	0x01540154
  40444c:	014f0154 	.word	0x014f0154
  404450:	01540154 	.word	0x01540154
  404454:	01350154 	.word	0x01350154
  404458:	0154012e 	.word	0x0154012e
  40445c:	00a40154 	.word	0x00a40154
  404460:	01540154 	.word	0x01540154
  404464:	01540154 	.word	0x01540154
  404468:	0154008f 	.word	0x0154008f
  40446c:	01540154 	.word	0x01540154
  404470:	01540154 	.word	0x01540154
  404474:	01540089 	.word	0x01540089
  404478:	01540154 	.word	0x01540154
  40447c:	00830154 	.word	0x00830154
  404480:	0040d0d0 	.word	0x0040d0d0
  404484:	00408011 	.word	0x00408011
  404488:	004082c1 	.word	0x004082c1
  40448c:	eb03 010a 	add.w	r1, r3, sl
  404490:	b999      	cbnz	r1, 4044ba <__ssvfscanf_r+0x7be>
  404492:	f427 77c0 	bic.w	r7, r7, #384	; 0x180
  404496:	f88b 2000 	strb.w	r2, [fp]
  40449a:	f10b 0b01 	add.w	fp, fp, #1
  40449e:	686a      	ldr	r2, [r5, #4]
  4044a0:	3a01      	subs	r2, #1
  4044a2:	2a00      	cmp	r2, #0
  4044a4:	f104 34ff 	add.w	r4, r4, #4294967295
  4044a8:	f109 0901 	add.w	r9, r9, #1
  4044ac:	606a      	str	r2, [r5, #4]
  4044ae:	f340 80fa 	ble.w	4046a6 <__ssvfscanf_r+0x9aa>
  4044b2:	3001      	adds	r0, #1
  4044b4:	6028      	str	r0, [r5, #0]
  4044b6:	2c00      	cmp	r4, #0
  4044b8:	d18a      	bne.n	4043d0 <__ssvfscanf_r+0x6d4>
  4044ba:	9608      	str	r6, [sp, #32]
  4044bc:	9c08      	ldr	r4, [sp, #32]
  4044be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4044c0:	2c00      	cmp	r4, #0
  4044c2:	d041      	beq.n	404548 <__ssvfscanf_r+0x84c>
  4044c4:	e10c      	b.n	4046e0 <__ssvfscanf_r+0x9e4>
  4044c6:	05f9      	lsls	r1, r7, #23
  4044c8:	d5e0      	bpl.n	40448c <__ssvfscanf_r+0x790>
  4044ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4044cc:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4044d0:	3601      	adds	r6, #1
  4044d2:	2a00      	cmp	r2, #0
  4044d4:	d0e3      	beq.n	40449e <__ssvfscanf_r+0x7a2>
  4044d6:	3a01      	subs	r2, #1
  4044d8:	920d      	str	r2, [sp, #52]	; 0x34
  4044da:	3401      	adds	r4, #1
  4044dc:	e7df      	b.n	40449e <__ssvfscanf_r+0x7a2>
  4044de:	0639      	lsls	r1, r7, #24
  4044e0:	d5eb      	bpl.n	4044ba <__ssvfscanf_r+0x7be>
  4044e2:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4044e6:	e7d6      	b.n	404496 <__ssvfscanf_r+0x79a>
  4044e8:	f1ba 0f07 	cmp.w	sl, #7
  4044ec:	d1e5      	bne.n	4044ba <__ssvfscanf_r+0x7be>
  4044ee:	f04f 0a08 	mov.w	sl, #8
  4044f2:	e7d0      	b.n	404496 <__ssvfscanf_r+0x79a>
  4044f4:	f1ba 0f06 	cmp.w	sl, #6
  4044f8:	d1df      	bne.n	4044ba <__ssvfscanf_r+0x7be>
  4044fa:	f04f 0a07 	mov.w	sl, #7
  4044fe:	e7ca      	b.n	404496 <__ssvfscanf_r+0x79a>
  404500:	2b00      	cmp	r3, #0
  404502:	f040 80e6 	bne.w	4046d2 <__ssvfscanf_r+0x9d6>
  404506:	b92e      	cbnz	r6, 404514 <__ssvfscanf_r+0x818>
  404508:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40450c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  404510:	f000 8239 	beq.w	404986 <__ssvfscanf_r+0xc8a>
  404514:	f1ba 0f01 	cmp.w	sl, #1
  404518:	d002      	beq.n	404520 <__ssvfscanf_r+0x824>
  40451a:	f1ba 0f04 	cmp.w	sl, #4
  40451e:	d1cc      	bne.n	4044ba <__ssvfscanf_r+0x7be>
  404520:	f10a 0a01 	add.w	sl, sl, #1
  404524:	fa5f fa8a 	uxtb.w	sl, sl
  404528:	e7b5      	b.n	404496 <__ssvfscanf_r+0x79a>
  40452a:	f1ba 0f00 	cmp.w	sl, #0
  40452e:	f040 80c7 	bne.w	4046c0 <__ssvfscanf_r+0x9c4>
  404532:	2e00      	cmp	r6, #0
  404534:	f040 80d2 	bne.w	4046dc <__ssvfscanf_r+0x9e0>
  404538:	f407 61e0 	and.w	r1, r7, #1792	; 0x700
  40453c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  404540:	f000 821c 	beq.w	40497c <__ssvfscanf_r+0xc80>
  404544:	9608      	str	r6, [sp, #32]
  404546:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  404548:	f103 3cff 	add.w	ip, r3, #4294967295
  40454c:	f1bc 0f01 	cmp.w	ip, #1
  404550:	f240 82dc 	bls.w	404b0c <__ssvfscanf_r+0xe10>
  404554:	f10a 32ff 	add.w	r2, sl, #4294967295
  404558:	2a06      	cmp	r2, #6
  40455a:	d822      	bhi.n	4045a2 <__ssvfscanf_r+0x8a6>
  40455c:	f1ba 0f02 	cmp.w	sl, #2
  404560:	f240 82ad 	bls.w	404abe <__ssvfscanf_r+0xdc2>
  404564:	f1ba 0f03 	cmp.w	sl, #3
  404568:	d01b      	beq.n	4045a2 <__ssvfscanf_r+0x8a6>
  40456a:	f1aa 0a04 	sub.w	sl, sl, #4
  40456e:	fa5f fa8a 	uxtb.w	sl, sl
  404572:	f10b 34ff 	add.w	r4, fp, #4294967295
  404576:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  40457a:	ebca 0404 	rsb	r4, sl, r4
  40457e:	46da      	mov	sl, fp
  404580:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
  404584:	4630      	mov	r0, r6
  404586:	462a      	mov	r2, r5
  404588:	f003 fff2 	bl	408570 <_sungetc_r>
  40458c:	45a2      	cmp	sl, r4
  40458e:	d1f7      	bne.n	404580 <__ssvfscanf_r+0x884>
  404590:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  404594:	f109 39ff 	add.w	r9, r9, #4294967295
  404598:	ea6f 020c 	mvn.w	r2, ip
  40459c:	ebcc 0909 	rsb	r9, ip, r9
  4045a0:	4493      	add	fp, r2
  4045a2:	05f8      	lsls	r0, r7, #23
  4045a4:	d51c      	bpl.n	4045e0 <__ssvfscanf_r+0x8e4>
  4045a6:	0579      	lsls	r1, r7, #21
  4045a8:	f100 829b 	bmi.w	404ae2 <__ssvfscanf_r+0xde6>
  4045ac:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
  4045b0:	2965      	cmp	r1, #101	; 0x65
  4045b2:	f10b 34ff 	add.w	r4, fp, #4294967295
  4045b6:	f109 3aff 	add.w	sl, r9, #4294967295
  4045ba:	d00b      	beq.n	4045d4 <__ssvfscanf_r+0x8d8>
  4045bc:	2945      	cmp	r1, #69	; 0x45
  4045be:	d009      	beq.n	4045d4 <__ssvfscanf_r+0x8d8>
  4045c0:	4630      	mov	r0, r6
  4045c2:	462a      	mov	r2, r5
  4045c4:	f003 ffd4 	bl	408570 <_sungetc_r>
  4045c8:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
  4045cc:	f1a9 0a02 	sub.w	sl, r9, #2
  4045d0:	f1ab 0402 	sub.w	r4, fp, #2
  4045d4:	4630      	mov	r0, r6
  4045d6:	462a      	mov	r2, r5
  4045d8:	f003 ffca 	bl	408570 <_sungetc_r>
  4045dc:	46d1      	mov	r9, sl
  4045de:	46a3      	mov	fp, r4
  4045e0:	f017 0210 	ands.w	r2, r7, #16
  4045e4:	f47f aec1 	bne.w	40436a <__ssvfscanf_r+0x66e>
  4045e8:	f407 61c0 	and.w	r1, r7, #1536	; 0x600
  4045ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  4045f0:	f88b 2000 	strb.w	r2, [fp]
  4045f4:	f000 81d3 	beq.w	40499e <__ssvfscanf_r+0xca2>
  4045f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4045fa:	2c00      	cmp	r4, #0
  4045fc:	f040 816e 	bne.w	4048dc <__ssvfscanf_r+0xbe0>
  404600:	2200      	movs	r2, #0
  404602:	9905      	ldr	r1, [sp, #20]
  404604:	4630      	mov	r0, r6
  404606:	f002 fd63 	bl	4070d0 <_strtod_r>
  40460a:	07fa      	lsls	r2, r7, #31
  40460c:	4682      	mov	sl, r0
  40460e:	468b      	mov	fp, r1
  404610:	f100 8132 	bmi.w	404878 <__ssvfscanf_r+0xb7c>
  404614:	07bb      	lsls	r3, r7, #30
  404616:	f140 81e8 	bpl.w	4049ea <__ssvfscanf_r+0xcee>
  40461a:	f8dd c018 	ldr.w	ip, [sp, #24]
  40461e:	f8dc 3000 	ldr.w	r3, [ip]
  404622:	f10c 0c04 	add.w	ip, ip, #4
  404626:	f8cd c018 	str.w	ip, [sp, #24]
  40462a:	e9c3 ab00 	strd	sl, fp, [r3]
  40462e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404630:	f8dd a01c 	ldr.w	sl, [sp, #28]
  404634:	3401      	adds	r4, #1
  404636:	940b      	str	r4, [sp, #44]	; 0x2c
  404638:	4652      	mov	r2, sl
  40463a:	f7ff bba0 	b.w	403d7e <__ssvfscanf_r+0x82>
  40463e:	f1ba 0f02 	cmp.w	sl, #2
  404642:	f47f af3a 	bne.w	4044ba <__ssvfscanf_r+0x7be>
  404646:	f04f 0a03 	mov.w	sl, #3
  40464a:	e724      	b.n	404496 <__ssvfscanf_r+0x79a>
  40464c:	f407 61a0 	and.w	r1, r7, #1280	; 0x500
  404650:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
  404654:	d005      	beq.n	404662 <__ssvfscanf_r+0x966>
  404656:	0579      	lsls	r1, r7, #21
  404658:	f57f af2f 	bpl.w	4044ba <__ssvfscanf_r+0x7be>
  40465c:	2e00      	cmp	r6, #0
  40465e:	f43f af71 	beq.w	404544 <__ssvfscanf_r+0x848>
  404662:	05b9      	lsls	r1, r7, #22
  404664:	d406      	bmi.n	404674 <__ssvfscanf_r+0x978>
  404666:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  40466a:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  40466e:	ebcc 0606 	rsb	r6, ip, r6
  404672:	9610      	str	r6, [sp, #64]	; 0x40
  404674:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  404678:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
  40467c:	2600      	movs	r6, #0
  40467e:	e70a      	b.n	404496 <__ssvfscanf_r+0x79a>
  404680:	2b01      	cmp	r3, #1
  404682:	f47f af1a 	bne.w	4044ba <__ssvfscanf_r+0x7be>
  404686:	2302      	movs	r3, #2
  404688:	e705      	b.n	404496 <__ssvfscanf_r+0x79a>
  40468a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  40468e:	f89c 1000 	ldrb.w	r1, [ip]
  404692:	4291      	cmp	r1, r2
  404694:	f47f af11 	bne.w	4044ba <__ssvfscanf_r+0x7be>
  404698:	05b9      	lsls	r1, r7, #22
  40469a:	f57f af0e 	bpl.w	4044ba <__ssvfscanf_r+0x7be>
  40469e:	f427 7720 	bic.w	r7, r7, #640	; 0x280
  4046a2:	960a      	str	r6, [sp, #40]	; 0x28
  4046a4:	e6f7      	b.n	404496 <__ssvfscanf_r+0x79a>
  4046a6:	980e      	ldr	r0, [sp, #56]	; 0x38
  4046a8:	9303      	str	r3, [sp, #12]
  4046aa:	4629      	mov	r1, r5
  4046ac:	f003 ffa0 	bl	4085f0 <__ssrefill_r>
  4046b0:	9b03      	ldr	r3, [sp, #12]
  4046b2:	2800      	cmp	r0, #0
  4046b4:	f47f af01 	bne.w	4044ba <__ssvfscanf_r+0x7be>
  4046b8:	2c00      	cmp	r4, #0
  4046ba:	f47f ae89 	bne.w	4043d0 <__ssvfscanf_r+0x6d4>
  4046be:	e6fc      	b.n	4044ba <__ssvfscanf_r+0x7be>
  4046c0:	f1ba 0f03 	cmp.w	sl, #3
  4046c4:	f43f af2c 	beq.w	404520 <__ssvfscanf_r+0x824>
  4046c8:	f1ba 0f05 	cmp.w	sl, #5
  4046cc:	f43f af28 	beq.w	404520 <__ssvfscanf_r+0x824>
  4046d0:	e6f3      	b.n	4044ba <__ssvfscanf_r+0x7be>
  4046d2:	2b02      	cmp	r3, #2
  4046d4:	f47f af1e 	bne.w	404514 <__ssvfscanf_r+0x818>
  4046d8:	2303      	movs	r3, #3
  4046da:	e6dc      	b.n	404496 <__ssvfscanf_r+0x79a>
  4046dc:	9608      	str	r6, [sp, #32]
  4046de:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  4046e0:	f427 7780 	bic.w	r7, r7, #256	; 0x100
  4046e4:	e730      	b.n	404548 <__ssvfscanf_r+0x84c>
  4046e6:	2200      	movs	r2, #0
  4046e8:	920d      	str	r2, [sp, #52]	; 0x34
  4046ea:	e65d      	b.n	4043a8 <__ssvfscanf_r+0x6ac>
  4046ec:	f8dd c018 	ldr.w	ip, [sp, #24]
  4046f0:	f8dc 7000 	ldr.w	r7, [ip]
  4046f4:	f10c 0204 	add.w	r2, ip, #4
  4046f8:	9206      	str	r2, [sp, #24]
  4046fa:	46ba      	mov	sl, r7
  4046fc:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
  404700:	682b      	ldr	r3, [r5, #0]
  404702:	781a      	ldrb	r2, [r3, #0]
  404704:	f81b 2002 	ldrb.w	r2, [fp, r2]
  404708:	1c59      	adds	r1, r3, #1
  40470a:	b1a2      	cbz	r2, 404736 <__ssvfscanf_r+0xa3a>
  40470c:	686a      	ldr	r2, [r5, #4]
  40470e:	6029      	str	r1, [r5, #0]
  404710:	3a01      	subs	r2, #1
  404712:	606a      	str	r2, [r5, #4]
  404714:	781b      	ldrb	r3, [r3, #0]
  404716:	f80a 3b01 	strb.w	r3, [sl], #1
  40471a:	3c01      	subs	r4, #1
  40471c:	d00b      	beq.n	404736 <__ssvfscanf_r+0xa3a>
  40471e:	686b      	ldr	r3, [r5, #4]
  404720:	2b00      	cmp	r3, #0
  404722:	dced      	bgt.n	404700 <__ssvfscanf_r+0xa04>
  404724:	4630      	mov	r0, r6
  404726:	4629      	mov	r1, r5
  404728:	f003 ff62 	bl	4085f0 <__ssrefill_r>
  40472c:	2800      	cmp	r0, #0
  40472e:	d0e7      	beq.n	404700 <__ssvfscanf_r+0xa04>
  404730:	4557      	cmp	r7, sl
  404732:	f43f ad7b 	beq.w	40422c <__ssvfscanf_r+0x530>
  404736:	ebba 0707 	subs.w	r7, sl, r7
  40473a:	f43f ab26 	beq.w	403d8a <__ssvfscanf_r+0x8e>
  40473e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404740:	2300      	movs	r3, #0
  404742:	3401      	adds	r4, #1
  404744:	f88a 3000 	strb.w	r3, [sl]
  404748:	940b      	str	r4, [sp, #44]	; 0x2c
  40474a:	44b9      	add	r9, r7
  40474c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  404750:	e4ae      	b.n	4040b0 <__ssvfscanf_r+0x3b4>
  404752:	f8dd c018 	ldr.w	ip, [sp, #24]
  404756:	f8dc 7000 	ldr.w	r7, [ip]
  40475a:	f10c 0a04 	add.w	sl, ip, #4
  40475e:	46bb      	mov	fp, r7
  404760:	682b      	ldr	r3, [r5, #0]
  404762:	f8d8 2000 	ldr.w	r2, [r8]
  404766:	7819      	ldrb	r1, [r3, #0]
  404768:	440a      	add	r2, r1
  40476a:	1c59      	adds	r1, r3, #1
  40476c:	7852      	ldrb	r2, [r2, #1]
  40476e:	0710      	lsls	r0, r2, #28
  404770:	d411      	bmi.n	404796 <__ssvfscanf_r+0xa9a>
  404772:	686a      	ldr	r2, [r5, #4]
  404774:	6029      	str	r1, [r5, #0]
  404776:	3a01      	subs	r2, #1
  404778:	606a      	str	r2, [r5, #4]
  40477a:	781b      	ldrb	r3, [r3, #0]
  40477c:	f80b 3b01 	strb.w	r3, [fp], #1
  404780:	3c01      	subs	r4, #1
  404782:	d008      	beq.n	404796 <__ssvfscanf_r+0xa9a>
  404784:	686b      	ldr	r3, [r5, #4]
  404786:	2b00      	cmp	r3, #0
  404788:	dcea      	bgt.n	404760 <__ssvfscanf_r+0xa64>
  40478a:	4630      	mov	r0, r6
  40478c:	4629      	mov	r1, r5
  40478e:	f003 ff2f 	bl	4085f0 <__ssrefill_r>
  404792:	2800      	cmp	r0, #0
  404794:	d0e4      	beq.n	404760 <__ssvfscanf_r+0xa64>
  404796:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404798:	f8cd a018 	str.w	sl, [sp, #24]
  40479c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4047a0:	ebc7 070b 	rsb	r7, r7, fp
  4047a4:	2300      	movs	r3, #0
  4047a6:	3401      	adds	r4, #1
  4047a8:	44b9      	add	r9, r7
  4047aa:	940b      	str	r4, [sp, #44]	; 0x2c
  4047ac:	f88b 3000 	strb.w	r3, [fp]
  4047b0:	4652      	mov	r2, sl
  4047b2:	f7ff bae4 	b.w	403d7e <__ssvfscanf_r+0x82>
  4047b6:	ab14      	add	r3, sp, #80	; 0x50
  4047b8:	4618      	mov	r0, r3
  4047ba:	2100      	movs	r1, #0
  4047bc:	2208      	movs	r2, #8
  4047be:	930a      	str	r3, [sp, #40]	; 0x28
  4047c0:	f7fe ffc2 	bl	403748 <memset>
  4047c4:	f017 0710 	ands.w	r7, r7, #16
  4047c8:	970d      	str	r7, [sp, #52]	; 0x34
  4047ca:	d06c      	beq.n	4048a6 <__ssvfscanf_r+0xbaa>
  4047cc:	f04f 0a00 	mov.w	sl, #0
  4047d0:	9608      	str	r6, [sp, #32]
  4047d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  4047d4:	f8cd 9014 	str.w	r9, [sp, #20]
  4047d8:	f04f 0b00 	mov.w	fp, #0
  4047dc:	af56      	add	r7, sp, #344	; 0x158
  4047de:	f001 fd9f 	bl	406320 <__locale_mb_cur_max>
  4047e2:	4558      	cmp	r0, fp
  4047e4:	f43f ad22 	beq.w	40422c <__ssvfscanf_r+0x530>
  4047e8:	682b      	ldr	r3, [r5, #0]
  4047ea:	6869      	ldr	r1, [r5, #4]
  4047ec:	f813 eb01 	ldrb.w	lr, [r3], #1
  4047f0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4047f2:	602b      	str	r3, [r5, #0]
  4047f4:	3901      	subs	r1, #1
  4047f6:	f10b 0901 	add.w	r9, fp, #1
  4047fa:	9000      	str	r0, [sp, #0]
  4047fc:	464b      	mov	r3, r9
  4047fe:	6069      	str	r1, [r5, #4]
  404800:	9808      	ldr	r0, [sp, #32]
  404802:	f807 e00b 	strb.w	lr, [r7, fp]
  404806:	4651      	mov	r1, sl
  404808:	463a      	mov	r2, r7
  40480a:	f002 f8bb 	bl	406984 <_mbrtowc_r>
  40480e:	1c43      	adds	r3, r0, #1
  404810:	f43f ad0c 	beq.w	40422c <__ssvfscanf_r+0x530>
  404814:	2800      	cmp	r0, #0
  404816:	d177      	bne.n	404908 <__ssvfscanf_r+0xc0c>
  404818:	b90e      	cbnz	r6, 40481e <__ssvfscanf_r+0xb22>
  40481a:	f8ca 6000 	str.w	r6, [sl]
  40481e:	9905      	ldr	r1, [sp, #20]
  404820:	4449      	add	r1, r9
  404822:	9105      	str	r1, [sp, #20]
  404824:	3c01      	subs	r4, #1
  404826:	2e00      	cmp	r6, #0
  404828:	d172      	bne.n	404910 <__ssvfscanf_r+0xc14>
  40482a:	f10a 0a04 	add.w	sl, sl, #4
  40482e:	46b3      	mov	fp, r6
  404830:	686b      	ldr	r3, [r5, #4]
  404832:	2b00      	cmp	r3, #0
  404834:	dd2a      	ble.n	40488c <__ssvfscanf_r+0xb90>
  404836:	2c00      	cmp	r4, #0
  404838:	d1d1      	bne.n	4047de <__ssvfscanf_r+0xae2>
  40483a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40483e:	9e08      	ldr	r6, [sp, #32]
  404840:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404842:	2c00      	cmp	r4, #0
  404844:	f43f ad8e 	beq.w	404364 <__ssvfscanf_r+0x668>
  404848:	e58f      	b.n	40436a <__ssvfscanf_r+0x66e>
  40484a:	4622      	mov	r2, r4
  40484c:	f88a 4000 	strb.w	r4, [sl]
  404850:	4630      	mov	r0, r6
  404852:	9905      	ldr	r1, [sp, #20]
  404854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404856:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404858:	47a0      	blx	r4
  40485a:	06ba      	lsls	r2, r7, #26
  40485c:	d535      	bpl.n	4048ca <__ssvfscanf_r+0xbce>
  40485e:	f8dd c018 	ldr.w	ip, [sp, #24]
  404862:	f8dc 3000 	ldr.w	r3, [ip]
  404866:	f10c 0c04 	add.w	ip, ip, #4
  40486a:	f8cd c018 	str.w	ip, [sp, #24]
  40486e:	6018      	str	r0, [r3, #0]
  404870:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404872:	3401      	adds	r4, #1
  404874:	940b      	str	r4, [sp, #44]	; 0x2c
  404876:	e476      	b.n	404166 <__ssvfscanf_r+0x46a>
  404878:	9c06      	ldr	r4, [sp, #24]
  40487a:	6823      	ldr	r3, [r4, #0]
  40487c:	3404      	adds	r4, #4
  40487e:	9406      	str	r4, [sp, #24]
  404880:	e9c3 ab00 	strd	sl, fp, [r3]
  404884:	e6d3      	b.n	40462e <__ssvfscanf_r+0x932>
  404886:	f427 67b0 	bic.w	r7, r7, #1408	; 0x580
  40488a:	e44b      	b.n	404124 <__ssvfscanf_r+0x428>
  40488c:	9808      	ldr	r0, [sp, #32]
  40488e:	4629      	mov	r1, r5
  404890:	f003 feae 	bl	4085f0 <__ssrefill_r>
  404894:	2800      	cmp	r0, #0
  404896:	d0ce      	beq.n	404836 <__ssvfscanf_r+0xb3a>
  404898:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40489c:	9e08      	ldr	r6, [sp, #32]
  40489e:	f1bb 0f00 	cmp.w	fp, #0
  4048a2:	d0cd      	beq.n	404840 <__ssvfscanf_r+0xb44>
  4048a4:	e4c2      	b.n	40422c <__ssvfscanf_r+0x530>
  4048a6:	f8dd c018 	ldr.w	ip, [sp, #24]
  4048aa:	f8dc a000 	ldr.w	sl, [ip]
  4048ae:	f10c 0c04 	add.w	ip, ip, #4
  4048b2:	f8cd c018 	str.w	ip, [sp, #24]
  4048b6:	e78b      	b.n	4047d0 <__ssvfscanf_r+0xad4>
  4048b8:	f8dd c018 	ldr.w	ip, [sp, #24]
  4048bc:	f8dc a000 	ldr.w	sl, [ip]
  4048c0:	f10c 0c04 	add.w	ip, ip, #4
  4048c4:	f8cd c018 	str.w	ip, [sp, #24]
  4048c8:	e53b      	b.n	404342 <__ssvfscanf_r+0x646>
  4048ca:	077b      	lsls	r3, r7, #29
  4048cc:	f140 809b 	bpl.w	404a06 <__ssvfscanf_r+0xd0a>
  4048d0:	9c06      	ldr	r4, [sp, #24]
  4048d2:	6823      	ldr	r3, [r4, #0]
  4048d4:	3404      	adds	r4, #4
  4048d6:	9406      	str	r4, [sp, #24]
  4048d8:	8018      	strh	r0, [r3, #0]
  4048da:	e7c9      	b.n	404870 <__ssvfscanf_r+0xb74>
  4048dc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  4048e0:	4630      	mov	r0, r6
  4048e2:	f10c 0101 	add.w	r1, ip, #1
  4048e6:	230a      	movs	r3, #10
  4048e8:	f003 fb92 	bl	408010 <_strtol_r>
  4048ec:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
  4048f0:	1b02      	subs	r2, r0, r4
  4048f2:	f20d 21ab 	addw	r1, sp, #683	; 0x2ab
  4048f6:	458b      	cmp	fp, r1
  4048f8:	bf28      	it	cs
  4048fa:	f20d 2baa 	addwcs	fp, sp, #682	; 0x2aa
  4048fe:	4658      	mov	r0, fp
  404900:	499b      	ldr	r1, [pc, #620]	; (404b70 <__ssvfscanf_r+0xe74>)
  404902:	f002 fb9f 	bl	407044 <sprintf>
  404906:	e67b      	b.n	404600 <__ssvfscanf_r+0x904>
  404908:	3002      	adds	r0, #2
  40490a:	d188      	bne.n	40481e <__ssvfscanf_r+0xb22>
  40490c:	46cb      	mov	fp, r9
  40490e:	e78f      	b.n	404830 <__ssvfscanf_r+0xb34>
  404910:	f04f 0b00 	mov.w	fp, #0
  404914:	e78c      	b.n	404830 <__ssvfscanf_r+0xb34>
  404916:	2f00      	cmp	r7, #0
  404918:	f43f ac88 	beq.w	40422c <__ssvfscanf_r+0x530>
  40491c:	44b9      	add	r9, r7
  40491e:	f8dd a01c 	ldr.w	sl, [sp, #28]
  404922:	f7ff bbc5 	b.w	4040b0 <__ssvfscanf_r+0x3b4>
  404926:	f8dd c018 	ldr.w	ip, [sp, #24]
  40492a:	4623      	mov	r3, r4
  40492c:	f8dc 1000 	ldr.w	r1, [ip]
  404930:	9500      	str	r5, [sp, #0]
  404932:	4630      	mov	r0, r6
  404934:	2201      	movs	r2, #1
  404936:	f003 fe79 	bl	40862c <_sfread_r>
  40493a:	9c06      	ldr	r4, [sp, #24]
  40493c:	1d23      	adds	r3, r4, #4
  40493e:	2800      	cmp	r0, #0
  404940:	f43f ac74 	beq.w	40422c <__ssvfscanf_r+0x530>
  404944:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404946:	f8dd a01c 	ldr.w	sl, [sp, #28]
  40494a:	9306      	str	r3, [sp, #24]
  40494c:	3401      	adds	r4, #1
  40494e:	4481      	add	r9, r0
  404950:	940b      	str	r4, [sp, #44]	; 0x2c
  404952:	4652      	mov	r2, sl
  404954:	f7ff ba13 	b.w	403d7e <__ssvfscanf_r+0x82>
  404958:	4630      	mov	r0, r6
  40495a:	4629      	mov	r1, r5
  40495c:	f003 fe48 	bl	4085f0 <__ssrefill_r>
  404960:	2800      	cmp	r0, #0
  404962:	f43f aaa2 	beq.w	403eaa <__ssvfscanf_r+0x1ae>
  404966:	e461      	b.n	40422c <__ssvfscanf_r+0x530>
  404968:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
  40496c:	4630      	mov	r0, r6
  40496e:	462a      	mov	r2, r5
  404970:	f003 fdfe 	bl	408570 <_sungetc_r>
  404974:	f10a 3aff 	add.w	sl, sl, #4294967295
  404978:	f7ff bbec 	b.w	404154 <__ssvfscanf_r+0x458>
  40497c:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  404980:	f04f 0a01 	mov.w	sl, #1
  404984:	e587      	b.n	404496 <__ssvfscanf_r+0x79a>
  404986:	f427 67f0 	bic.w	r7, r7, #1920	; 0x780
  40498a:	2301      	movs	r3, #1
  40498c:	e583      	b.n	404496 <__ssvfscanf_r+0x79a>
  40498e:	f89a 3002 	ldrb.w	r3, [sl, #2]
  404992:	f047 0702 	orr.w	r7, r7, #2
  404996:	f10a 0a02 	add.w	sl, sl, #2
  40499a:	f7ff ba00 	b.w	403d9e <__ssvfscanf_r+0xa2>
  40499e:	9b08      	ldr	r3, [sp, #32]
  4049a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4049a2:	1b19      	subs	r1, r3, r4
  4049a4:	424a      	negs	r2, r1
  4049a6:	2900      	cmp	r1, #0
  4049a8:	d1a3      	bne.n	4048f2 <__ssvfscanf_r+0xbf6>
  4049aa:	e629      	b.n	404600 <__ssvfscanf_r+0x904>
  4049ac:	07fc      	lsls	r4, r7, #31
  4049ae:	d40e      	bmi.n	4049ce <__ssvfscanf_r+0xcd2>
  4049b0:	07b8      	lsls	r0, r7, #30
  4049b2:	d50c      	bpl.n	4049ce <__ssvfscanf_r+0xcd2>
  4049b4:	9c06      	ldr	r4, [sp, #24]
  4049b6:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4049ba:	6821      	ldr	r1, [r4, #0]
  4049bc:	464a      	mov	r2, r9
  4049be:	ea4f 73e9 	mov.w	r3, r9, asr #31
  4049c2:	3404      	adds	r4, #4
  4049c4:	9406      	str	r4, [sp, #24]
  4049c6:	e9c1 2300 	strd	r2, r3, [r1]
  4049ca:	f7ff b9d7 	b.w	403d7c <__ssvfscanf_r+0x80>
  4049ce:	f8dd c018 	ldr.w	ip, [sp, #24]
  4049d2:	f8dd a01c 	ldr.w	sl, [sp, #28]
  4049d6:	f8dc 3000 	ldr.w	r3, [ip]
  4049da:	f10c 0c04 	add.w	ip, ip, #4
  4049de:	f8c3 9000 	str.w	r9, [r3]
  4049e2:	f8cd c018 	str.w	ip, [sp, #24]
  4049e6:	f7ff b9c9 	b.w	403d7c <__ssvfscanf_r+0x80>
  4049ea:	9c06      	ldr	r4, [sp, #24]
  4049ec:	1d27      	adds	r7, r4, #4
  4049ee:	6824      	ldr	r4, [r4, #0]
  4049f0:	f002 fab2 	bl	406f58 <__fpclassifyd>
  4049f4:	2800      	cmp	r0, #0
  4049f6:	d056      	beq.n	404aa6 <__ssvfscanf_r+0xdaa>
  4049f8:	4650      	mov	r0, sl
  4049fa:	4659      	mov	r1, fp
  4049fc:	f007 ff56 	bl	40c8ac <__aeabi_d2f>
  404a00:	9706      	str	r7, [sp, #24]
  404a02:	6020      	str	r0, [r4, #0]
  404a04:	e613      	b.n	40462e <__ssvfscanf_r+0x932>
  404a06:	f017 0201 	ands.w	r2, r7, #1
  404a0a:	f47f af28 	bne.w	40485e <__ssvfscanf_r+0xb62>
  404a0e:	07bc      	lsls	r4, r7, #30
  404a10:	f140 8097 	bpl.w	404b42 <__ssvfscanf_r+0xe46>
  404a14:	4b57      	ldr	r3, [pc, #348]	; (404b74 <__ssvfscanf_r+0xe78>)
  404a16:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404a18:	9905      	ldr	r1, [sp, #20]
  404a1a:	429c      	cmp	r4, r3
  404a1c:	4630      	mov	r0, r6
  404a1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404a20:	f000 80a2 	beq.w	404b68 <__ssvfscanf_r+0xe6c>
  404a24:	f003 fb7e 	bl	408124 <_strtoll_r>
  404a28:	f8dd c018 	ldr.w	ip, [sp, #24]
  404a2c:	f8dc 3000 	ldr.w	r3, [ip]
  404a30:	f10c 0c04 	add.w	ip, ip, #4
  404a34:	f8cd c018 	str.w	ip, [sp, #24]
  404a38:	e9c3 0100 	strd	r0, r1, [r3]
  404a3c:	e718      	b.n	404870 <__ssvfscanf_r+0xb74>
  404a3e:	9204      	str	r2, [sp, #16]
  404a40:	f001 fc6e 	bl	406320 <__locale_mb_cur_max>
  404a44:	9a04      	ldr	r2, [sp, #16]
  404a46:	4290      	cmp	r0, r2
  404a48:	f43f abf0 	beq.w	40422c <__ssvfscanf_r+0x530>
  404a4c:	682b      	ldr	r3, [r5, #0]
  404a4e:	6869      	ldr	r1, [r5, #4]
  404a50:	f813 eb01 	ldrb.w	lr, [r3], #1
  404a54:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a56:	602b      	str	r3, [r5, #0]
  404a58:	f50d 7cac 	add.w	ip, sp, #344	; 0x158
  404a5c:	1c57      	adds	r7, r2, #1
  404a5e:	3901      	subs	r1, #1
  404a60:	9000      	str	r0, [sp, #0]
  404a62:	463b      	mov	r3, r7
  404a64:	6069      	str	r1, [r5, #4]
  404a66:	f80c e002 	strb.w	lr, [ip, r2]
  404a6a:	4630      	mov	r0, r6
  404a6c:	4651      	mov	r1, sl
  404a6e:	4662      	mov	r2, ip
  404a70:	f001 ff88 	bl	406984 <_mbrtowc_r>
  404a74:	1c43      	adds	r3, r0, #1
  404a76:	f43f abd9 	beq.w	40422c <__ssvfscanf_r+0x530>
  404a7a:	b9c8      	cbnz	r0, 404ab0 <__ssvfscanf_r+0xdb4>
  404a7c:	f8ca 0000 	str.w	r0, [sl]
  404a80:	f001 fc3c 	bl	4062fc <iswspace>
  404a84:	2800      	cmp	r0, #0
  404a86:	d053      	beq.n	404b30 <__ssvfscanf_r+0xe34>
  404a88:	2f00      	cmp	r7, #0
  404a8a:	f43f ac66 	beq.w	40435a <__ssvfscanf_r+0x65e>
  404a8e:	ac56      	add	r4, sp, #344	; 0x158
  404a90:	443c      	add	r4, r7
  404a92:	3f01      	subs	r7, #1
  404a94:	4630      	mov	r0, r6
  404a96:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  404a9a:	462a      	mov	r2, r5
  404a9c:	f003 fd68 	bl	408570 <_sungetc_r>
  404aa0:	2f00      	cmp	r7, #0
  404aa2:	d1f6      	bne.n	404a92 <__ssvfscanf_r+0xd96>
  404aa4:	e459      	b.n	40435a <__ssvfscanf_r+0x65e>
  404aa6:	f002 fac9 	bl	40703c <nanf>
  404aaa:	9706      	str	r7, [sp, #24]
  404aac:	6020      	str	r0, [r4, #0]
  404aae:	e5be      	b.n	40462e <__ssvfscanf_r+0x932>
  404ab0:	3002      	adds	r0, #2
  404ab2:	d128      	bne.n	404b06 <__ssvfscanf_r+0xe0a>
  404ab4:	686b      	ldr	r3, [r5, #4]
  404ab6:	2b00      	cmp	r3, #0
  404ab8:	dd4b      	ble.n	404b52 <__ssvfscanf_r+0xe56>
  404aba:	463a      	mov	r2, r7
  404abc:	e442      	b.n	404344 <__ssvfscanf_r+0x648>
  404abe:	9c05      	ldr	r4, [sp, #20]
  404ac0:	45a3      	cmp	fp, r4
  404ac2:	bf88      	it	hi
  404ac4:	465c      	movhi	r4, fp
  404ac6:	f67f a960 	bls.w	403d8a <__ssvfscanf_r+0x8e>
  404aca:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  404ace:	980e      	ldr	r0, [sp, #56]	; 0x38
  404ad0:	462a      	mov	r2, r5
  404ad2:	f003 fd4d 	bl	408570 <_sungetc_r>
  404ad6:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404ada:	454c      	cmp	r4, r9
  404adc:	d1f5      	bne.n	404aca <__ssvfscanf_r+0xdce>
  404ade:	f7ff b954 	b.w	403d8a <__ssvfscanf_r+0x8e>
  404ae2:	f8dd c014 	ldr.w	ip, [sp, #20]
  404ae6:	45e3      	cmp	fp, ip
  404ae8:	f67f a94f 	bls.w	403d8a <__ssvfscanf_r+0x8e>
  404aec:	465c      	mov	r4, fp
  404aee:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  404af2:	980e      	ldr	r0, [sp, #56]	; 0x38
  404af4:	462a      	mov	r2, r5
  404af6:	f003 fd3b 	bl	408570 <_sungetc_r>
  404afa:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404afe:	454c      	cmp	r4, r9
  404b00:	d1f5      	bne.n	404aee <__ssvfscanf_r+0xdf2>
  404b02:	f7ff b942 	b.w	403d8a <__ssvfscanf_r+0x8e>
  404b06:	f8da 0000 	ldr.w	r0, [sl]
  404b0a:	e7b9      	b.n	404a80 <__ssvfscanf_r+0xd84>
  404b0c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  404b10:	45cb      	cmp	fp, r9
  404b12:	f67f a93a 	bls.w	403d8a <__ssvfscanf_r+0x8e>
  404b16:	465c      	mov	r4, fp
  404b18:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
  404b1c:	980e      	ldr	r0, [sp, #56]	; 0x38
  404b1e:	462a      	mov	r2, r5
  404b20:	f003 fd26 	bl	408570 <_sungetc_r>
  404b24:	f8dd c014 	ldr.w	ip, [sp, #20]
  404b28:	4564      	cmp	r4, ip
  404b2a:	d1f5      	bne.n	404b18 <__ssvfscanf_r+0xe1c>
  404b2c:	f7ff b92d 	b.w	403d8a <__ssvfscanf_r+0x8e>
  404b30:	44b9      	add	r9, r7
  404b32:	3c01      	subs	r4, #1
  404b34:	f1bb 0f00 	cmp.w	fp, #0
  404b38:	d109      	bne.n	404b4e <__ssvfscanf_r+0xe52>
  404b3a:	f10a 0a04 	add.w	sl, sl, #4
  404b3e:	465f      	mov	r7, fp
  404b40:	e7b8      	b.n	404ab4 <__ssvfscanf_r+0xdb8>
  404b42:	9c06      	ldr	r4, [sp, #24]
  404b44:	6823      	ldr	r3, [r4, #0]
  404b46:	3404      	adds	r4, #4
  404b48:	9406      	str	r4, [sp, #24]
  404b4a:	6018      	str	r0, [r3, #0]
  404b4c:	e690      	b.n	404870 <__ssvfscanf_r+0xb74>
  404b4e:	4607      	mov	r7, r0
  404b50:	e7b0      	b.n	404ab4 <__ssvfscanf_r+0xdb8>
  404b52:	4630      	mov	r0, r6
  404b54:	4629      	mov	r1, r5
  404b56:	f003 fd4b 	bl	4085f0 <__ssrefill_r>
  404b5a:	2800      	cmp	r0, #0
  404b5c:	d0ad      	beq.n	404aba <__ssvfscanf_r+0xdbe>
  404b5e:	2f00      	cmp	r7, #0
  404b60:	f47f ab64 	bne.w	40422c <__ssvfscanf_r+0x530>
  404b64:	f7ff bbf9 	b.w	40435a <__ssvfscanf_r+0x65e>
  404b68:	f003 fc3a 	bl	4083e0 <_strtoull_r>
  404b6c:	e75c      	b.n	404a28 <__ssvfscanf_r+0xd2c>
  404b6e:	bf00      	nop
  404b70:	0040d0f4 	.word	0x0040d0f4
  404b74:	004082c1 	.word	0x004082c1

00404b78 <__sprint_r.part.0>:
  404b78:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404b7e:	049c      	lsls	r4, r3, #18
  404b80:	460e      	mov	r6, r1
  404b82:	4680      	mov	r8, r0
  404b84:	4691      	mov	r9, r2
  404b86:	d52a      	bpl.n	404bde <__sprint_r.part.0+0x66>
  404b88:	6893      	ldr	r3, [r2, #8]
  404b8a:	6812      	ldr	r2, [r2, #0]
  404b8c:	f102 0a08 	add.w	sl, r2, #8
  404b90:	b31b      	cbz	r3, 404bda <__sprint_r.part.0+0x62>
  404b92:	e91a 00a0 	ldmdb	sl, {r5, r7}
  404b96:	08bf      	lsrs	r7, r7, #2
  404b98:	d017      	beq.n	404bca <__sprint_r.part.0+0x52>
  404b9a:	3d04      	subs	r5, #4
  404b9c:	2400      	movs	r4, #0
  404b9e:	e001      	b.n	404ba4 <__sprint_r.part.0+0x2c>
  404ba0:	42a7      	cmp	r7, r4
  404ba2:	d010      	beq.n	404bc6 <__sprint_r.part.0+0x4e>
  404ba4:	4640      	mov	r0, r8
  404ba6:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404baa:	4632      	mov	r2, r6
  404bac:	f001 f87a 	bl	405ca4 <_fputwc_r>
  404bb0:	1c43      	adds	r3, r0, #1
  404bb2:	f104 0401 	add.w	r4, r4, #1
  404bb6:	d1f3      	bne.n	404ba0 <__sprint_r.part.0+0x28>
  404bb8:	2300      	movs	r3, #0
  404bba:	f8c9 3008 	str.w	r3, [r9, #8]
  404bbe:	f8c9 3004 	str.w	r3, [r9, #4]
  404bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404bc6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  404bca:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
  404bce:	f8c9 3008 	str.w	r3, [r9, #8]
  404bd2:	f10a 0a08 	add.w	sl, sl, #8
  404bd6:	2b00      	cmp	r3, #0
  404bd8:	d1db      	bne.n	404b92 <__sprint_r.part.0+0x1a>
  404bda:	2000      	movs	r0, #0
  404bdc:	e7ec      	b.n	404bb8 <__sprint_r.part.0+0x40>
  404bde:	f001 f9db 	bl	405f98 <__sfvwrite_r>
  404be2:	2300      	movs	r3, #0
  404be4:	f8c9 3008 	str.w	r3, [r9, #8]
  404be8:	f8c9 3004 	str.w	r3, [r9, #4]
  404bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00404bf0 <_vfiprintf_r>:
  404bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bf4:	b0b1      	sub	sp, #196	; 0xc4
  404bf6:	461c      	mov	r4, r3
  404bf8:	9102      	str	r1, [sp, #8]
  404bfa:	4690      	mov	r8, r2
  404bfc:	9308      	str	r3, [sp, #32]
  404bfe:	9006      	str	r0, [sp, #24]
  404c00:	b118      	cbz	r0, 404c0a <_vfiprintf_r+0x1a>
  404c02:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404c04:	2b00      	cmp	r3, #0
  404c06:	f000 80e8 	beq.w	404dda <_vfiprintf_r+0x1ea>
  404c0a:	9d02      	ldr	r5, [sp, #8]
  404c0c:	89ab      	ldrh	r3, [r5, #12]
  404c0e:	b29a      	uxth	r2, r3
  404c10:	0490      	lsls	r0, r2, #18
  404c12:	d407      	bmi.n	404c24 <_vfiprintf_r+0x34>
  404c14:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  404c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404c1a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
  404c1e:	81ab      	strh	r3, [r5, #12]
  404c20:	b29a      	uxth	r2, r3
  404c22:	6669      	str	r1, [r5, #100]	; 0x64
  404c24:	0711      	lsls	r1, r2, #28
  404c26:	f140 80b7 	bpl.w	404d98 <_vfiprintf_r+0x1a8>
  404c2a:	f8dd b008 	ldr.w	fp, [sp, #8]
  404c2e:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c32:	2b00      	cmp	r3, #0
  404c34:	f000 80b0 	beq.w	404d98 <_vfiprintf_r+0x1a8>
  404c38:	f002 021a 	and.w	r2, r2, #26
  404c3c:	2a0a      	cmp	r2, #10
  404c3e:	f000 80b7 	beq.w	404db0 <_vfiprintf_r+0x1c0>
  404c42:	2300      	movs	r3, #0
  404c44:	f10d 0980 	add.w	r9, sp, #128	; 0x80
  404c48:	930a      	str	r3, [sp, #40]	; 0x28
  404c4a:	9315      	str	r3, [sp, #84]	; 0x54
  404c4c:	9314      	str	r3, [sp, #80]	; 0x50
  404c4e:	9309      	str	r3, [sp, #36]	; 0x24
  404c50:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  404c54:	464e      	mov	r6, r9
  404c56:	f898 3000 	ldrb.w	r3, [r8]
  404c5a:	2b00      	cmp	r3, #0
  404c5c:	f000 84c4 	beq.w	4055e8 <_vfiprintf_r+0x9f8>
  404c60:	2b25      	cmp	r3, #37	; 0x25
  404c62:	f000 84c1 	beq.w	4055e8 <_vfiprintf_r+0x9f8>
  404c66:	f108 0201 	add.w	r2, r8, #1
  404c6a:	e001      	b.n	404c70 <_vfiprintf_r+0x80>
  404c6c:	2b25      	cmp	r3, #37	; 0x25
  404c6e:	d004      	beq.n	404c7a <_vfiprintf_r+0x8a>
  404c70:	4614      	mov	r4, r2
  404c72:	3201      	adds	r2, #1
  404c74:	7823      	ldrb	r3, [r4, #0]
  404c76:	2b00      	cmp	r3, #0
  404c78:	d1f8      	bne.n	404c6c <_vfiprintf_r+0x7c>
  404c7a:	ebc8 0504 	rsb	r5, r8, r4
  404c7e:	b195      	cbz	r5, 404ca6 <_vfiprintf_r+0xb6>
  404c80:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404c82:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404c84:	f8c6 8000 	str.w	r8, [r6]
  404c88:	3301      	adds	r3, #1
  404c8a:	442a      	add	r2, r5
  404c8c:	2b07      	cmp	r3, #7
  404c8e:	6075      	str	r5, [r6, #4]
  404c90:	9215      	str	r2, [sp, #84]	; 0x54
  404c92:	9314      	str	r3, [sp, #80]	; 0x50
  404c94:	dd7b      	ble.n	404d8e <_vfiprintf_r+0x19e>
  404c96:	2a00      	cmp	r2, #0
  404c98:	f040 84d4 	bne.w	405644 <_vfiprintf_r+0xa54>
  404c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
  404c9e:	9214      	str	r2, [sp, #80]	; 0x50
  404ca0:	4428      	add	r0, r5
  404ca2:	464e      	mov	r6, r9
  404ca4:	9009      	str	r0, [sp, #36]	; 0x24
  404ca6:	7823      	ldrb	r3, [r4, #0]
  404ca8:	2b00      	cmp	r3, #0
  404caa:	f000 83e9 	beq.w	405480 <_vfiprintf_r+0x890>
  404cae:	2100      	movs	r1, #0
  404cb0:	f04f 0200 	mov.w	r2, #0
  404cb4:	f04f 3cff 	mov.w	ip, #4294967295
  404cb8:	7863      	ldrb	r3, [r4, #1]
  404cba:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
  404cbe:	9104      	str	r1, [sp, #16]
  404cc0:	468a      	mov	sl, r1
  404cc2:	f104 0801 	add.w	r8, r4, #1
  404cc6:	4608      	mov	r0, r1
  404cc8:	4665      	mov	r5, ip
  404cca:	f108 0801 	add.w	r8, r8, #1
  404cce:	f1a3 0220 	sub.w	r2, r3, #32
  404cd2:	2a58      	cmp	r2, #88	; 0x58
  404cd4:	f200 82d5 	bhi.w	405282 <_vfiprintf_r+0x692>
  404cd8:	e8df f012 	tbh	[pc, r2, lsl #1]
  404cdc:	02d302c7 	.word	0x02d302c7
  404ce0:	02ce02d3 	.word	0x02ce02d3
  404ce4:	02d302d3 	.word	0x02d302d3
  404ce8:	02d302d3 	.word	0x02d302d3
  404cec:	02d302d3 	.word	0x02d302d3
  404cf0:	028b027e 	.word	0x028b027e
  404cf4:	008402d3 	.word	0x008402d3
  404cf8:	02d3028f 	.word	0x02d3028f
  404cfc:	0194012b 	.word	0x0194012b
  404d00:	01940194 	.word	0x01940194
  404d04:	01940194 	.word	0x01940194
  404d08:	01940194 	.word	0x01940194
  404d0c:	01940194 	.word	0x01940194
  404d10:	02d302d3 	.word	0x02d302d3
  404d14:	02d302d3 	.word	0x02d302d3
  404d18:	02d302d3 	.word	0x02d302d3
  404d1c:	02d302d3 	.word	0x02d302d3
  404d20:	02d302d3 	.word	0x02d302d3
  404d24:	02d30130 	.word	0x02d30130
  404d28:	02d302d3 	.word	0x02d302d3
  404d2c:	02d302d3 	.word	0x02d302d3
  404d30:	02d302d3 	.word	0x02d302d3
  404d34:	02d302d3 	.word	0x02d302d3
  404d38:	017902d3 	.word	0x017902d3
  404d3c:	02d302d3 	.word	0x02d302d3
  404d40:	02d302d3 	.word	0x02d302d3
  404d44:	01a202d3 	.word	0x01a202d3
  404d48:	02d302d3 	.word	0x02d302d3
  404d4c:	02d301bd 	.word	0x02d301bd
  404d50:	02d302d3 	.word	0x02d302d3
  404d54:	02d302d3 	.word	0x02d302d3
  404d58:	02d302d3 	.word	0x02d302d3
  404d5c:	02d302d3 	.word	0x02d302d3
  404d60:	01e202d3 	.word	0x01e202d3
  404d64:	02d301f8 	.word	0x02d301f8
  404d68:	02d302d3 	.word	0x02d302d3
  404d6c:	01f80214 	.word	0x01f80214
  404d70:	02d302d3 	.word	0x02d302d3
  404d74:	02d30219 	.word	0x02d30219
  404d78:	00890226 	.word	0x00890226
  404d7c:	02790264 	.word	0x02790264
  404d80:	023802d3 	.word	0x023802d3
  404d84:	011902d3 	.word	0x011902d3
  404d88:	02d302d3 	.word	0x02d302d3
  404d8c:	02ab      	.short	0x02ab
  404d8e:	3608      	adds	r6, #8
  404d90:	9809      	ldr	r0, [sp, #36]	; 0x24
  404d92:	4428      	add	r0, r5
  404d94:	9009      	str	r0, [sp, #36]	; 0x24
  404d96:	e786      	b.n	404ca6 <_vfiprintf_r+0xb6>
  404d98:	9806      	ldr	r0, [sp, #24]
  404d9a:	9902      	ldr	r1, [sp, #8]
  404d9c:	f000 fda2 	bl	4058e4 <__swsetup_r>
  404da0:	b9b0      	cbnz	r0, 404dd0 <_vfiprintf_r+0x1e0>
  404da2:	9d02      	ldr	r5, [sp, #8]
  404da4:	89aa      	ldrh	r2, [r5, #12]
  404da6:	f002 021a 	and.w	r2, r2, #26
  404daa:	2a0a      	cmp	r2, #10
  404dac:	f47f af49 	bne.w	404c42 <_vfiprintf_r+0x52>
  404db0:	f8dd b008 	ldr.w	fp, [sp, #8]
  404db4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404db8:	2b00      	cmp	r3, #0
  404dba:	f6ff af42 	blt.w	404c42 <_vfiprintf_r+0x52>
  404dbe:	9806      	ldr	r0, [sp, #24]
  404dc0:	4659      	mov	r1, fp
  404dc2:	4642      	mov	r2, r8
  404dc4:	4623      	mov	r3, r4
  404dc6:	f000 fd3d 	bl	405844 <__sbprintf>
  404dca:	b031      	add	sp, #196	; 0xc4
  404dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dd0:	f04f 30ff 	mov.w	r0, #4294967295
  404dd4:	b031      	add	sp, #196	; 0xc4
  404dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dda:	f000 fecd 	bl	405b78 <__sinit>
  404dde:	e714      	b.n	404c0a <_vfiprintf_r+0x1a>
  404de0:	4240      	negs	r0, r0
  404de2:	9308      	str	r3, [sp, #32]
  404de4:	f04a 0a04 	orr.w	sl, sl, #4
  404de8:	f898 3000 	ldrb.w	r3, [r8]
  404dec:	e76d      	b.n	404cca <_vfiprintf_r+0xda>
  404dee:	f01a 0320 	ands.w	r3, sl, #32
  404df2:	9004      	str	r0, [sp, #16]
  404df4:	46ac      	mov	ip, r5
  404df6:	f000 80f2 	beq.w	404fde <_vfiprintf_r+0x3ee>
  404dfa:	f8dd b020 	ldr.w	fp, [sp, #32]
  404dfe:	f10b 0307 	add.w	r3, fp, #7
  404e02:	f023 0307 	bic.w	r3, r3, #7
  404e06:	f103 0408 	add.w	r4, r3, #8
  404e0a:	9408      	str	r4, [sp, #32]
  404e0c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404e10:	2300      	movs	r3, #0
  404e12:	f04f 0000 	mov.w	r0, #0
  404e16:	2100      	movs	r1, #0
  404e18:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
  404e1c:	f8cd c014 	str.w	ip, [sp, #20]
  404e20:	9107      	str	r1, [sp, #28]
  404e22:	f1bc 0f00 	cmp.w	ip, #0
  404e26:	bfa8      	it	ge
  404e28:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  404e2c:	ea54 0205 	orrs.w	r2, r4, r5
  404e30:	f040 80ad 	bne.w	404f8e <_vfiprintf_r+0x39e>
  404e34:	f1bc 0f00 	cmp.w	ip, #0
  404e38:	f040 80a9 	bne.w	404f8e <_vfiprintf_r+0x39e>
  404e3c:	2b00      	cmp	r3, #0
  404e3e:	f040 83bc 	bne.w	4055ba <_vfiprintf_r+0x9ca>
  404e42:	f01a 0f01 	tst.w	sl, #1
  404e46:	f000 83b8 	beq.w	4055ba <_vfiprintf_r+0x9ca>
  404e4a:	af30      	add	r7, sp, #192	; 0xc0
  404e4c:	2330      	movs	r3, #48	; 0x30
  404e4e:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404e52:	ebc7 0409 	rsb	r4, r7, r9
  404e56:	9405      	str	r4, [sp, #20]
  404e58:	f8dd b014 	ldr.w	fp, [sp, #20]
  404e5c:	9c07      	ldr	r4, [sp, #28]
  404e5e:	45e3      	cmp	fp, ip
  404e60:	bfb8      	it	lt
  404e62:	46e3      	movlt	fp, ip
  404e64:	f8cd b00c 	str.w	fp, [sp, #12]
  404e68:	b11c      	cbz	r4, 404e72 <_vfiprintf_r+0x282>
  404e6a:	f10b 0b01 	add.w	fp, fp, #1
  404e6e:	f8cd b00c 	str.w	fp, [sp, #12]
  404e72:	f01a 0502 	ands.w	r5, sl, #2
  404e76:	9507      	str	r5, [sp, #28]
  404e78:	d005      	beq.n	404e86 <_vfiprintf_r+0x296>
  404e7a:	f8dd b00c 	ldr.w	fp, [sp, #12]
  404e7e:	f10b 0b02 	add.w	fp, fp, #2
  404e82:	f8cd b00c 	str.w	fp, [sp, #12]
  404e86:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
  404e8a:	930b      	str	r3, [sp, #44]	; 0x2c
  404e8c:	f040 8217 	bne.w	4052be <_vfiprintf_r+0x6ce>
  404e90:	9d04      	ldr	r5, [sp, #16]
  404e92:	f8dd b00c 	ldr.w	fp, [sp, #12]
  404e96:	ebcb 0405 	rsb	r4, fp, r5
  404e9a:	2c00      	cmp	r4, #0
  404e9c:	f340 820f 	ble.w	4052be <_vfiprintf_r+0x6ce>
  404ea0:	2c10      	cmp	r4, #16
  404ea2:	f340 8488 	ble.w	4057b6 <_vfiprintf_r+0xbc6>
  404ea6:	4dbd      	ldr	r5, [pc, #756]	; (40519c <_vfiprintf_r+0x5ac>)
  404ea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  404eaa:	9814      	ldr	r0, [sp, #80]	; 0x50
  404eac:	462b      	mov	r3, r5
  404eae:	f04f 0b10 	mov.w	fp, #16
  404eb2:	4625      	mov	r5, r4
  404eb4:	4664      	mov	r4, ip
  404eb6:	46b4      	mov	ip, r6
  404eb8:	461e      	mov	r6, r3
  404eba:	e006      	b.n	404eca <_vfiprintf_r+0x2da>
  404ebc:	1c83      	adds	r3, r0, #2
  404ebe:	f10c 0c08 	add.w	ip, ip, #8
  404ec2:	4608      	mov	r0, r1
  404ec4:	3d10      	subs	r5, #16
  404ec6:	2d10      	cmp	r5, #16
  404ec8:	dd11      	ble.n	404eee <_vfiprintf_r+0x2fe>
  404eca:	1c41      	adds	r1, r0, #1
  404ecc:	3210      	adds	r2, #16
  404ece:	2907      	cmp	r1, #7
  404ed0:	9215      	str	r2, [sp, #84]	; 0x54
  404ed2:	e88c 0840 	stmia.w	ip, {r6, fp}
  404ed6:	9114      	str	r1, [sp, #80]	; 0x50
  404ed8:	ddf0      	ble.n	404ebc <_vfiprintf_r+0x2cc>
  404eda:	2a00      	cmp	r2, #0
  404edc:	f040 81e2 	bne.w	4052a4 <_vfiprintf_r+0x6b4>
  404ee0:	3d10      	subs	r5, #16
  404ee2:	2d10      	cmp	r5, #16
  404ee4:	f04f 0301 	mov.w	r3, #1
  404ee8:	4610      	mov	r0, r2
  404eea:	46cc      	mov	ip, r9
  404eec:	dced      	bgt.n	404eca <_vfiprintf_r+0x2da>
  404eee:	4631      	mov	r1, r6
  404ef0:	4666      	mov	r6, ip
  404ef2:	46a4      	mov	ip, r4
  404ef4:	462c      	mov	r4, r5
  404ef6:	460d      	mov	r5, r1
  404ef8:	4422      	add	r2, r4
  404efa:	2b07      	cmp	r3, #7
  404efc:	9215      	str	r2, [sp, #84]	; 0x54
  404efe:	6035      	str	r5, [r6, #0]
  404f00:	6074      	str	r4, [r6, #4]
  404f02:	9314      	str	r3, [sp, #80]	; 0x50
  404f04:	f300 8369 	bgt.w	4055da <_vfiprintf_r+0x9ea>
  404f08:	3608      	adds	r6, #8
  404f0a:	1c59      	adds	r1, r3, #1
  404f0c:	e1da      	b.n	4052c4 <_vfiprintf_r+0x6d4>
  404f0e:	f01a 0f20 	tst.w	sl, #32
  404f12:	9004      	str	r0, [sp, #16]
  404f14:	46ac      	mov	ip, r5
  404f16:	f000 808b 	beq.w	405030 <_vfiprintf_r+0x440>
  404f1a:	9d08      	ldr	r5, [sp, #32]
  404f1c:	1deb      	adds	r3, r5, #7
  404f1e:	f023 0307 	bic.w	r3, r3, #7
  404f22:	f103 0b08 	add.w	fp, r3, #8
  404f26:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f2a:	f8cd b020 	str.w	fp, [sp, #32]
  404f2e:	2301      	movs	r3, #1
  404f30:	e76f      	b.n	404e12 <_vfiprintf_r+0x222>
  404f32:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
  404f36:	f898 3000 	ldrb.w	r3, [r8]
  404f3a:	e6c6      	b.n	404cca <_vfiprintf_r+0xda>
  404f3c:	f04a 0a10 	orr.w	sl, sl, #16
  404f40:	f01a 0f20 	tst.w	sl, #32
  404f44:	9004      	str	r0, [sp, #16]
  404f46:	46ac      	mov	ip, r5
  404f48:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  404f4c:	f000 80c6 	beq.w	4050dc <_vfiprintf_r+0x4ec>
  404f50:	9c08      	ldr	r4, [sp, #32]
  404f52:	1de1      	adds	r1, r4, #7
  404f54:	f021 0107 	bic.w	r1, r1, #7
  404f58:	e9d1 2300 	ldrd	r2, r3, [r1]
  404f5c:	3108      	adds	r1, #8
  404f5e:	9108      	str	r1, [sp, #32]
  404f60:	4614      	mov	r4, r2
  404f62:	461d      	mov	r5, r3
  404f64:	2a00      	cmp	r2, #0
  404f66:	f173 0000 	sbcs.w	r0, r3, #0
  404f6a:	f2c0 83cd 	blt.w	405708 <_vfiprintf_r+0xb18>
  404f6e:	f1bc 0f00 	cmp.w	ip, #0
  404f72:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
  404f76:	9107      	str	r1, [sp, #28]
  404f78:	bfa8      	it	ge
  404f7a:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
  404f7e:	ea54 0205 	orrs.w	r2, r4, r5
  404f82:	f8cd c014 	str.w	ip, [sp, #20]
  404f86:	f04f 0301 	mov.w	r3, #1
  404f8a:	f43f af53 	beq.w	404e34 <_vfiprintf_r+0x244>
  404f8e:	2b01      	cmp	r3, #1
  404f90:	f000 8315 	beq.w	4055be <_vfiprintf_r+0x9ce>
  404f94:	2b02      	cmp	r3, #2
  404f96:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
  404f9a:	f040 8248 	bne.w	40542e <_vfiprintf_r+0x83e>
  404f9e:	980a      	ldr	r0, [sp, #40]	; 0x28
  404fa0:	4619      	mov	r1, r3
  404fa2:	0922      	lsrs	r2, r4, #4
  404fa4:	f004 040f 	and.w	r4, r4, #15
  404fa8:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  404fac:	460f      	mov	r7, r1
  404fae:	092b      	lsrs	r3, r5, #4
  404fb0:	5d01      	ldrb	r1, [r0, r4]
  404fb2:	7039      	strb	r1, [r7, #0]
  404fb4:	ea52 0b03 	orrs.w	fp, r2, r3
  404fb8:	4614      	mov	r4, r2
  404fba:	461d      	mov	r5, r3
  404fbc:	f107 31ff 	add.w	r1, r7, #4294967295
  404fc0:	d1ef      	bne.n	404fa2 <_vfiprintf_r+0x3b2>
  404fc2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  404fc6:	ebc7 0309 	rsb	r3, r7, r9
  404fca:	9305      	str	r3, [sp, #20]
  404fcc:	e744      	b.n	404e58 <_vfiprintf_r+0x268>
  404fce:	f04a 0a10 	orr.w	sl, sl, #16
  404fd2:	f01a 0320 	ands.w	r3, sl, #32
  404fd6:	9004      	str	r0, [sp, #16]
  404fd8:	46ac      	mov	ip, r5
  404fda:	f47f af0e 	bne.w	404dfa <_vfiprintf_r+0x20a>
  404fde:	f01a 0210 	ands.w	r2, sl, #16
  404fe2:	f040 830f 	bne.w	405604 <_vfiprintf_r+0xa14>
  404fe6:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
  404fea:	f000 830b 	beq.w	405604 <_vfiprintf_r+0xa14>
  404fee:	f8dd b020 	ldr.w	fp, [sp, #32]
  404ff2:	f8bb 4000 	ldrh.w	r4, [fp]
  404ff6:	f10b 0b04 	add.w	fp, fp, #4
  404ffa:	4613      	mov	r3, r2
  404ffc:	2500      	movs	r5, #0
  404ffe:	f8cd b020 	str.w	fp, [sp, #32]
  405002:	e706      	b.n	404e12 <_vfiprintf_r+0x222>
  405004:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405008:	2000      	movs	r0, #0
  40500a:	f818 3b01 	ldrb.w	r3, [r8], #1
  40500e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405012:	eb02 0040 	add.w	r0, r2, r0, lsl #1
  405016:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40501a:	2a09      	cmp	r2, #9
  40501c:	d9f5      	bls.n	40500a <_vfiprintf_r+0x41a>
  40501e:	e656      	b.n	404cce <_vfiprintf_r+0xde>
  405020:	f04a 0a10 	orr.w	sl, sl, #16
  405024:	f01a 0f20 	tst.w	sl, #32
  405028:	9004      	str	r0, [sp, #16]
  40502a:	46ac      	mov	ip, r5
  40502c:	f47f af75 	bne.w	404f1a <_vfiprintf_r+0x32a>
  405030:	f01a 0f10 	tst.w	sl, #16
  405034:	f040 82ec 	bne.w	405610 <_vfiprintf_r+0xa20>
  405038:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40503c:	f000 82e8 	beq.w	405610 <_vfiprintf_r+0xa20>
  405040:	f8dd b020 	ldr.w	fp, [sp, #32]
  405044:	f8bb 4000 	ldrh.w	r4, [fp]
  405048:	f10b 0b04 	add.w	fp, fp, #4
  40504c:	2500      	movs	r5, #0
  40504e:	2301      	movs	r3, #1
  405050:	f8cd b020 	str.w	fp, [sp, #32]
  405054:	e6dd      	b.n	404e12 <_vfiprintf_r+0x222>
  405056:	46ac      	mov	ip, r5
  405058:	f01a 0f20 	tst.w	sl, #32
  40505c:	4d50      	ldr	r5, [pc, #320]	; (4051a0 <_vfiprintf_r+0x5b0>)
  40505e:	9004      	str	r0, [sp, #16]
  405060:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  405064:	950a      	str	r5, [sp, #40]	; 0x28
  405066:	f000 80ee 	beq.w	405246 <_vfiprintf_r+0x656>
  40506a:	9d08      	ldr	r5, [sp, #32]
  40506c:	1dea      	adds	r2, r5, #7
  40506e:	f022 0207 	bic.w	r2, r2, #7
  405072:	e9d2 4500 	ldrd	r4, r5, [r2]
  405076:	f102 0b08 	add.w	fp, r2, #8
  40507a:	f8cd b020 	str.w	fp, [sp, #32]
  40507e:	f01a 0f01 	tst.w	sl, #1
  405082:	f000 82a8 	beq.w	4055d6 <_vfiprintf_r+0x9e6>
  405086:	ea54 0b05 	orrs.w	fp, r4, r5
  40508a:	f000 82a4 	beq.w	4055d6 <_vfiprintf_r+0x9e6>
  40508e:	2230      	movs	r2, #48	; 0x30
  405090:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  405094:	f04a 0a02 	orr.w	sl, sl, #2
  405098:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40509c:	2302      	movs	r3, #2
  40509e:	e6b8      	b.n	404e12 <_vfiprintf_r+0x222>
  4050a0:	9b08      	ldr	r3, [sp, #32]
  4050a2:	f8dd b020 	ldr.w	fp, [sp, #32]
  4050a6:	681b      	ldr	r3, [r3, #0]
  4050a8:	9004      	str	r0, [sp, #16]
  4050aa:	2401      	movs	r4, #1
  4050ac:	f04f 0500 	mov.w	r5, #0
  4050b0:	f10b 0b04 	add.w	fp, fp, #4
  4050b4:	9403      	str	r4, [sp, #12]
  4050b6:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  4050ba:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  4050be:	f8cd b020 	str.w	fp, [sp, #32]
  4050c2:	9405      	str	r4, [sp, #20]
  4050c4:	af16      	add	r7, sp, #88	; 0x58
  4050c6:	f04f 0c00 	mov.w	ip, #0
  4050ca:	e6d2      	b.n	404e72 <_vfiprintf_r+0x282>
  4050cc:	f01a 0f20 	tst.w	sl, #32
  4050d0:	9004      	str	r0, [sp, #16]
  4050d2:	46ac      	mov	ip, r5
  4050d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  4050d8:	f47f af3a 	bne.w	404f50 <_vfiprintf_r+0x360>
  4050dc:	f01a 0f10 	tst.w	sl, #16
  4050e0:	f040 82a4 	bne.w	40562c <_vfiprintf_r+0xa3c>
  4050e4:	f01a 0f40 	tst.w	sl, #64	; 0x40
  4050e8:	f000 82a0 	beq.w	40562c <_vfiprintf_r+0xa3c>
  4050ec:	f8dd b020 	ldr.w	fp, [sp, #32]
  4050f0:	f9bb 4000 	ldrsh.w	r4, [fp]
  4050f4:	f10b 0b04 	add.w	fp, fp, #4
  4050f8:	17e5      	asrs	r5, r4, #31
  4050fa:	4622      	mov	r2, r4
  4050fc:	462b      	mov	r3, r5
  4050fe:	f8cd b020 	str.w	fp, [sp, #32]
  405102:	e72f      	b.n	404f64 <_vfiprintf_r+0x374>
  405104:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
  405108:	f898 3000 	ldrb.w	r3, [r8]
  40510c:	e5dd      	b.n	404cca <_vfiprintf_r+0xda>
  40510e:	f898 3000 	ldrb.w	r3, [r8]
  405112:	4642      	mov	r2, r8
  405114:	2b6c      	cmp	r3, #108	; 0x6c
  405116:	bf03      	ittte	eq
  405118:	f108 0801 	addeq.w	r8, r8, #1
  40511c:	f04a 0a20 	orreq.w	sl, sl, #32
  405120:	7853      	ldrbeq	r3, [r2, #1]
  405122:	f04a 0a10 	orrne.w	sl, sl, #16
  405126:	e5d0      	b.n	404cca <_vfiprintf_r+0xda>
  405128:	f01a 0f20 	tst.w	sl, #32
  40512c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  405130:	f000 82f8 	beq.w	405724 <_vfiprintf_r+0xb34>
  405134:	9c08      	ldr	r4, [sp, #32]
  405136:	6821      	ldr	r1, [r4, #0]
  405138:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40513a:	17e5      	asrs	r5, r4, #31
  40513c:	462b      	mov	r3, r5
  40513e:	9d08      	ldr	r5, [sp, #32]
  405140:	4622      	mov	r2, r4
  405142:	3504      	adds	r5, #4
  405144:	9508      	str	r5, [sp, #32]
  405146:	e9c1 2300 	strd	r2, r3, [r1]
  40514a:	e584      	b.n	404c56 <_vfiprintf_r+0x66>
  40514c:	9c08      	ldr	r4, [sp, #32]
  40514e:	9004      	str	r0, [sp, #16]
  405150:	6827      	ldr	r7, [r4, #0]
  405152:	46ac      	mov	ip, r5
  405154:	f04f 0500 	mov.w	r5, #0
  405158:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
  40515c:	3404      	adds	r4, #4
  40515e:	2f00      	cmp	r7, #0
  405160:	f000 8334 	beq.w	4057cc <_vfiprintf_r+0xbdc>
  405164:	f1bc 0f00 	cmp.w	ip, #0
  405168:	4638      	mov	r0, r7
  40516a:	f2c0 8308 	blt.w	40577e <_vfiprintf_r+0xb8e>
  40516e:	4662      	mov	r2, ip
  405170:	2100      	movs	r1, #0
  405172:	f8cd c004 	str.w	ip, [sp, #4]
  405176:	f001 fc49 	bl	406a0c <memchr>
  40517a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40517e:	2800      	cmp	r0, #0
  405180:	f000 833c 	beq.w	4057fc <_vfiprintf_r+0xc0c>
  405184:	1bc0      	subs	r0, r0, r7
  405186:	4560      	cmp	r0, ip
  405188:	bfa8      	it	ge
  40518a:	4660      	movge	r0, ip
  40518c:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  405190:	9005      	str	r0, [sp, #20]
  405192:	9408      	str	r4, [sp, #32]
  405194:	9507      	str	r5, [sp, #28]
  405196:	f04f 0c00 	mov.w	ip, #0
  40519a:	e65d      	b.n	404e58 <_vfiprintf_r+0x268>
  40519c:	0040d13c 	.word	0x0040d13c
  4051a0:	0040d0fc 	.word	0x0040d0fc
  4051a4:	9a08      	ldr	r2, [sp, #32]
  4051a6:	9004      	str	r0, [sp, #16]
  4051a8:	2330      	movs	r3, #48	; 0x30
  4051aa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4051ae:	f102 0b04 	add.w	fp, r2, #4
  4051b2:	2378      	movs	r3, #120	; 0x78
  4051b4:	48af      	ldr	r0, [pc, #700]	; (405474 <_vfiprintf_r+0x884>)
  4051b6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
  4051ba:	46ac      	mov	ip, r5
  4051bc:	6814      	ldr	r4, [r2, #0]
  4051be:	f8cd b020 	str.w	fp, [sp, #32]
  4051c2:	f04a 0a02 	orr.w	sl, sl, #2
  4051c6:	2500      	movs	r5, #0
  4051c8:	900a      	str	r0, [sp, #40]	; 0x28
  4051ca:	2302      	movs	r3, #2
  4051cc:	e621      	b.n	404e12 <_vfiprintf_r+0x222>
  4051ce:	f04a 0a20 	orr.w	sl, sl, #32
  4051d2:	f898 3000 	ldrb.w	r3, [r8]
  4051d6:	e578      	b.n	404cca <_vfiprintf_r+0xda>
  4051d8:	f8dd b020 	ldr.w	fp, [sp, #32]
  4051dc:	f8db 0000 	ldr.w	r0, [fp]
  4051e0:	2800      	cmp	r0, #0
  4051e2:	f10b 0304 	add.w	r3, fp, #4
  4051e6:	f6ff adfb 	blt.w	404de0 <_vfiprintf_r+0x1f0>
  4051ea:	9308      	str	r3, [sp, #32]
  4051ec:	f898 3000 	ldrb.w	r3, [r8]
  4051f0:	e56b      	b.n	404cca <_vfiprintf_r+0xda>
  4051f2:	f898 3000 	ldrb.w	r3, [r8]
  4051f6:	212b      	movs	r1, #43	; 0x2b
  4051f8:	e567      	b.n	404cca <_vfiprintf_r+0xda>
  4051fa:	f898 3000 	ldrb.w	r3, [r8]
  4051fe:	2b2a      	cmp	r3, #42	; 0x2a
  405200:	f108 0401 	add.w	r4, r8, #1
  405204:	f000 8309 	beq.w	40581a <_vfiprintf_r+0xc2a>
  405208:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40520c:	2a09      	cmp	r2, #9
  40520e:	bf98      	it	ls
  405210:	2500      	movls	r5, #0
  405212:	f200 82fe 	bhi.w	405812 <_vfiprintf_r+0xc22>
  405216:	f814 3b01 	ldrb.w	r3, [r4], #1
  40521a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40521e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405222:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405226:	2a09      	cmp	r2, #9
  405228:	d9f5      	bls.n	405216 <_vfiprintf_r+0x626>
  40522a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  40522e:	46a0      	mov	r8, r4
  405230:	e54d      	b.n	404cce <_vfiprintf_r+0xde>
  405232:	4c90      	ldr	r4, [pc, #576]	; (405474 <_vfiprintf_r+0x884>)
  405234:	9004      	str	r0, [sp, #16]
  405236:	f01a 0f20 	tst.w	sl, #32
  40523a:	46ac      	mov	ip, r5
  40523c:	940a      	str	r4, [sp, #40]	; 0x28
  40523e:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  405242:	f47f af12 	bne.w	40506a <_vfiprintf_r+0x47a>
  405246:	f01a 0f10 	tst.w	sl, #16
  40524a:	f040 81e9 	bne.w	405620 <_vfiprintf_r+0xa30>
  40524e:	f01a 0f40 	tst.w	sl, #64	; 0x40
  405252:	f000 81e5 	beq.w	405620 <_vfiprintf_r+0xa30>
  405256:	f8dd b020 	ldr.w	fp, [sp, #32]
  40525a:	f8bb 4000 	ldrh.w	r4, [fp]
  40525e:	f10b 0b04 	add.w	fp, fp, #4
  405262:	2500      	movs	r5, #0
  405264:	f8cd b020 	str.w	fp, [sp, #32]
  405268:	e709      	b.n	40507e <_vfiprintf_r+0x48e>
  40526a:	f898 3000 	ldrb.w	r3, [r8]
  40526e:	2900      	cmp	r1, #0
  405270:	f47f ad2b 	bne.w	404cca <_vfiprintf_r+0xda>
  405274:	2120      	movs	r1, #32
  405276:	e528      	b.n	404cca <_vfiprintf_r+0xda>
  405278:	f04a 0a01 	orr.w	sl, sl, #1
  40527c:	f898 3000 	ldrb.w	r3, [r8]
  405280:	e523      	b.n	404cca <_vfiprintf_r+0xda>
  405282:	9004      	str	r0, [sp, #16]
  405284:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
  405288:	2b00      	cmp	r3, #0
  40528a:	f000 80f9 	beq.w	405480 <_vfiprintf_r+0x890>
  40528e:	2501      	movs	r5, #1
  405290:	f04f 0b00 	mov.w	fp, #0
  405294:	9503      	str	r5, [sp, #12]
  405296:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  40529a:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  40529e:	9505      	str	r5, [sp, #20]
  4052a0:	af16      	add	r7, sp, #88	; 0x58
  4052a2:	e710      	b.n	4050c6 <_vfiprintf_r+0x4d6>
  4052a4:	9806      	ldr	r0, [sp, #24]
  4052a6:	9902      	ldr	r1, [sp, #8]
  4052a8:	aa13      	add	r2, sp, #76	; 0x4c
  4052aa:	f7ff fc65 	bl	404b78 <__sprint_r.part.0>
  4052ae:	2800      	cmp	r0, #0
  4052b0:	f040 80ed 	bne.w	40548e <_vfiprintf_r+0x89e>
  4052b4:	9814      	ldr	r0, [sp, #80]	; 0x50
  4052b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4052b8:	1c43      	adds	r3, r0, #1
  4052ba:	46cc      	mov	ip, r9
  4052bc:	e602      	b.n	404ec4 <_vfiprintf_r+0x2d4>
  4052be:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4052c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4052c2:	1c59      	adds	r1, r3, #1
  4052c4:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
  4052c8:	b168      	cbz	r0, 4052e6 <_vfiprintf_r+0x6f6>
  4052ca:	3201      	adds	r2, #1
  4052cc:	f10d 0047 	add.w	r0, sp, #71	; 0x47
  4052d0:	2301      	movs	r3, #1
  4052d2:	2907      	cmp	r1, #7
  4052d4:	9215      	str	r2, [sp, #84]	; 0x54
  4052d6:	9114      	str	r1, [sp, #80]	; 0x50
  4052d8:	e886 0009 	stmia.w	r6, {r0, r3}
  4052dc:	f300 8160 	bgt.w	4055a0 <_vfiprintf_r+0x9b0>
  4052e0:	460b      	mov	r3, r1
  4052e2:	3608      	adds	r6, #8
  4052e4:	3101      	adds	r1, #1
  4052e6:	9c07      	ldr	r4, [sp, #28]
  4052e8:	b164      	cbz	r4, 405304 <_vfiprintf_r+0x714>
  4052ea:	3202      	adds	r2, #2
  4052ec:	a812      	add	r0, sp, #72	; 0x48
  4052ee:	2302      	movs	r3, #2
  4052f0:	2907      	cmp	r1, #7
  4052f2:	9215      	str	r2, [sp, #84]	; 0x54
  4052f4:	9114      	str	r1, [sp, #80]	; 0x50
  4052f6:	e886 0009 	stmia.w	r6, {r0, r3}
  4052fa:	f300 8157 	bgt.w	4055ac <_vfiprintf_r+0x9bc>
  4052fe:	460b      	mov	r3, r1
  405300:	3608      	adds	r6, #8
  405302:	3101      	adds	r1, #1
  405304:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405306:	2d80      	cmp	r5, #128	; 0x80
  405308:	f000 8101 	beq.w	40550e <_vfiprintf_r+0x91e>
  40530c:	9d05      	ldr	r5, [sp, #20]
  40530e:	ebc5 040c 	rsb	r4, r5, ip
  405312:	2c00      	cmp	r4, #0
  405314:	dd2f      	ble.n	405376 <_vfiprintf_r+0x786>
  405316:	2c10      	cmp	r4, #16
  405318:	4d57      	ldr	r5, [pc, #348]	; (405478 <_vfiprintf_r+0x888>)
  40531a:	dd22      	ble.n	405362 <_vfiprintf_r+0x772>
  40531c:	4630      	mov	r0, r6
  40531e:	f04f 0b10 	mov.w	fp, #16
  405322:	462e      	mov	r6, r5
  405324:	4625      	mov	r5, r4
  405326:	9c06      	ldr	r4, [sp, #24]
  405328:	e006      	b.n	405338 <_vfiprintf_r+0x748>
  40532a:	f103 0c02 	add.w	ip, r3, #2
  40532e:	3008      	adds	r0, #8
  405330:	460b      	mov	r3, r1
  405332:	3d10      	subs	r5, #16
  405334:	2d10      	cmp	r5, #16
  405336:	dd10      	ble.n	40535a <_vfiprintf_r+0x76a>
  405338:	1c59      	adds	r1, r3, #1
  40533a:	3210      	adds	r2, #16
  40533c:	2907      	cmp	r1, #7
  40533e:	9215      	str	r2, [sp, #84]	; 0x54
  405340:	e880 0840 	stmia.w	r0, {r6, fp}
  405344:	9114      	str	r1, [sp, #80]	; 0x50
  405346:	ddf0      	ble.n	40532a <_vfiprintf_r+0x73a>
  405348:	2a00      	cmp	r2, #0
  40534a:	d163      	bne.n	405414 <_vfiprintf_r+0x824>
  40534c:	3d10      	subs	r5, #16
  40534e:	2d10      	cmp	r5, #16
  405350:	f04f 0c01 	mov.w	ip, #1
  405354:	4613      	mov	r3, r2
  405356:	4648      	mov	r0, r9
  405358:	dcee      	bgt.n	405338 <_vfiprintf_r+0x748>
  40535a:	462c      	mov	r4, r5
  40535c:	4661      	mov	r1, ip
  40535e:	4635      	mov	r5, r6
  405360:	4606      	mov	r6, r0
  405362:	4422      	add	r2, r4
  405364:	2907      	cmp	r1, #7
  405366:	9215      	str	r2, [sp, #84]	; 0x54
  405368:	6035      	str	r5, [r6, #0]
  40536a:	6074      	str	r4, [r6, #4]
  40536c:	9114      	str	r1, [sp, #80]	; 0x50
  40536e:	f300 80c1 	bgt.w	4054f4 <_vfiprintf_r+0x904>
  405372:	3608      	adds	r6, #8
  405374:	3101      	adds	r1, #1
  405376:	9d05      	ldr	r5, [sp, #20]
  405378:	6037      	str	r7, [r6, #0]
  40537a:	442a      	add	r2, r5
  40537c:	2907      	cmp	r1, #7
  40537e:	9215      	str	r2, [sp, #84]	; 0x54
  405380:	6075      	str	r5, [r6, #4]
  405382:	9114      	str	r1, [sp, #80]	; 0x50
  405384:	f340 80c1 	ble.w	40550a <_vfiprintf_r+0x91a>
  405388:	2a00      	cmp	r2, #0
  40538a:	f040 8130 	bne.w	4055ee <_vfiprintf_r+0x9fe>
  40538e:	9214      	str	r2, [sp, #80]	; 0x50
  405390:	464e      	mov	r6, r9
  405392:	f01a 0f04 	tst.w	sl, #4
  405396:	f000 808b 	beq.w	4054b0 <_vfiprintf_r+0x8c0>
  40539a:	9d04      	ldr	r5, [sp, #16]
  40539c:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4053a0:	ebcb 0405 	rsb	r4, fp, r5
  4053a4:	2c00      	cmp	r4, #0
  4053a6:	f340 8083 	ble.w	4054b0 <_vfiprintf_r+0x8c0>
  4053aa:	2c10      	cmp	r4, #16
  4053ac:	f340 8222 	ble.w	4057f4 <_vfiprintf_r+0xc04>
  4053b0:	9914      	ldr	r1, [sp, #80]	; 0x50
  4053b2:	4d32      	ldr	r5, [pc, #200]	; (40547c <_vfiprintf_r+0x88c>)
  4053b4:	f8dd a018 	ldr.w	sl, [sp, #24]
  4053b8:	f8dd b008 	ldr.w	fp, [sp, #8]
  4053bc:	2710      	movs	r7, #16
  4053be:	e005      	b.n	4053cc <_vfiprintf_r+0x7dc>
  4053c0:	1c88      	adds	r0, r1, #2
  4053c2:	3608      	adds	r6, #8
  4053c4:	4619      	mov	r1, r3
  4053c6:	3c10      	subs	r4, #16
  4053c8:	2c10      	cmp	r4, #16
  4053ca:	dd10      	ble.n	4053ee <_vfiprintf_r+0x7fe>
  4053cc:	1c4b      	adds	r3, r1, #1
  4053ce:	3210      	adds	r2, #16
  4053d0:	2b07      	cmp	r3, #7
  4053d2:	9215      	str	r2, [sp, #84]	; 0x54
  4053d4:	e886 00a0 	stmia.w	r6, {r5, r7}
  4053d8:	9314      	str	r3, [sp, #80]	; 0x50
  4053da:	ddf1      	ble.n	4053c0 <_vfiprintf_r+0x7d0>
  4053dc:	2a00      	cmp	r2, #0
  4053de:	d17d      	bne.n	4054dc <_vfiprintf_r+0x8ec>
  4053e0:	3c10      	subs	r4, #16
  4053e2:	2c10      	cmp	r4, #16
  4053e4:	f04f 0001 	mov.w	r0, #1
  4053e8:	4611      	mov	r1, r2
  4053ea:	464e      	mov	r6, r9
  4053ec:	dcee      	bgt.n	4053cc <_vfiprintf_r+0x7dc>
  4053ee:	4422      	add	r2, r4
  4053f0:	2807      	cmp	r0, #7
  4053f2:	9215      	str	r2, [sp, #84]	; 0x54
  4053f4:	6035      	str	r5, [r6, #0]
  4053f6:	6074      	str	r4, [r6, #4]
  4053f8:	9014      	str	r0, [sp, #80]	; 0x50
  4053fa:	dd59      	ble.n	4054b0 <_vfiprintf_r+0x8c0>
  4053fc:	2a00      	cmp	r2, #0
  4053fe:	d14f      	bne.n	4054a0 <_vfiprintf_r+0x8b0>
  405400:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405402:	f8dd b00c 	ldr.w	fp, [sp, #12]
  405406:	9d04      	ldr	r5, [sp, #16]
  405408:	45ab      	cmp	fp, r5
  40540a:	bfac      	ite	ge
  40540c:	445c      	addge	r4, fp
  40540e:	1964      	addlt	r4, r4, r5
  405410:	9409      	str	r4, [sp, #36]	; 0x24
  405412:	e05e      	b.n	4054d2 <_vfiprintf_r+0x8e2>
  405414:	4620      	mov	r0, r4
  405416:	9902      	ldr	r1, [sp, #8]
  405418:	aa13      	add	r2, sp, #76	; 0x4c
  40541a:	f7ff fbad 	bl	404b78 <__sprint_r.part.0>
  40541e:	2800      	cmp	r0, #0
  405420:	d135      	bne.n	40548e <_vfiprintf_r+0x89e>
  405422:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405424:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405426:	f103 0c01 	add.w	ip, r3, #1
  40542a:	4648      	mov	r0, r9
  40542c:	e781      	b.n	405332 <_vfiprintf_r+0x742>
  40542e:	08e0      	lsrs	r0, r4, #3
  405430:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  405434:	f004 0207 	and.w	r2, r4, #7
  405438:	08e9      	lsrs	r1, r5, #3
  40543a:	3230      	adds	r2, #48	; 0x30
  40543c:	ea50 0b01 	orrs.w	fp, r0, r1
  405440:	461f      	mov	r7, r3
  405442:	701a      	strb	r2, [r3, #0]
  405444:	4604      	mov	r4, r0
  405446:	460d      	mov	r5, r1
  405448:	f103 33ff 	add.w	r3, r3, #4294967295
  40544c:	d1ef      	bne.n	40542e <_vfiprintf_r+0x83e>
  40544e:	f01a 0f01 	tst.w	sl, #1
  405452:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  405456:	4639      	mov	r1, r7
  405458:	f000 80b9 	beq.w	4055ce <_vfiprintf_r+0x9de>
  40545c:	2a30      	cmp	r2, #48	; 0x30
  40545e:	f43f acf8 	beq.w	404e52 <_vfiprintf_r+0x262>
  405462:	461f      	mov	r7, r3
  405464:	ebc7 0509 	rsb	r5, r7, r9
  405468:	2330      	movs	r3, #48	; 0x30
  40546a:	9505      	str	r5, [sp, #20]
  40546c:	f801 3c01 	strb.w	r3, [r1, #-1]
  405470:	e4f2      	b.n	404e58 <_vfiprintf_r+0x268>
  405472:	bf00      	nop
  405474:	0040d110 	.word	0x0040d110
  405478:	0040d12c 	.word	0x0040d12c
  40547c:	0040d13c 	.word	0x0040d13c
  405480:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405482:	b123      	cbz	r3, 40548e <_vfiprintf_r+0x89e>
  405484:	9806      	ldr	r0, [sp, #24]
  405486:	9902      	ldr	r1, [sp, #8]
  405488:	aa13      	add	r2, sp, #76	; 0x4c
  40548a:	f7ff fb75 	bl	404b78 <__sprint_r.part.0>
  40548e:	9c02      	ldr	r4, [sp, #8]
  405490:	89a3      	ldrh	r3, [r4, #12]
  405492:	065b      	lsls	r3, r3, #25
  405494:	f53f ac9c 	bmi.w	404dd0 <_vfiprintf_r+0x1e0>
  405498:	9809      	ldr	r0, [sp, #36]	; 0x24
  40549a:	b031      	add	sp, #196	; 0xc4
  40549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4054a0:	9806      	ldr	r0, [sp, #24]
  4054a2:	9902      	ldr	r1, [sp, #8]
  4054a4:	aa13      	add	r2, sp, #76	; 0x4c
  4054a6:	f7ff fb67 	bl	404b78 <__sprint_r.part.0>
  4054aa:	2800      	cmp	r0, #0
  4054ac:	d1ef      	bne.n	40548e <_vfiprintf_r+0x89e>
  4054ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4054b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4054b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
  4054b6:	9d04      	ldr	r5, [sp, #16]
  4054b8:	45ab      	cmp	fp, r5
  4054ba:	bfac      	ite	ge
  4054bc:	445c      	addge	r4, fp
  4054be:	1964      	addlt	r4, r4, r5
  4054c0:	9409      	str	r4, [sp, #36]	; 0x24
  4054c2:	b132      	cbz	r2, 4054d2 <_vfiprintf_r+0x8e2>
  4054c4:	9806      	ldr	r0, [sp, #24]
  4054c6:	9902      	ldr	r1, [sp, #8]
  4054c8:	aa13      	add	r2, sp, #76	; 0x4c
  4054ca:	f7ff fb55 	bl	404b78 <__sprint_r.part.0>
  4054ce:	2800      	cmp	r0, #0
  4054d0:	d1dd      	bne.n	40548e <_vfiprintf_r+0x89e>
  4054d2:	2000      	movs	r0, #0
  4054d4:	9014      	str	r0, [sp, #80]	; 0x50
  4054d6:	464e      	mov	r6, r9
  4054d8:	f7ff bbbd 	b.w	404c56 <_vfiprintf_r+0x66>
  4054dc:	4650      	mov	r0, sl
  4054de:	4659      	mov	r1, fp
  4054e0:	aa13      	add	r2, sp, #76	; 0x4c
  4054e2:	f7ff fb49 	bl	404b78 <__sprint_r.part.0>
  4054e6:	2800      	cmp	r0, #0
  4054e8:	d1d1      	bne.n	40548e <_vfiprintf_r+0x89e>
  4054ea:	9914      	ldr	r1, [sp, #80]	; 0x50
  4054ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4054ee:	1c48      	adds	r0, r1, #1
  4054f0:	464e      	mov	r6, r9
  4054f2:	e768      	b.n	4053c6 <_vfiprintf_r+0x7d6>
  4054f4:	2a00      	cmp	r2, #0
  4054f6:	f040 80fa 	bne.w	4056ee <_vfiprintf_r+0xafe>
  4054fa:	9c05      	ldr	r4, [sp, #20]
  4054fc:	9720      	str	r7, [sp, #128]	; 0x80
  4054fe:	2301      	movs	r3, #1
  405500:	9421      	str	r4, [sp, #132]	; 0x84
  405502:	9415      	str	r4, [sp, #84]	; 0x54
  405504:	4622      	mov	r2, r4
  405506:	9314      	str	r3, [sp, #80]	; 0x50
  405508:	464e      	mov	r6, r9
  40550a:	3608      	adds	r6, #8
  40550c:	e741      	b.n	405392 <_vfiprintf_r+0x7a2>
  40550e:	9d04      	ldr	r5, [sp, #16]
  405510:	f8dd b00c 	ldr.w	fp, [sp, #12]
  405514:	ebcb 0405 	rsb	r4, fp, r5
  405518:	2c00      	cmp	r4, #0
  40551a:	f77f aef7 	ble.w	40530c <_vfiprintf_r+0x71c>
  40551e:	2c10      	cmp	r4, #16
  405520:	4da8      	ldr	r5, [pc, #672]	; (4057c4 <_vfiprintf_r+0xbd4>)
  405522:	f340 8174 	ble.w	40580e <_vfiprintf_r+0xc1e>
  405526:	4629      	mov	r1, r5
  405528:	f04f 0b10 	mov.w	fp, #16
  40552c:	4625      	mov	r5, r4
  40552e:	4664      	mov	r4, ip
  405530:	46b4      	mov	ip, r6
  405532:	460e      	mov	r6, r1
  405534:	e006      	b.n	405544 <_vfiprintf_r+0x954>
  405536:	1c98      	adds	r0, r3, #2
  405538:	f10c 0c08 	add.w	ip, ip, #8
  40553c:	460b      	mov	r3, r1
  40553e:	3d10      	subs	r5, #16
  405540:	2d10      	cmp	r5, #16
  405542:	dd0f      	ble.n	405564 <_vfiprintf_r+0x974>
  405544:	1c59      	adds	r1, r3, #1
  405546:	3210      	adds	r2, #16
  405548:	2907      	cmp	r1, #7
  40554a:	9215      	str	r2, [sp, #84]	; 0x54
  40554c:	e88c 0840 	stmia.w	ip, {r6, fp}
  405550:	9114      	str	r1, [sp, #80]	; 0x50
  405552:	ddf0      	ble.n	405536 <_vfiprintf_r+0x946>
  405554:	b9ba      	cbnz	r2, 405586 <_vfiprintf_r+0x996>
  405556:	3d10      	subs	r5, #16
  405558:	2d10      	cmp	r5, #16
  40555a:	f04f 0001 	mov.w	r0, #1
  40555e:	4613      	mov	r3, r2
  405560:	46cc      	mov	ip, r9
  405562:	dcef      	bgt.n	405544 <_vfiprintf_r+0x954>
  405564:	4633      	mov	r3, r6
  405566:	4666      	mov	r6, ip
  405568:	46a4      	mov	ip, r4
  40556a:	462c      	mov	r4, r5
  40556c:	461d      	mov	r5, r3
  40556e:	4422      	add	r2, r4
  405570:	2807      	cmp	r0, #7
  405572:	9215      	str	r2, [sp, #84]	; 0x54
  405574:	6035      	str	r5, [r6, #0]
  405576:	6074      	str	r4, [r6, #4]
  405578:	9014      	str	r0, [sp, #80]	; 0x50
  40557a:	f300 80b2 	bgt.w	4056e2 <_vfiprintf_r+0xaf2>
  40557e:	3608      	adds	r6, #8
  405580:	1c41      	adds	r1, r0, #1
  405582:	4603      	mov	r3, r0
  405584:	e6c2      	b.n	40530c <_vfiprintf_r+0x71c>
  405586:	9806      	ldr	r0, [sp, #24]
  405588:	9902      	ldr	r1, [sp, #8]
  40558a:	aa13      	add	r2, sp, #76	; 0x4c
  40558c:	f7ff faf4 	bl	404b78 <__sprint_r.part.0>
  405590:	2800      	cmp	r0, #0
  405592:	f47f af7c 	bne.w	40548e <_vfiprintf_r+0x89e>
  405596:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405598:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40559a:	1c58      	adds	r0, r3, #1
  40559c:	46cc      	mov	ip, r9
  40559e:	e7ce      	b.n	40553e <_vfiprintf_r+0x94e>
  4055a0:	2a00      	cmp	r2, #0
  4055a2:	d17c      	bne.n	40569e <_vfiprintf_r+0xaae>
  4055a4:	4619      	mov	r1, r3
  4055a6:	464e      	mov	r6, r9
  4055a8:	4613      	mov	r3, r2
  4055aa:	e69c      	b.n	4052e6 <_vfiprintf_r+0x6f6>
  4055ac:	2a00      	cmp	r2, #0
  4055ae:	f040 8087 	bne.w	4056c0 <_vfiprintf_r+0xad0>
  4055b2:	2101      	movs	r1, #1
  4055b4:	4613      	mov	r3, r2
  4055b6:	464e      	mov	r6, r9
  4055b8:	e6a4      	b.n	405304 <_vfiprintf_r+0x714>
  4055ba:	464f      	mov	r7, r9
  4055bc:	e44c      	b.n	404e58 <_vfiprintf_r+0x268>
  4055be:	2d00      	cmp	r5, #0
  4055c0:	bf08      	it	eq
  4055c2:	2c0a      	cmpeq	r4, #10
  4055c4:	d249      	bcs.n	40565a <_vfiprintf_r+0xa6a>
  4055c6:	af30      	add	r7, sp, #192	; 0xc0
  4055c8:	3430      	adds	r4, #48	; 0x30
  4055ca:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4055ce:	ebc7 0309 	rsb	r3, r7, r9
  4055d2:	9305      	str	r3, [sp, #20]
  4055d4:	e440      	b.n	404e58 <_vfiprintf_r+0x268>
  4055d6:	2302      	movs	r3, #2
  4055d8:	e41b      	b.n	404e12 <_vfiprintf_r+0x222>
  4055da:	2a00      	cmp	r2, #0
  4055dc:	f040 80b2 	bne.w	405744 <_vfiprintf_r+0xb54>
  4055e0:	4613      	mov	r3, r2
  4055e2:	2101      	movs	r1, #1
  4055e4:	464e      	mov	r6, r9
  4055e6:	e66d      	b.n	4052c4 <_vfiprintf_r+0x6d4>
  4055e8:	4644      	mov	r4, r8
  4055ea:	f7ff bb5c 	b.w	404ca6 <_vfiprintf_r+0xb6>
  4055ee:	9806      	ldr	r0, [sp, #24]
  4055f0:	9902      	ldr	r1, [sp, #8]
  4055f2:	aa13      	add	r2, sp, #76	; 0x4c
  4055f4:	f7ff fac0 	bl	404b78 <__sprint_r.part.0>
  4055f8:	2800      	cmp	r0, #0
  4055fa:	f47f af48 	bne.w	40548e <_vfiprintf_r+0x89e>
  4055fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405600:	464e      	mov	r6, r9
  405602:	e6c6      	b.n	405392 <_vfiprintf_r+0x7a2>
  405604:	9d08      	ldr	r5, [sp, #32]
  405606:	682c      	ldr	r4, [r5, #0]
  405608:	3504      	adds	r5, #4
  40560a:	9508      	str	r5, [sp, #32]
  40560c:	2500      	movs	r5, #0
  40560e:	e400      	b.n	404e12 <_vfiprintf_r+0x222>
  405610:	9d08      	ldr	r5, [sp, #32]
  405612:	682c      	ldr	r4, [r5, #0]
  405614:	3504      	adds	r5, #4
  405616:	9508      	str	r5, [sp, #32]
  405618:	2301      	movs	r3, #1
  40561a:	2500      	movs	r5, #0
  40561c:	f7ff bbf9 	b.w	404e12 <_vfiprintf_r+0x222>
  405620:	9d08      	ldr	r5, [sp, #32]
  405622:	682c      	ldr	r4, [r5, #0]
  405624:	3504      	adds	r5, #4
  405626:	9508      	str	r5, [sp, #32]
  405628:	2500      	movs	r5, #0
  40562a:	e528      	b.n	40507e <_vfiprintf_r+0x48e>
  40562c:	9d08      	ldr	r5, [sp, #32]
  40562e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405632:	682c      	ldr	r4, [r5, #0]
  405634:	f10b 0b04 	add.w	fp, fp, #4
  405638:	17e5      	asrs	r5, r4, #31
  40563a:	f8cd b020 	str.w	fp, [sp, #32]
  40563e:	4622      	mov	r2, r4
  405640:	462b      	mov	r3, r5
  405642:	e48f      	b.n	404f64 <_vfiprintf_r+0x374>
  405644:	9806      	ldr	r0, [sp, #24]
  405646:	9902      	ldr	r1, [sp, #8]
  405648:	aa13      	add	r2, sp, #76	; 0x4c
  40564a:	f7ff fa95 	bl	404b78 <__sprint_r.part.0>
  40564e:	2800      	cmp	r0, #0
  405650:	f47f af1d 	bne.w	40548e <_vfiprintf_r+0x89e>
  405654:	464e      	mov	r6, r9
  405656:	f7ff bb9b 	b.w	404d90 <_vfiprintf_r+0x1a0>
  40565a:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
  40565e:	9603      	str	r6, [sp, #12]
  405660:	465e      	mov	r6, fp
  405662:	46e3      	mov	fp, ip
  405664:	4620      	mov	r0, r4
  405666:	4629      	mov	r1, r5
  405668:	220a      	movs	r2, #10
  40566a:	2300      	movs	r3, #0
  40566c:	f007 f96e 	bl	40c94c <__aeabi_uldivmod>
  405670:	3230      	adds	r2, #48	; 0x30
  405672:	7032      	strb	r2, [r6, #0]
  405674:	4620      	mov	r0, r4
  405676:	4629      	mov	r1, r5
  405678:	220a      	movs	r2, #10
  40567a:	2300      	movs	r3, #0
  40567c:	f007 f966 	bl	40c94c <__aeabi_uldivmod>
  405680:	4604      	mov	r4, r0
  405682:	460d      	mov	r5, r1
  405684:	ea54 0005 	orrs.w	r0, r4, r5
  405688:	4637      	mov	r7, r6
  40568a:	f106 36ff 	add.w	r6, r6, #4294967295
  40568e:	d1e9      	bne.n	405664 <_vfiprintf_r+0xa74>
  405690:	ebc7 0309 	rsb	r3, r7, r9
  405694:	46dc      	mov	ip, fp
  405696:	9e03      	ldr	r6, [sp, #12]
  405698:	9305      	str	r3, [sp, #20]
  40569a:	f7ff bbdd 	b.w	404e58 <_vfiprintf_r+0x268>
  40569e:	9806      	ldr	r0, [sp, #24]
  4056a0:	9902      	ldr	r1, [sp, #8]
  4056a2:	f8cd c004 	str.w	ip, [sp, #4]
  4056a6:	aa13      	add	r2, sp, #76	; 0x4c
  4056a8:	f7ff fa66 	bl	404b78 <__sprint_r.part.0>
  4056ac:	f8dd c004 	ldr.w	ip, [sp, #4]
  4056b0:	2800      	cmp	r0, #0
  4056b2:	f47f aeec 	bne.w	40548e <_vfiprintf_r+0x89e>
  4056b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4056b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4056ba:	1c59      	adds	r1, r3, #1
  4056bc:	464e      	mov	r6, r9
  4056be:	e612      	b.n	4052e6 <_vfiprintf_r+0x6f6>
  4056c0:	9806      	ldr	r0, [sp, #24]
  4056c2:	9902      	ldr	r1, [sp, #8]
  4056c4:	f8cd c004 	str.w	ip, [sp, #4]
  4056c8:	aa13      	add	r2, sp, #76	; 0x4c
  4056ca:	f7ff fa55 	bl	404b78 <__sprint_r.part.0>
  4056ce:	f8dd c004 	ldr.w	ip, [sp, #4]
  4056d2:	2800      	cmp	r0, #0
  4056d4:	f47f aedb 	bne.w	40548e <_vfiprintf_r+0x89e>
  4056d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4056da:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4056dc:	1c59      	adds	r1, r3, #1
  4056de:	464e      	mov	r6, r9
  4056e0:	e610      	b.n	405304 <_vfiprintf_r+0x714>
  4056e2:	2a00      	cmp	r2, #0
  4056e4:	d156      	bne.n	405794 <_vfiprintf_r+0xba4>
  4056e6:	2101      	movs	r1, #1
  4056e8:	4613      	mov	r3, r2
  4056ea:	464e      	mov	r6, r9
  4056ec:	e60e      	b.n	40530c <_vfiprintf_r+0x71c>
  4056ee:	9806      	ldr	r0, [sp, #24]
  4056f0:	9902      	ldr	r1, [sp, #8]
  4056f2:	aa13      	add	r2, sp, #76	; 0x4c
  4056f4:	f7ff fa40 	bl	404b78 <__sprint_r.part.0>
  4056f8:	2800      	cmp	r0, #0
  4056fa:	f47f aec8 	bne.w	40548e <_vfiprintf_r+0x89e>
  4056fe:	9914      	ldr	r1, [sp, #80]	; 0x50
  405700:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405702:	3101      	adds	r1, #1
  405704:	464e      	mov	r6, r9
  405706:	e636      	b.n	405376 <_vfiprintf_r+0x786>
  405708:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  40570c:	4264      	negs	r4, r4
  40570e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405712:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
  405716:	f8cd b01c 	str.w	fp, [sp, #28]
  40571a:	f8cd c014 	str.w	ip, [sp, #20]
  40571e:	2301      	movs	r3, #1
  405720:	f7ff bb7f 	b.w	404e22 <_vfiprintf_r+0x232>
  405724:	f01a 0f10 	tst.w	sl, #16
  405728:	d11d      	bne.n	405766 <_vfiprintf_r+0xb76>
  40572a:	f01a 0f40 	tst.w	sl, #64	; 0x40
  40572e:	d059      	beq.n	4057e4 <_vfiprintf_r+0xbf4>
  405730:	9d08      	ldr	r5, [sp, #32]
  405732:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  405736:	682b      	ldr	r3, [r5, #0]
  405738:	3504      	adds	r5, #4
  40573a:	9508      	str	r5, [sp, #32]
  40573c:	f8a3 b000 	strh.w	fp, [r3]
  405740:	f7ff ba89 	b.w	404c56 <_vfiprintf_r+0x66>
  405744:	9806      	ldr	r0, [sp, #24]
  405746:	9902      	ldr	r1, [sp, #8]
  405748:	f8cd c004 	str.w	ip, [sp, #4]
  40574c:	aa13      	add	r2, sp, #76	; 0x4c
  40574e:	f7ff fa13 	bl	404b78 <__sprint_r.part.0>
  405752:	f8dd c004 	ldr.w	ip, [sp, #4]
  405756:	2800      	cmp	r0, #0
  405758:	f47f ae99 	bne.w	40548e <_vfiprintf_r+0x89e>
  40575c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40575e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405760:	1c59      	adds	r1, r3, #1
  405762:	464e      	mov	r6, r9
  405764:	e5ae      	b.n	4052c4 <_vfiprintf_r+0x6d4>
  405766:	f8dd b020 	ldr.w	fp, [sp, #32]
  40576a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40576c:	f8db 3000 	ldr.w	r3, [fp]
  405770:	f10b 0b04 	add.w	fp, fp, #4
  405774:	f8cd b020 	str.w	fp, [sp, #32]
  405778:	601c      	str	r4, [r3, #0]
  40577a:	f7ff ba6c 	b.w	404c56 <_vfiprintf_r+0x66>
  40577e:	9408      	str	r4, [sp, #32]
  405780:	f7fe fa32 	bl	403be8 <strlen>
  405784:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
  405788:	9005      	str	r0, [sp, #20]
  40578a:	9407      	str	r4, [sp, #28]
  40578c:	f04f 0c00 	mov.w	ip, #0
  405790:	f7ff bb62 	b.w	404e58 <_vfiprintf_r+0x268>
  405794:	9806      	ldr	r0, [sp, #24]
  405796:	9902      	ldr	r1, [sp, #8]
  405798:	f8cd c004 	str.w	ip, [sp, #4]
  40579c:	aa13      	add	r2, sp, #76	; 0x4c
  40579e:	f7ff f9eb 	bl	404b78 <__sprint_r.part.0>
  4057a2:	f8dd c004 	ldr.w	ip, [sp, #4]
  4057a6:	2800      	cmp	r0, #0
  4057a8:	f47f ae71 	bne.w	40548e <_vfiprintf_r+0x89e>
  4057ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4057b0:	1c59      	adds	r1, r3, #1
  4057b2:	464e      	mov	r6, r9
  4057b4:	e5aa      	b.n	40530c <_vfiprintf_r+0x71c>
  4057b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4057b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
  4057ba:	4d03      	ldr	r5, [pc, #12]	; (4057c8 <_vfiprintf_r+0xbd8>)
  4057bc:	3301      	adds	r3, #1
  4057be:	f7ff bb9b 	b.w	404ef8 <_vfiprintf_r+0x308>
  4057c2:	bf00      	nop
  4057c4:	0040d12c 	.word	0x0040d12c
  4057c8:	0040d13c 	.word	0x0040d13c
  4057cc:	f1bc 0f06 	cmp.w	ip, #6
  4057d0:	bf34      	ite	cc
  4057d2:	4663      	movcc	r3, ip
  4057d4:	2306      	movcs	r3, #6
  4057d6:	9408      	str	r4, [sp, #32]
  4057d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
  4057dc:	9305      	str	r3, [sp, #20]
  4057de:	9403      	str	r4, [sp, #12]
  4057e0:	4f16      	ldr	r7, [pc, #88]	; (40583c <_vfiprintf_r+0xc4c>)
  4057e2:	e470      	b.n	4050c6 <_vfiprintf_r+0x4d6>
  4057e4:	9c08      	ldr	r4, [sp, #32]
  4057e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4057e8:	6823      	ldr	r3, [r4, #0]
  4057ea:	3404      	adds	r4, #4
  4057ec:	9408      	str	r4, [sp, #32]
  4057ee:	601d      	str	r5, [r3, #0]
  4057f0:	f7ff ba31 	b.w	404c56 <_vfiprintf_r+0x66>
  4057f4:	9814      	ldr	r0, [sp, #80]	; 0x50
  4057f6:	4d12      	ldr	r5, [pc, #72]	; (405840 <_vfiprintf_r+0xc50>)
  4057f8:	3001      	adds	r0, #1
  4057fa:	e5f8      	b.n	4053ee <_vfiprintf_r+0x7fe>
  4057fc:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
  405800:	f8cd c014 	str.w	ip, [sp, #20]
  405804:	9507      	str	r5, [sp, #28]
  405806:	9408      	str	r4, [sp, #32]
  405808:	4684      	mov	ip, r0
  40580a:	f7ff bb25 	b.w	404e58 <_vfiprintf_r+0x268>
  40580e:	4608      	mov	r0, r1
  405810:	e6ad      	b.n	40556e <_vfiprintf_r+0x97e>
  405812:	46a0      	mov	r8, r4
  405814:	2500      	movs	r5, #0
  405816:	f7ff ba5a 	b.w	404cce <_vfiprintf_r+0xde>
  40581a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40581e:	f898 3001 	ldrb.w	r3, [r8, #1]
  405822:	f8db 5000 	ldr.w	r5, [fp]
  405826:	f10b 0204 	add.w	r2, fp, #4
  40582a:	2d00      	cmp	r5, #0
  40582c:	9208      	str	r2, [sp, #32]
  40582e:	46a0      	mov	r8, r4
  405830:	f6bf aa4b 	bge.w	404cca <_vfiprintf_r+0xda>
  405834:	f04f 35ff 	mov.w	r5, #4294967295
  405838:	f7ff ba47 	b.w	404cca <_vfiprintf_r+0xda>
  40583c:	0040d124 	.word	0x0040d124
  405840:	0040d13c 	.word	0x0040d13c

00405844 <__sbprintf>:
  405844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405848:	460c      	mov	r4, r1
  40584a:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  40584e:	f8b1 900c 	ldrh.w	r9, [r1, #12]
  405852:	69e7      	ldr	r7, [r4, #28]
  405854:	6e49      	ldr	r1, [r1, #100]	; 0x64
  405856:	f8b4 800e 	ldrh.w	r8, [r4, #14]
  40585a:	9119      	str	r1, [sp, #100]	; 0x64
  40585c:	ad1a      	add	r5, sp, #104	; 0x68
  40585e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  405862:	f04f 0e00 	mov.w	lr, #0
  405866:	9707      	str	r7, [sp, #28]
  405868:	f029 0902 	bic.w	r9, r9, #2
  40586c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40586e:	9500      	str	r5, [sp, #0]
  405870:	4669      	mov	r1, sp
  405872:	9504      	str	r5, [sp, #16]
  405874:	9602      	str	r6, [sp, #8]
  405876:	9605      	str	r6, [sp, #20]
  405878:	f8ad 900c 	strh.w	r9, [sp, #12]
  40587c:	f8ad 800e 	strh.w	r8, [sp, #14]
  405880:	9709      	str	r7, [sp, #36]	; 0x24
  405882:	f8cd e018 	str.w	lr, [sp, #24]
  405886:	4606      	mov	r6, r0
  405888:	f7ff f9b2 	bl	404bf0 <_vfiprintf_r>
  40588c:	1e05      	subs	r5, r0, #0
  40588e:	db07      	blt.n	4058a0 <__sbprintf+0x5c>
  405890:	4630      	mov	r0, r6
  405892:	4669      	mov	r1, sp
  405894:	f000 f954 	bl	405b40 <_fflush_r>
  405898:	2800      	cmp	r0, #0
  40589a:	bf18      	it	ne
  40589c:	f04f 35ff 	movne.w	r5, #4294967295
  4058a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4058a4:	065b      	lsls	r3, r3, #25
  4058a6:	d503      	bpl.n	4058b0 <__sbprintf+0x6c>
  4058a8:	89a3      	ldrh	r3, [r4, #12]
  4058aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058ae:	81a3      	strh	r3, [r4, #12]
  4058b0:	4628      	mov	r0, r5
  4058b2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  4058b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4058ba:	bf00      	nop

004058bc <_write_r>:
  4058bc:	b570      	push	{r4, r5, r6, lr}
  4058be:	4c08      	ldr	r4, [pc, #32]	; (4058e0 <_write_r+0x24>)
  4058c0:	4606      	mov	r6, r0
  4058c2:	2500      	movs	r5, #0
  4058c4:	4608      	mov	r0, r1
  4058c6:	4611      	mov	r1, r2
  4058c8:	461a      	mov	r2, r3
  4058ca:	6025      	str	r5, [r4, #0]
  4058cc:	f7fc ffe0 	bl	402890 <_write>
  4058d0:	1c43      	adds	r3, r0, #1
  4058d2:	d000      	beq.n	4058d6 <_write_r+0x1a>
  4058d4:	bd70      	pop	{r4, r5, r6, pc}
  4058d6:	6823      	ldr	r3, [r4, #0]
  4058d8:	2b00      	cmp	r3, #0
  4058da:	d0fb      	beq.n	4058d4 <_write_r+0x18>
  4058dc:	6033      	str	r3, [r6, #0]
  4058de:	bd70      	pop	{r4, r5, r6, pc}
  4058e0:	2000c7bc 	.word	0x2000c7bc

004058e4 <__swsetup_r>:
  4058e4:	4b2f      	ldr	r3, [pc, #188]	; (4059a4 <__swsetup_r+0xc0>)
  4058e6:	681b      	ldr	r3, [r3, #0]
  4058e8:	b570      	push	{r4, r5, r6, lr}
  4058ea:	4606      	mov	r6, r0
  4058ec:	460c      	mov	r4, r1
  4058ee:	b113      	cbz	r3, 4058f6 <__swsetup_r+0x12>
  4058f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4058f2:	2a00      	cmp	r2, #0
  4058f4:	d036      	beq.n	405964 <__swsetup_r+0x80>
  4058f6:	89a5      	ldrh	r5, [r4, #12]
  4058f8:	b2ab      	uxth	r3, r5
  4058fa:	0719      	lsls	r1, r3, #28
  4058fc:	d50c      	bpl.n	405918 <__swsetup_r+0x34>
  4058fe:	6922      	ldr	r2, [r4, #16]
  405900:	b1aa      	cbz	r2, 40592e <__swsetup_r+0x4a>
  405902:	f013 0101 	ands.w	r1, r3, #1
  405906:	d01e      	beq.n	405946 <__swsetup_r+0x62>
  405908:	6963      	ldr	r3, [r4, #20]
  40590a:	2100      	movs	r1, #0
  40590c:	425b      	negs	r3, r3
  40590e:	61a3      	str	r3, [r4, #24]
  405910:	60a1      	str	r1, [r4, #8]
  405912:	b1f2      	cbz	r2, 405952 <__swsetup_r+0x6e>
  405914:	2000      	movs	r0, #0
  405916:	bd70      	pop	{r4, r5, r6, pc}
  405918:	06da      	lsls	r2, r3, #27
  40591a:	d53b      	bpl.n	405994 <__swsetup_r+0xb0>
  40591c:	075b      	lsls	r3, r3, #29
  40591e:	d425      	bmi.n	40596c <__swsetup_r+0x88>
  405920:	6922      	ldr	r2, [r4, #16]
  405922:	f045 0308 	orr.w	r3, r5, #8
  405926:	81a3      	strh	r3, [r4, #12]
  405928:	b29b      	uxth	r3, r3
  40592a:	2a00      	cmp	r2, #0
  40592c:	d1e9      	bne.n	405902 <__swsetup_r+0x1e>
  40592e:	f403 7120 	and.w	r1, r3, #640	; 0x280
  405932:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  405936:	d0e4      	beq.n	405902 <__swsetup_r+0x1e>
  405938:	4630      	mov	r0, r6
  40593a:	4621      	mov	r1, r4
  40593c:	f000 fd0e 	bl	40635c <__smakebuf_r>
  405940:	89a3      	ldrh	r3, [r4, #12]
  405942:	6922      	ldr	r2, [r4, #16]
  405944:	e7dd      	b.n	405902 <__swsetup_r+0x1e>
  405946:	0798      	lsls	r0, r3, #30
  405948:	bf58      	it	pl
  40594a:	6961      	ldrpl	r1, [r4, #20]
  40594c:	60a1      	str	r1, [r4, #8]
  40594e:	2a00      	cmp	r2, #0
  405950:	d1e0      	bne.n	405914 <__swsetup_r+0x30>
  405952:	89a3      	ldrh	r3, [r4, #12]
  405954:	061a      	lsls	r2, r3, #24
  405956:	d5dd      	bpl.n	405914 <__swsetup_r+0x30>
  405958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40595c:	81a3      	strh	r3, [r4, #12]
  40595e:	f04f 30ff 	mov.w	r0, #4294967295
  405962:	bd70      	pop	{r4, r5, r6, pc}
  405964:	4618      	mov	r0, r3
  405966:	f000 f907 	bl	405b78 <__sinit>
  40596a:	e7c4      	b.n	4058f6 <__swsetup_r+0x12>
  40596c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40596e:	b149      	cbz	r1, 405984 <__swsetup_r+0xa0>
  405970:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405974:	4299      	cmp	r1, r3
  405976:	d003      	beq.n	405980 <__swsetup_r+0x9c>
  405978:	4630      	mov	r0, r6
  40597a:	f000 fa3f 	bl	405dfc <_free_r>
  40597e:	89a5      	ldrh	r5, [r4, #12]
  405980:	2300      	movs	r3, #0
  405982:	6323      	str	r3, [r4, #48]	; 0x30
  405984:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  405988:	2300      	movs	r3, #0
  40598a:	6922      	ldr	r2, [r4, #16]
  40598c:	6063      	str	r3, [r4, #4]
  40598e:	b2ad      	uxth	r5, r5
  405990:	6022      	str	r2, [r4, #0]
  405992:	e7c6      	b.n	405922 <__swsetup_r+0x3e>
  405994:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  405998:	2309      	movs	r3, #9
  40599a:	6033      	str	r3, [r6, #0]
  40599c:	f04f 30ff 	mov.w	r0, #4294967295
  4059a0:	81a5      	strh	r5, [r4, #12]
  4059a2:	bd70      	pop	{r4, r5, r6, pc}
  4059a4:	20000518 	.word	0x20000518

004059a8 <register_fini>:
  4059a8:	4b02      	ldr	r3, [pc, #8]	; (4059b4 <register_fini+0xc>)
  4059aa:	b113      	cbz	r3, 4059b2 <register_fini+0xa>
  4059ac:	4802      	ldr	r0, [pc, #8]	; (4059b8 <register_fini+0x10>)
  4059ae:	f000 b805 	b.w	4059bc <atexit>
  4059b2:	4770      	bx	lr
  4059b4:	00000000 	.word	0x00000000
  4059b8:	00405c75 	.word	0x00405c75

004059bc <atexit>:
  4059bc:	4601      	mov	r1, r0
  4059be:	2000      	movs	r0, #0
  4059c0:	4602      	mov	r2, r0
  4059c2:	4603      	mov	r3, r0
  4059c4:	f004 b9b4 	b.w	409d30 <__register_exitproc>

004059c8 <_close_r>:
  4059c8:	b538      	push	{r3, r4, r5, lr}
  4059ca:	4c07      	ldr	r4, [pc, #28]	; (4059e8 <_close_r+0x20>)
  4059cc:	2300      	movs	r3, #0
  4059ce:	4605      	mov	r5, r0
  4059d0:	4608      	mov	r0, r1
  4059d2:	6023      	str	r3, [r4, #0]
  4059d4:	f7fd fbaa 	bl	40312c <_close>
  4059d8:	1c43      	adds	r3, r0, #1
  4059da:	d000      	beq.n	4059de <_close_r+0x16>
  4059dc:	bd38      	pop	{r3, r4, r5, pc}
  4059de:	6823      	ldr	r3, [r4, #0]
  4059e0:	2b00      	cmp	r3, #0
  4059e2:	d0fb      	beq.n	4059dc <_close_r+0x14>
  4059e4:	602b      	str	r3, [r5, #0]
  4059e6:	bd38      	pop	{r3, r4, r5, pc}
  4059e8:	2000c7bc 	.word	0x2000c7bc

004059ec <__sflush_r>:
  4059ec:	898b      	ldrh	r3, [r1, #12]
  4059ee:	b29a      	uxth	r2, r3
  4059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059f4:	460d      	mov	r5, r1
  4059f6:	0711      	lsls	r1, r2, #28
  4059f8:	4680      	mov	r8, r0
  4059fa:	d43c      	bmi.n	405a76 <__sflush_r+0x8a>
  4059fc:	686a      	ldr	r2, [r5, #4]
  4059fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405a02:	2a00      	cmp	r2, #0
  405a04:	81ab      	strh	r3, [r5, #12]
  405a06:	dd59      	ble.n	405abc <__sflush_r+0xd0>
  405a08:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405a0a:	2c00      	cmp	r4, #0
  405a0c:	d04b      	beq.n	405aa6 <__sflush_r+0xba>
  405a0e:	b29b      	uxth	r3, r3
  405a10:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  405a14:	2100      	movs	r1, #0
  405a16:	b292      	uxth	r2, r2
  405a18:	f8d8 6000 	ldr.w	r6, [r8]
  405a1c:	f8c8 1000 	str.w	r1, [r8]
  405a20:	2a00      	cmp	r2, #0
  405a22:	d04f      	beq.n	405ac4 <__sflush_r+0xd8>
  405a24:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a26:	075f      	lsls	r7, r3, #29
  405a28:	d505      	bpl.n	405a36 <__sflush_r+0x4a>
  405a2a:	6869      	ldr	r1, [r5, #4]
  405a2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a2e:	1a52      	subs	r2, r2, r1
  405a30:	b10b      	cbz	r3, 405a36 <__sflush_r+0x4a>
  405a32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a34:	1ad2      	subs	r2, r2, r3
  405a36:	4640      	mov	r0, r8
  405a38:	69e9      	ldr	r1, [r5, #28]
  405a3a:	2300      	movs	r3, #0
  405a3c:	47a0      	blx	r4
  405a3e:	1c44      	adds	r4, r0, #1
  405a40:	d04a      	beq.n	405ad8 <__sflush_r+0xec>
  405a42:	89aa      	ldrh	r2, [r5, #12]
  405a44:	692b      	ldr	r3, [r5, #16]
  405a46:	602b      	str	r3, [r5, #0]
  405a48:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405a4c:	b29b      	uxth	r3, r3
  405a4e:	2200      	movs	r2, #0
  405a50:	606a      	str	r2, [r5, #4]
  405a52:	04da      	lsls	r2, r3, #19
  405a54:	81ab      	strh	r3, [r5, #12]
  405a56:	d44c      	bmi.n	405af2 <__sflush_r+0x106>
  405a58:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a5a:	f8c8 6000 	str.w	r6, [r8]
  405a5e:	b311      	cbz	r1, 405aa6 <__sflush_r+0xba>
  405a60:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a64:	4299      	cmp	r1, r3
  405a66:	d002      	beq.n	405a6e <__sflush_r+0x82>
  405a68:	4640      	mov	r0, r8
  405a6a:	f000 f9c7 	bl	405dfc <_free_r>
  405a6e:	2000      	movs	r0, #0
  405a70:	6328      	str	r0, [r5, #48]	; 0x30
  405a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a76:	692e      	ldr	r6, [r5, #16]
  405a78:	b1ae      	cbz	r6, 405aa6 <__sflush_r+0xba>
  405a7a:	682c      	ldr	r4, [r5, #0]
  405a7c:	602e      	str	r6, [r5, #0]
  405a7e:	0791      	lsls	r1, r2, #30
  405a80:	bf0c      	ite	eq
  405a82:	696b      	ldreq	r3, [r5, #20]
  405a84:	2300      	movne	r3, #0
  405a86:	1ba4      	subs	r4, r4, r6
  405a88:	60ab      	str	r3, [r5, #8]
  405a8a:	e00a      	b.n	405aa2 <__sflush_r+0xb6>
  405a8c:	4632      	mov	r2, r6
  405a8e:	4623      	mov	r3, r4
  405a90:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405a92:	69e9      	ldr	r1, [r5, #28]
  405a94:	4640      	mov	r0, r8
  405a96:	47b8      	blx	r7
  405a98:	2800      	cmp	r0, #0
  405a9a:	ebc0 0404 	rsb	r4, r0, r4
  405a9e:	4406      	add	r6, r0
  405aa0:	dd04      	ble.n	405aac <__sflush_r+0xc0>
  405aa2:	2c00      	cmp	r4, #0
  405aa4:	dcf2      	bgt.n	405a8c <__sflush_r+0xa0>
  405aa6:	2000      	movs	r0, #0
  405aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aac:	89ab      	ldrh	r3, [r5, #12]
  405aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ab2:	81ab      	strh	r3, [r5, #12]
  405ab4:	f04f 30ff 	mov.w	r0, #4294967295
  405ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405abc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405abe:	2a00      	cmp	r2, #0
  405ac0:	dca2      	bgt.n	405a08 <__sflush_r+0x1c>
  405ac2:	e7f0      	b.n	405aa6 <__sflush_r+0xba>
  405ac4:	2301      	movs	r3, #1
  405ac6:	4640      	mov	r0, r8
  405ac8:	69e9      	ldr	r1, [r5, #28]
  405aca:	47a0      	blx	r4
  405acc:	1c43      	adds	r3, r0, #1
  405ace:	4602      	mov	r2, r0
  405ad0:	d01e      	beq.n	405b10 <__sflush_r+0x124>
  405ad2:	89ab      	ldrh	r3, [r5, #12]
  405ad4:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405ad6:	e7a6      	b.n	405a26 <__sflush_r+0x3a>
  405ad8:	f8d8 3000 	ldr.w	r3, [r8]
  405adc:	b95b      	cbnz	r3, 405af6 <__sflush_r+0x10a>
  405ade:	89a9      	ldrh	r1, [r5, #12]
  405ae0:	606b      	str	r3, [r5, #4]
  405ae2:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  405ae6:	b29b      	uxth	r3, r3
  405ae8:	692a      	ldr	r2, [r5, #16]
  405aea:	81ab      	strh	r3, [r5, #12]
  405aec:	04db      	lsls	r3, r3, #19
  405aee:	602a      	str	r2, [r5, #0]
  405af0:	d5b2      	bpl.n	405a58 <__sflush_r+0x6c>
  405af2:	6528      	str	r0, [r5, #80]	; 0x50
  405af4:	e7b0      	b.n	405a58 <__sflush_r+0x6c>
  405af6:	2b1d      	cmp	r3, #29
  405af8:	d001      	beq.n	405afe <__sflush_r+0x112>
  405afa:	2b16      	cmp	r3, #22
  405afc:	d119      	bne.n	405b32 <__sflush_r+0x146>
  405afe:	89aa      	ldrh	r2, [r5, #12]
  405b00:	692b      	ldr	r3, [r5, #16]
  405b02:	602b      	str	r3, [r5, #0]
  405b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  405b08:	2300      	movs	r3, #0
  405b0a:	81aa      	strh	r2, [r5, #12]
  405b0c:	606b      	str	r3, [r5, #4]
  405b0e:	e7a3      	b.n	405a58 <__sflush_r+0x6c>
  405b10:	f8d8 3000 	ldr.w	r3, [r8]
  405b14:	2b00      	cmp	r3, #0
  405b16:	d0dc      	beq.n	405ad2 <__sflush_r+0xe6>
  405b18:	2b1d      	cmp	r3, #29
  405b1a:	d007      	beq.n	405b2c <__sflush_r+0x140>
  405b1c:	2b16      	cmp	r3, #22
  405b1e:	d005      	beq.n	405b2c <__sflush_r+0x140>
  405b20:	89ab      	ldrh	r3, [r5, #12]
  405b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b26:	81ab      	strh	r3, [r5, #12]
  405b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b2c:	f8c8 6000 	str.w	r6, [r8]
  405b30:	e7b9      	b.n	405aa6 <__sflush_r+0xba>
  405b32:	89ab      	ldrh	r3, [r5, #12]
  405b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b38:	81ab      	strh	r3, [r5, #12]
  405b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b3e:	bf00      	nop

00405b40 <_fflush_r>:
  405b40:	b510      	push	{r4, lr}
  405b42:	4604      	mov	r4, r0
  405b44:	b082      	sub	sp, #8
  405b46:	b108      	cbz	r0, 405b4c <_fflush_r+0xc>
  405b48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b4a:	b153      	cbz	r3, 405b62 <_fflush_r+0x22>
  405b4c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  405b50:	b908      	cbnz	r0, 405b56 <_fflush_r+0x16>
  405b52:	b002      	add	sp, #8
  405b54:	bd10      	pop	{r4, pc}
  405b56:	4620      	mov	r0, r4
  405b58:	b002      	add	sp, #8
  405b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405b5e:	f7ff bf45 	b.w	4059ec <__sflush_r>
  405b62:	9101      	str	r1, [sp, #4]
  405b64:	f000 f808 	bl	405b78 <__sinit>
  405b68:	9901      	ldr	r1, [sp, #4]
  405b6a:	e7ef      	b.n	405b4c <_fflush_r+0xc>

00405b6c <_cleanup_r>:
  405b6c:	4901      	ldr	r1, [pc, #4]	; (405b74 <_cleanup_r+0x8>)
  405b6e:	f000 bb9f 	b.w	4062b0 <_fwalk>
  405b72:	bf00      	nop
  405b74:	0040adc1 	.word	0x0040adc1

00405b78 <__sinit>:
  405b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b7c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  405b7e:	b083      	sub	sp, #12
  405b80:	4607      	mov	r7, r0
  405b82:	2c00      	cmp	r4, #0
  405b84:	d165      	bne.n	405c52 <__sinit+0xda>
  405b86:	6845      	ldr	r5, [r0, #4]
  405b88:	4833      	ldr	r0, [pc, #204]	; (405c58 <__sinit+0xe0>)
  405b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
  405b8c:	2304      	movs	r3, #4
  405b8e:	2103      	movs	r1, #3
  405b90:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  405b94:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  405b98:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  405b9c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  405ba0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405ba4:	81ab      	strh	r3, [r5, #12]
  405ba6:	602c      	str	r4, [r5, #0]
  405ba8:	606c      	str	r4, [r5, #4]
  405baa:	60ac      	str	r4, [r5, #8]
  405bac:	666c      	str	r4, [r5, #100]	; 0x64
  405bae:	81ec      	strh	r4, [r5, #14]
  405bb0:	612c      	str	r4, [r5, #16]
  405bb2:	616c      	str	r4, [r5, #20]
  405bb4:	61ac      	str	r4, [r5, #24]
  405bb6:	4621      	mov	r1, r4
  405bb8:	2208      	movs	r2, #8
  405bba:	f7fd fdc5 	bl	403748 <memset>
  405bbe:	68be      	ldr	r6, [r7, #8]
  405bc0:	f8df b098 	ldr.w	fp, [pc, #152]	; 405c5c <__sinit+0xe4>
  405bc4:	f8df a098 	ldr.w	sl, [pc, #152]	; 405c60 <__sinit+0xe8>
  405bc8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 405c64 <__sinit+0xec>
  405bcc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 405c68 <__sinit+0xf0>
  405bd0:	61ed      	str	r5, [r5, #28]
  405bd2:	2301      	movs	r3, #1
  405bd4:	2209      	movs	r2, #9
  405bd6:	f8c5 b020 	str.w	fp, [r5, #32]
  405bda:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405bde:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405be2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405be6:	4621      	mov	r1, r4
  405be8:	81f3      	strh	r3, [r6, #14]
  405bea:	81b2      	strh	r2, [r6, #12]
  405bec:	6034      	str	r4, [r6, #0]
  405bee:	6074      	str	r4, [r6, #4]
  405bf0:	60b4      	str	r4, [r6, #8]
  405bf2:	6674      	str	r4, [r6, #100]	; 0x64
  405bf4:	6134      	str	r4, [r6, #16]
  405bf6:	6174      	str	r4, [r6, #20]
  405bf8:	61b4      	str	r4, [r6, #24]
  405bfa:	2208      	movs	r2, #8
  405bfc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  405c00:	9301      	str	r3, [sp, #4]
  405c02:	f7fd fda1 	bl	403748 <memset>
  405c06:	68fd      	ldr	r5, [r7, #12]
  405c08:	61f6      	str	r6, [r6, #28]
  405c0a:	2012      	movs	r0, #18
  405c0c:	2202      	movs	r2, #2
  405c0e:	f8c6 b020 	str.w	fp, [r6, #32]
  405c12:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  405c16:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  405c1a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  405c1e:	4621      	mov	r1, r4
  405c20:	81a8      	strh	r0, [r5, #12]
  405c22:	81ea      	strh	r2, [r5, #14]
  405c24:	602c      	str	r4, [r5, #0]
  405c26:	606c      	str	r4, [r5, #4]
  405c28:	60ac      	str	r4, [r5, #8]
  405c2a:	666c      	str	r4, [r5, #100]	; 0x64
  405c2c:	612c      	str	r4, [r5, #16]
  405c2e:	616c      	str	r4, [r5, #20]
  405c30:	61ac      	str	r4, [r5, #24]
  405c32:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  405c36:	2208      	movs	r2, #8
  405c38:	f7fd fd86 	bl	403748 <memset>
  405c3c:	9b01      	ldr	r3, [sp, #4]
  405c3e:	61ed      	str	r5, [r5, #28]
  405c40:	f8c5 b020 	str.w	fp, [r5, #32]
  405c44:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  405c48:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  405c4c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  405c50:	63bb      	str	r3, [r7, #56]	; 0x38
  405c52:	b003      	add	sp, #12
  405c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c58:	00405b6d 	.word	0x00405b6d
  405c5c:	00403945 	.word	0x00403945
  405c60:	0040396d 	.word	0x0040396d
  405c64:	004039a5 	.word	0x004039a5
  405c68:	004039c5 	.word	0x004039c5

00405c6c <__sfp_lock_acquire>:
  405c6c:	4770      	bx	lr
  405c6e:	bf00      	nop

00405c70 <__sfp_lock_release>:
  405c70:	4770      	bx	lr
  405c72:	bf00      	nop

00405c74 <__libc_fini_array>:
  405c74:	b538      	push	{r3, r4, r5, lr}
  405c76:	4d09      	ldr	r5, [pc, #36]	; (405c9c <__libc_fini_array+0x28>)
  405c78:	4c09      	ldr	r4, [pc, #36]	; (405ca0 <__libc_fini_array+0x2c>)
  405c7a:	1b64      	subs	r4, r4, r5
  405c7c:	10a4      	asrs	r4, r4, #2
  405c7e:	bf18      	it	ne
  405c80:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  405c84:	d005      	beq.n	405c92 <__libc_fini_array+0x1e>
  405c86:	3c01      	subs	r4, #1
  405c88:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405c8c:	4798      	blx	r3
  405c8e:	2c00      	cmp	r4, #0
  405c90:	d1f9      	bne.n	405c86 <__libc_fini_array+0x12>
  405c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c96:	f007 bc3f 	b.w	40d518 <_fini>
  405c9a:	bf00      	nop
  405c9c:	0040d524 	.word	0x0040d524
  405ca0:	0040d528 	.word	0x0040d528

00405ca4 <_fputwc_r>:
  405ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ca8:	8993      	ldrh	r3, [r2, #12]
  405caa:	460f      	mov	r7, r1
  405cac:	0499      	lsls	r1, r3, #18
  405cae:	b082      	sub	sp, #8
  405cb0:	4614      	mov	r4, r2
  405cb2:	4680      	mov	r8, r0
  405cb4:	d406      	bmi.n	405cc4 <_fputwc_r+0x20>
  405cb6:	6e52      	ldr	r2, [r2, #100]	; 0x64
  405cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405cc0:	81a3      	strh	r3, [r4, #12]
  405cc2:	6662      	str	r2, [r4, #100]	; 0x64
  405cc4:	f000 fb2c 	bl	406320 <__locale_mb_cur_max>
  405cc8:	2801      	cmp	r0, #1
  405cca:	d03d      	beq.n	405d48 <_fputwc_r+0xa4>
  405ccc:	463a      	mov	r2, r7
  405cce:	4640      	mov	r0, r8
  405cd0:	a901      	add	r1, sp, #4
  405cd2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405cd6:	f003 fff5 	bl	409cc4 <_wcrtomb_r>
  405cda:	1c42      	adds	r2, r0, #1
  405cdc:	4606      	mov	r6, r0
  405cde:	d02c      	beq.n	405d3a <_fputwc_r+0x96>
  405ce0:	2800      	cmp	r0, #0
  405ce2:	d039      	beq.n	405d58 <_fputwc_r+0xb4>
  405ce4:	f89d 1004 	ldrb.w	r1, [sp, #4]
  405ce8:	2500      	movs	r5, #0
  405cea:	e009      	b.n	405d00 <_fputwc_r+0x5c>
  405cec:	6823      	ldr	r3, [r4, #0]
  405cee:	7019      	strb	r1, [r3, #0]
  405cf0:	6823      	ldr	r3, [r4, #0]
  405cf2:	3301      	adds	r3, #1
  405cf4:	6023      	str	r3, [r4, #0]
  405cf6:	3501      	adds	r5, #1
  405cf8:	42b5      	cmp	r5, r6
  405cfa:	d22d      	bcs.n	405d58 <_fputwc_r+0xb4>
  405cfc:	ab01      	add	r3, sp, #4
  405cfe:	5ce9      	ldrb	r1, [r5, r3]
  405d00:	68a3      	ldr	r3, [r4, #8]
  405d02:	3b01      	subs	r3, #1
  405d04:	2b00      	cmp	r3, #0
  405d06:	60a3      	str	r3, [r4, #8]
  405d08:	daf0      	bge.n	405cec <_fputwc_r+0x48>
  405d0a:	69a2      	ldr	r2, [r4, #24]
  405d0c:	4293      	cmp	r3, r2
  405d0e:	db05      	blt.n	405d1c <_fputwc_r+0x78>
  405d10:	6823      	ldr	r3, [r4, #0]
  405d12:	7019      	strb	r1, [r3, #0]
  405d14:	6823      	ldr	r3, [r4, #0]
  405d16:	7819      	ldrb	r1, [r3, #0]
  405d18:	290a      	cmp	r1, #10
  405d1a:	d1ea      	bne.n	405cf2 <_fputwc_r+0x4e>
  405d1c:	4640      	mov	r0, r8
  405d1e:	4622      	mov	r2, r4
  405d20:	f003 ff7c 	bl	409c1c <__swbuf_r>
  405d24:	f1b0 33ff 	subs.w	r3, r0, #4294967295
  405d28:	4258      	negs	r0, r3
  405d2a:	4158      	adcs	r0, r3
  405d2c:	2800      	cmp	r0, #0
  405d2e:	d0e2      	beq.n	405cf6 <_fputwc_r+0x52>
  405d30:	f04f 30ff 	mov.w	r0, #4294967295
  405d34:	b002      	add	sp, #8
  405d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d3a:	89a3      	ldrh	r3, [r4, #12]
  405d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405d40:	81a3      	strh	r3, [r4, #12]
  405d42:	b002      	add	sp, #8
  405d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d48:	1e7b      	subs	r3, r7, #1
  405d4a:	2bfe      	cmp	r3, #254	; 0xfe
  405d4c:	d8be      	bhi.n	405ccc <_fputwc_r+0x28>
  405d4e:	b2f9      	uxtb	r1, r7
  405d50:	4606      	mov	r6, r0
  405d52:	f88d 1004 	strb.w	r1, [sp, #4]
  405d56:	e7c7      	b.n	405ce8 <_fputwc_r+0x44>
  405d58:	4638      	mov	r0, r7
  405d5a:	b002      	add	sp, #8
  405d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405d60 <_malloc_trim_r>:
  405d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d62:	4d23      	ldr	r5, [pc, #140]	; (405df0 <_malloc_trim_r+0x90>)
  405d64:	460f      	mov	r7, r1
  405d66:	4604      	mov	r4, r0
  405d68:	f000 fef8 	bl	406b5c <__malloc_lock>
  405d6c:	68ab      	ldr	r3, [r5, #8]
  405d6e:	685e      	ldr	r6, [r3, #4]
  405d70:	f026 0603 	bic.w	r6, r6, #3
  405d74:	1bf1      	subs	r1, r6, r7
  405d76:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405d7a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405d7e:	f021 010f 	bic.w	r1, r1, #15
  405d82:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  405d86:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  405d8a:	db07      	blt.n	405d9c <_malloc_trim_r+0x3c>
  405d8c:	4620      	mov	r0, r4
  405d8e:	2100      	movs	r1, #0
  405d90:	f001 f90a 	bl	406fa8 <_sbrk_r>
  405d94:	68ab      	ldr	r3, [r5, #8]
  405d96:	4433      	add	r3, r6
  405d98:	4298      	cmp	r0, r3
  405d9a:	d004      	beq.n	405da6 <_malloc_trim_r+0x46>
  405d9c:	4620      	mov	r0, r4
  405d9e:	f000 fedf 	bl	406b60 <__malloc_unlock>
  405da2:	2000      	movs	r0, #0
  405da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405da6:	4620      	mov	r0, r4
  405da8:	4279      	negs	r1, r7
  405daa:	f001 f8fd 	bl	406fa8 <_sbrk_r>
  405dae:	3001      	adds	r0, #1
  405db0:	d00d      	beq.n	405dce <_malloc_trim_r+0x6e>
  405db2:	4b10      	ldr	r3, [pc, #64]	; (405df4 <_malloc_trim_r+0x94>)
  405db4:	68aa      	ldr	r2, [r5, #8]
  405db6:	6819      	ldr	r1, [r3, #0]
  405db8:	1bf6      	subs	r6, r6, r7
  405dba:	f046 0601 	orr.w	r6, r6, #1
  405dbe:	4620      	mov	r0, r4
  405dc0:	1bc9      	subs	r1, r1, r7
  405dc2:	6056      	str	r6, [r2, #4]
  405dc4:	6019      	str	r1, [r3, #0]
  405dc6:	f000 fecb 	bl	406b60 <__malloc_unlock>
  405dca:	2001      	movs	r0, #1
  405dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405dce:	4620      	mov	r0, r4
  405dd0:	2100      	movs	r1, #0
  405dd2:	f001 f8e9 	bl	406fa8 <_sbrk_r>
  405dd6:	68ab      	ldr	r3, [r5, #8]
  405dd8:	1ac2      	subs	r2, r0, r3
  405dda:	2a0f      	cmp	r2, #15
  405ddc:	ddde      	ble.n	405d9c <_malloc_trim_r+0x3c>
  405dde:	4d06      	ldr	r5, [pc, #24]	; (405df8 <_malloc_trim_r+0x98>)
  405de0:	4904      	ldr	r1, [pc, #16]	; (405df4 <_malloc_trim_r+0x94>)
  405de2:	682d      	ldr	r5, [r5, #0]
  405de4:	f042 0201 	orr.w	r2, r2, #1
  405de8:	1b40      	subs	r0, r0, r5
  405dea:	605a      	str	r2, [r3, #4]
  405dec:	6008      	str	r0, [r1, #0]
  405dee:	e7d5      	b.n	405d9c <_malloc_trim_r+0x3c>
  405df0:	2000057c 	.word	0x2000057c
  405df4:	20000be0 	.word	0x20000be0
  405df8:	20000988 	.word	0x20000988

00405dfc <_free_r>:
  405dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e00:	460d      	mov	r5, r1
  405e02:	4606      	mov	r6, r0
  405e04:	2900      	cmp	r1, #0
  405e06:	d055      	beq.n	405eb4 <_free_r+0xb8>
  405e08:	f000 fea8 	bl	406b5c <__malloc_lock>
  405e0c:	f855 1c04 	ldr.w	r1, [r5, #-4]
  405e10:	f8df c174 	ldr.w	ip, [pc, #372]	; 405f88 <_free_r+0x18c>
  405e14:	f021 0301 	bic.w	r3, r1, #1
  405e18:	f1a5 0408 	sub.w	r4, r5, #8
  405e1c:	18e2      	adds	r2, r4, r3
  405e1e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  405e22:	6857      	ldr	r7, [r2, #4]
  405e24:	4290      	cmp	r0, r2
  405e26:	f027 0703 	bic.w	r7, r7, #3
  405e2a:	d069      	beq.n	405f00 <_free_r+0x104>
  405e2c:	f011 0101 	ands.w	r1, r1, #1
  405e30:	6057      	str	r7, [r2, #4]
  405e32:	d032      	beq.n	405e9a <_free_r+0x9e>
  405e34:	2100      	movs	r1, #0
  405e36:	19d0      	adds	r0, r2, r7
  405e38:	6840      	ldr	r0, [r0, #4]
  405e3a:	07c0      	lsls	r0, r0, #31
  405e3c:	d406      	bmi.n	405e4c <_free_r+0x50>
  405e3e:	443b      	add	r3, r7
  405e40:	6890      	ldr	r0, [r2, #8]
  405e42:	2900      	cmp	r1, #0
  405e44:	d04e      	beq.n	405ee4 <_free_r+0xe8>
  405e46:	68d2      	ldr	r2, [r2, #12]
  405e48:	60c2      	str	r2, [r0, #12]
  405e4a:	6090      	str	r0, [r2, #8]
  405e4c:	f043 0201 	orr.w	r2, r3, #1
  405e50:	6062      	str	r2, [r4, #4]
  405e52:	50e3      	str	r3, [r4, r3]
  405e54:	b9e1      	cbnz	r1, 405e90 <_free_r+0x94>
  405e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e5a:	d32d      	bcc.n	405eb8 <_free_r+0xbc>
  405e5c:	0a5a      	lsrs	r2, r3, #9
  405e5e:	2a04      	cmp	r2, #4
  405e60:	d86a      	bhi.n	405f38 <_free_r+0x13c>
  405e62:	0998      	lsrs	r0, r3, #6
  405e64:	3038      	adds	r0, #56	; 0x38
  405e66:	0041      	lsls	r1, r0, #1
  405e68:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  405e6c:	4946      	ldr	r1, [pc, #280]	; (405f88 <_free_r+0x18c>)
  405e6e:	f8dc 2008 	ldr.w	r2, [ip, #8]
  405e72:	4562      	cmp	r2, ip
  405e74:	d066      	beq.n	405f44 <_free_r+0x148>
  405e76:	6851      	ldr	r1, [r2, #4]
  405e78:	f021 0103 	bic.w	r1, r1, #3
  405e7c:	428b      	cmp	r3, r1
  405e7e:	d202      	bcs.n	405e86 <_free_r+0x8a>
  405e80:	6892      	ldr	r2, [r2, #8]
  405e82:	4594      	cmp	ip, r2
  405e84:	d1f7      	bne.n	405e76 <_free_r+0x7a>
  405e86:	68d3      	ldr	r3, [r2, #12]
  405e88:	60e3      	str	r3, [r4, #12]
  405e8a:	60a2      	str	r2, [r4, #8]
  405e8c:	609c      	str	r4, [r3, #8]
  405e8e:	60d4      	str	r4, [r2, #12]
  405e90:	4630      	mov	r0, r6
  405e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405e96:	f000 be63 	b.w	406b60 <__malloc_unlock>
  405e9a:	f855 5c08 	ldr.w	r5, [r5, #-8]
  405e9e:	1b64      	subs	r4, r4, r5
  405ea0:	f10c 0808 	add.w	r8, ip, #8
  405ea4:	68a0      	ldr	r0, [r4, #8]
  405ea6:	4540      	cmp	r0, r8
  405ea8:	442b      	add	r3, r5
  405eaa:	d043      	beq.n	405f34 <_free_r+0x138>
  405eac:	68e5      	ldr	r5, [r4, #12]
  405eae:	60c5      	str	r5, [r0, #12]
  405eb0:	60a8      	str	r0, [r5, #8]
  405eb2:	e7c0      	b.n	405e36 <_free_r+0x3a>
  405eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405eb8:	08db      	lsrs	r3, r3, #3
  405eba:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  405ebe:	2501      	movs	r5, #1
  405ec0:	f8dc 0004 	ldr.w	r0, [ip, #4]
  405ec4:	6891      	ldr	r1, [r2, #8]
  405ec6:	60a1      	str	r1, [r4, #8]
  405ec8:	109b      	asrs	r3, r3, #2
  405eca:	fa05 f303 	lsl.w	r3, r5, r3
  405ece:	4318      	orrs	r0, r3
  405ed0:	60e2      	str	r2, [r4, #12]
  405ed2:	f8cc 0004 	str.w	r0, [ip, #4]
  405ed6:	6094      	str	r4, [r2, #8]
  405ed8:	4630      	mov	r0, r6
  405eda:	60cc      	str	r4, [r1, #12]
  405edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ee0:	f000 be3e 	b.w	406b60 <__malloc_unlock>
  405ee4:	4d29      	ldr	r5, [pc, #164]	; (405f8c <_free_r+0x190>)
  405ee6:	42a8      	cmp	r0, r5
  405ee8:	d1ad      	bne.n	405e46 <_free_r+0x4a>
  405eea:	f043 0201 	orr.w	r2, r3, #1
  405eee:	f8cc 4014 	str.w	r4, [ip, #20]
  405ef2:	f8cc 4010 	str.w	r4, [ip, #16]
  405ef6:	60e0      	str	r0, [r4, #12]
  405ef8:	60a0      	str	r0, [r4, #8]
  405efa:	6062      	str	r2, [r4, #4]
  405efc:	50e3      	str	r3, [r4, r3]
  405efe:	e7c7      	b.n	405e90 <_free_r+0x94>
  405f00:	441f      	add	r7, r3
  405f02:	07cb      	lsls	r3, r1, #31
  405f04:	d407      	bmi.n	405f16 <_free_r+0x11a>
  405f06:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405f0a:	1ae4      	subs	r4, r4, r3
  405f0c:	441f      	add	r7, r3
  405f0e:	68a2      	ldr	r2, [r4, #8]
  405f10:	68e3      	ldr	r3, [r4, #12]
  405f12:	60d3      	str	r3, [r2, #12]
  405f14:	609a      	str	r2, [r3, #8]
  405f16:	4b1e      	ldr	r3, [pc, #120]	; (405f90 <_free_r+0x194>)
  405f18:	681b      	ldr	r3, [r3, #0]
  405f1a:	f047 0201 	orr.w	r2, r7, #1
  405f1e:	429f      	cmp	r7, r3
  405f20:	6062      	str	r2, [r4, #4]
  405f22:	f8cc 4008 	str.w	r4, [ip, #8]
  405f26:	d3b3      	bcc.n	405e90 <_free_r+0x94>
  405f28:	4b1a      	ldr	r3, [pc, #104]	; (405f94 <_free_r+0x198>)
  405f2a:	4630      	mov	r0, r6
  405f2c:	6819      	ldr	r1, [r3, #0]
  405f2e:	f7ff ff17 	bl	405d60 <_malloc_trim_r>
  405f32:	e7ad      	b.n	405e90 <_free_r+0x94>
  405f34:	2101      	movs	r1, #1
  405f36:	e77e      	b.n	405e36 <_free_r+0x3a>
  405f38:	2a14      	cmp	r2, #20
  405f3a:	d80c      	bhi.n	405f56 <_free_r+0x15a>
  405f3c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  405f40:	0041      	lsls	r1, r0, #1
  405f42:	e791      	b.n	405e68 <_free_r+0x6c>
  405f44:	684b      	ldr	r3, [r1, #4]
  405f46:	1080      	asrs	r0, r0, #2
  405f48:	2501      	movs	r5, #1
  405f4a:	fa05 f000 	lsl.w	r0, r5, r0
  405f4e:	4303      	orrs	r3, r0
  405f50:	604b      	str	r3, [r1, #4]
  405f52:	4613      	mov	r3, r2
  405f54:	e798      	b.n	405e88 <_free_r+0x8c>
  405f56:	2a54      	cmp	r2, #84	; 0x54
  405f58:	d803      	bhi.n	405f62 <_free_r+0x166>
  405f5a:	0b18      	lsrs	r0, r3, #12
  405f5c:	306e      	adds	r0, #110	; 0x6e
  405f5e:	0041      	lsls	r1, r0, #1
  405f60:	e782      	b.n	405e68 <_free_r+0x6c>
  405f62:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405f66:	d803      	bhi.n	405f70 <_free_r+0x174>
  405f68:	0bd8      	lsrs	r0, r3, #15
  405f6a:	3077      	adds	r0, #119	; 0x77
  405f6c:	0041      	lsls	r1, r0, #1
  405f6e:	e77b      	b.n	405e68 <_free_r+0x6c>
  405f70:	f240 5154 	movw	r1, #1364	; 0x554
  405f74:	428a      	cmp	r2, r1
  405f76:	d803      	bhi.n	405f80 <_free_r+0x184>
  405f78:	0c98      	lsrs	r0, r3, #18
  405f7a:	307c      	adds	r0, #124	; 0x7c
  405f7c:	0041      	lsls	r1, r0, #1
  405f7e:	e773      	b.n	405e68 <_free_r+0x6c>
  405f80:	21fc      	movs	r1, #252	; 0xfc
  405f82:	207e      	movs	r0, #126	; 0x7e
  405f84:	e770      	b.n	405e68 <_free_r+0x6c>
  405f86:	bf00      	nop
  405f88:	2000057c 	.word	0x2000057c
  405f8c:	20000584 	.word	0x20000584
  405f90:	20000984 	.word	0x20000984
  405f94:	20000bdc 	.word	0x20000bdc

00405f98 <__sfvwrite_r>:
  405f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405f9c:	6893      	ldr	r3, [r2, #8]
  405f9e:	b083      	sub	sp, #12
  405fa0:	4616      	mov	r6, r2
  405fa2:	4681      	mov	r9, r0
  405fa4:	460c      	mov	r4, r1
  405fa6:	b32b      	cbz	r3, 405ff4 <__sfvwrite_r+0x5c>
  405fa8:	898b      	ldrh	r3, [r1, #12]
  405faa:	0719      	lsls	r1, r3, #28
  405fac:	d526      	bpl.n	405ffc <__sfvwrite_r+0x64>
  405fae:	6922      	ldr	r2, [r4, #16]
  405fb0:	b322      	cbz	r2, 405ffc <__sfvwrite_r+0x64>
  405fb2:	f003 0202 	and.w	r2, r3, #2
  405fb6:	b292      	uxth	r2, r2
  405fb8:	6835      	ldr	r5, [r6, #0]
  405fba:	2a00      	cmp	r2, #0
  405fbc:	d02c      	beq.n	406018 <__sfvwrite_r+0x80>
  405fbe:	f04f 0a00 	mov.w	sl, #0
  405fc2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 4062ac <__sfvwrite_r+0x314>
  405fc6:	46d0      	mov	r8, sl
  405fc8:	45d8      	cmp	r8, fp
  405fca:	bf34      	ite	cc
  405fcc:	4643      	movcc	r3, r8
  405fce:	465b      	movcs	r3, fp
  405fd0:	4652      	mov	r2, sl
  405fd2:	4648      	mov	r0, r9
  405fd4:	f1b8 0f00 	cmp.w	r8, #0
  405fd8:	d04f      	beq.n	40607a <__sfvwrite_r+0xe2>
  405fda:	69e1      	ldr	r1, [r4, #28]
  405fdc:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405fde:	47b8      	blx	r7
  405fe0:	2800      	cmp	r0, #0
  405fe2:	dd56      	ble.n	406092 <__sfvwrite_r+0xfa>
  405fe4:	68b3      	ldr	r3, [r6, #8]
  405fe6:	1a1b      	subs	r3, r3, r0
  405fe8:	4482      	add	sl, r0
  405fea:	ebc0 0808 	rsb	r8, r0, r8
  405fee:	60b3      	str	r3, [r6, #8]
  405ff0:	2b00      	cmp	r3, #0
  405ff2:	d1e9      	bne.n	405fc8 <__sfvwrite_r+0x30>
  405ff4:	2000      	movs	r0, #0
  405ff6:	b003      	add	sp, #12
  405ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ffc:	4648      	mov	r0, r9
  405ffe:	4621      	mov	r1, r4
  406000:	f7ff fc70 	bl	4058e4 <__swsetup_r>
  406004:	2800      	cmp	r0, #0
  406006:	f040 8148 	bne.w	40629a <__sfvwrite_r+0x302>
  40600a:	89a3      	ldrh	r3, [r4, #12]
  40600c:	6835      	ldr	r5, [r6, #0]
  40600e:	f003 0202 	and.w	r2, r3, #2
  406012:	b292      	uxth	r2, r2
  406014:	2a00      	cmp	r2, #0
  406016:	d1d2      	bne.n	405fbe <__sfvwrite_r+0x26>
  406018:	f013 0a01 	ands.w	sl, r3, #1
  40601c:	d142      	bne.n	4060a4 <__sfvwrite_r+0x10c>
  40601e:	46d0      	mov	r8, sl
  406020:	f1b8 0f00 	cmp.w	r8, #0
  406024:	d023      	beq.n	40606e <__sfvwrite_r+0xd6>
  406026:	059a      	lsls	r2, r3, #22
  406028:	68a7      	ldr	r7, [r4, #8]
  40602a:	d576      	bpl.n	40611a <__sfvwrite_r+0x182>
  40602c:	45b8      	cmp	r8, r7
  40602e:	f0c0 80a4 	bcc.w	40617a <__sfvwrite_r+0x1e2>
  406032:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406036:	f040 80b2 	bne.w	40619e <__sfvwrite_r+0x206>
  40603a:	6820      	ldr	r0, [r4, #0]
  40603c:	46bb      	mov	fp, r7
  40603e:	4651      	mov	r1, sl
  406040:	465a      	mov	r2, fp
  406042:	f000 fd2b 	bl	406a9c <memmove>
  406046:	68a2      	ldr	r2, [r4, #8]
  406048:	6821      	ldr	r1, [r4, #0]
  40604a:	1bd2      	subs	r2, r2, r7
  40604c:	eb01 030b 	add.w	r3, r1, fp
  406050:	60a2      	str	r2, [r4, #8]
  406052:	6023      	str	r3, [r4, #0]
  406054:	4642      	mov	r2, r8
  406056:	68b3      	ldr	r3, [r6, #8]
  406058:	1a9b      	subs	r3, r3, r2
  40605a:	4492      	add	sl, r2
  40605c:	ebc2 0808 	rsb	r8, r2, r8
  406060:	60b3      	str	r3, [r6, #8]
  406062:	2b00      	cmp	r3, #0
  406064:	d0c6      	beq.n	405ff4 <__sfvwrite_r+0x5c>
  406066:	89a3      	ldrh	r3, [r4, #12]
  406068:	f1b8 0f00 	cmp.w	r8, #0
  40606c:	d1db      	bne.n	406026 <__sfvwrite_r+0x8e>
  40606e:	f8d5 a000 	ldr.w	sl, [r5]
  406072:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406076:	3508      	adds	r5, #8
  406078:	e7d2      	b.n	406020 <__sfvwrite_r+0x88>
  40607a:	f8d5 a000 	ldr.w	sl, [r5]
  40607e:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406082:	3508      	adds	r5, #8
  406084:	e7a0      	b.n	405fc8 <__sfvwrite_r+0x30>
  406086:	4648      	mov	r0, r9
  406088:	4621      	mov	r1, r4
  40608a:	f7ff fd59 	bl	405b40 <_fflush_r>
  40608e:	2800      	cmp	r0, #0
  406090:	d059      	beq.n	406146 <__sfvwrite_r+0x1ae>
  406092:	89a3      	ldrh	r3, [r4, #12]
  406094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406098:	f04f 30ff 	mov.w	r0, #4294967295
  40609c:	81a3      	strh	r3, [r4, #12]
  40609e:	b003      	add	sp, #12
  4060a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060a4:	4692      	mov	sl, r2
  4060a6:	9201      	str	r2, [sp, #4]
  4060a8:	4693      	mov	fp, r2
  4060aa:	4690      	mov	r8, r2
  4060ac:	f1b8 0f00 	cmp.w	r8, #0
  4060b0:	d02b      	beq.n	40610a <__sfvwrite_r+0x172>
  4060b2:	9f01      	ldr	r7, [sp, #4]
  4060b4:	2f00      	cmp	r7, #0
  4060b6:	d064      	beq.n	406182 <__sfvwrite_r+0x1ea>
  4060b8:	6820      	ldr	r0, [r4, #0]
  4060ba:	6921      	ldr	r1, [r4, #16]
  4060bc:	f8d4 c008 	ldr.w	ip, [r4, #8]
  4060c0:	6962      	ldr	r2, [r4, #20]
  4060c2:	45c2      	cmp	sl, r8
  4060c4:	bf34      	ite	cc
  4060c6:	4653      	movcc	r3, sl
  4060c8:	4643      	movcs	r3, r8
  4060ca:	4288      	cmp	r0, r1
  4060cc:	461f      	mov	r7, r3
  4060ce:	d903      	bls.n	4060d8 <__sfvwrite_r+0x140>
  4060d0:	4494      	add	ip, r2
  4060d2:	4563      	cmp	r3, ip
  4060d4:	f300 80ae 	bgt.w	406234 <__sfvwrite_r+0x29c>
  4060d8:	4293      	cmp	r3, r2
  4060da:	db36      	blt.n	40614a <__sfvwrite_r+0x1b2>
  4060dc:	4613      	mov	r3, r2
  4060de:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4060e0:	69e1      	ldr	r1, [r4, #28]
  4060e2:	4648      	mov	r0, r9
  4060e4:	465a      	mov	r2, fp
  4060e6:	47b8      	blx	r7
  4060e8:	1e07      	subs	r7, r0, #0
  4060ea:	ddd2      	ble.n	406092 <__sfvwrite_r+0xfa>
  4060ec:	ebba 0a07 	subs.w	sl, sl, r7
  4060f0:	d03a      	beq.n	406168 <__sfvwrite_r+0x1d0>
  4060f2:	68b3      	ldr	r3, [r6, #8]
  4060f4:	1bdb      	subs	r3, r3, r7
  4060f6:	44bb      	add	fp, r7
  4060f8:	ebc7 0808 	rsb	r8, r7, r8
  4060fc:	60b3      	str	r3, [r6, #8]
  4060fe:	2b00      	cmp	r3, #0
  406100:	f43f af78 	beq.w	405ff4 <__sfvwrite_r+0x5c>
  406104:	f1b8 0f00 	cmp.w	r8, #0
  406108:	d1d3      	bne.n	4060b2 <__sfvwrite_r+0x11a>
  40610a:	2700      	movs	r7, #0
  40610c:	f8d5 b000 	ldr.w	fp, [r5]
  406110:	f8d5 8004 	ldr.w	r8, [r5, #4]
  406114:	9701      	str	r7, [sp, #4]
  406116:	3508      	adds	r5, #8
  406118:	e7c8      	b.n	4060ac <__sfvwrite_r+0x114>
  40611a:	6820      	ldr	r0, [r4, #0]
  40611c:	6923      	ldr	r3, [r4, #16]
  40611e:	4298      	cmp	r0, r3
  406120:	d802      	bhi.n	406128 <__sfvwrite_r+0x190>
  406122:	6963      	ldr	r3, [r4, #20]
  406124:	4598      	cmp	r8, r3
  406126:	d272      	bcs.n	40620e <__sfvwrite_r+0x276>
  406128:	45b8      	cmp	r8, r7
  40612a:	bf38      	it	cc
  40612c:	4647      	movcc	r7, r8
  40612e:	463a      	mov	r2, r7
  406130:	4651      	mov	r1, sl
  406132:	f000 fcb3 	bl	406a9c <memmove>
  406136:	68a3      	ldr	r3, [r4, #8]
  406138:	6822      	ldr	r2, [r4, #0]
  40613a:	1bdb      	subs	r3, r3, r7
  40613c:	443a      	add	r2, r7
  40613e:	60a3      	str	r3, [r4, #8]
  406140:	6022      	str	r2, [r4, #0]
  406142:	2b00      	cmp	r3, #0
  406144:	d09f      	beq.n	406086 <__sfvwrite_r+0xee>
  406146:	463a      	mov	r2, r7
  406148:	e785      	b.n	406056 <__sfvwrite_r+0xbe>
  40614a:	461a      	mov	r2, r3
  40614c:	4659      	mov	r1, fp
  40614e:	9300      	str	r3, [sp, #0]
  406150:	f000 fca4 	bl	406a9c <memmove>
  406154:	9b00      	ldr	r3, [sp, #0]
  406156:	68a1      	ldr	r1, [r4, #8]
  406158:	6822      	ldr	r2, [r4, #0]
  40615a:	1ac9      	subs	r1, r1, r3
  40615c:	ebba 0a07 	subs.w	sl, sl, r7
  406160:	4413      	add	r3, r2
  406162:	60a1      	str	r1, [r4, #8]
  406164:	6023      	str	r3, [r4, #0]
  406166:	d1c4      	bne.n	4060f2 <__sfvwrite_r+0x15a>
  406168:	4648      	mov	r0, r9
  40616a:	4621      	mov	r1, r4
  40616c:	f7ff fce8 	bl	405b40 <_fflush_r>
  406170:	2800      	cmp	r0, #0
  406172:	d18e      	bne.n	406092 <__sfvwrite_r+0xfa>
  406174:	f8cd a004 	str.w	sl, [sp, #4]
  406178:	e7bb      	b.n	4060f2 <__sfvwrite_r+0x15a>
  40617a:	6820      	ldr	r0, [r4, #0]
  40617c:	4647      	mov	r7, r8
  40617e:	46c3      	mov	fp, r8
  406180:	e75d      	b.n	40603e <__sfvwrite_r+0xa6>
  406182:	4658      	mov	r0, fp
  406184:	210a      	movs	r1, #10
  406186:	4642      	mov	r2, r8
  406188:	f000 fc40 	bl	406a0c <memchr>
  40618c:	2800      	cmp	r0, #0
  40618e:	d07f      	beq.n	406290 <__sfvwrite_r+0x2f8>
  406190:	f100 0a01 	add.w	sl, r0, #1
  406194:	2701      	movs	r7, #1
  406196:	ebcb 0a0a 	rsb	sl, fp, sl
  40619a:	9701      	str	r7, [sp, #4]
  40619c:	e78c      	b.n	4060b8 <__sfvwrite_r+0x120>
  40619e:	6822      	ldr	r2, [r4, #0]
  4061a0:	6921      	ldr	r1, [r4, #16]
  4061a2:	6967      	ldr	r7, [r4, #20]
  4061a4:	ebc1 0c02 	rsb	ip, r1, r2
  4061a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4061ac:	f10c 0201 	add.w	r2, ip, #1
  4061b0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4061b4:	4442      	add	r2, r8
  4061b6:	107f      	asrs	r7, r7, #1
  4061b8:	4297      	cmp	r7, r2
  4061ba:	bf34      	ite	cc
  4061bc:	4617      	movcc	r7, r2
  4061be:	463a      	movcs	r2, r7
  4061c0:	055b      	lsls	r3, r3, #21
  4061c2:	d54f      	bpl.n	406264 <__sfvwrite_r+0x2cc>
  4061c4:	4611      	mov	r1, r2
  4061c6:	4648      	mov	r0, r9
  4061c8:	f8cd c000 	str.w	ip, [sp]
  4061cc:	f000 f93e 	bl	40644c <_malloc_r>
  4061d0:	f8dd c000 	ldr.w	ip, [sp]
  4061d4:	4683      	mov	fp, r0
  4061d6:	2800      	cmp	r0, #0
  4061d8:	d062      	beq.n	4062a0 <__sfvwrite_r+0x308>
  4061da:	4662      	mov	r2, ip
  4061dc:	6921      	ldr	r1, [r4, #16]
  4061de:	f8cd c000 	str.w	ip, [sp]
  4061e2:	f7fd fa17 	bl	403614 <memcpy>
  4061e6:	89a2      	ldrh	r2, [r4, #12]
  4061e8:	f8dd c000 	ldr.w	ip, [sp]
  4061ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4061f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4061f4:	81a2      	strh	r2, [r4, #12]
  4061f6:	eb0b 000c 	add.w	r0, fp, ip
  4061fa:	ebcc 0207 	rsb	r2, ip, r7
  4061fe:	f8c4 b010 	str.w	fp, [r4, #16]
  406202:	6167      	str	r7, [r4, #20]
  406204:	6020      	str	r0, [r4, #0]
  406206:	60a2      	str	r2, [r4, #8]
  406208:	4647      	mov	r7, r8
  40620a:	46c3      	mov	fp, r8
  40620c:	e717      	b.n	40603e <__sfvwrite_r+0xa6>
  40620e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  406212:	4590      	cmp	r8, r2
  406214:	bf38      	it	cc
  406216:	4642      	movcc	r2, r8
  406218:	fb92 f2f3 	sdiv	r2, r2, r3
  40621c:	fb02 f303 	mul.w	r3, r2, r3
  406220:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406222:	69e1      	ldr	r1, [r4, #28]
  406224:	4648      	mov	r0, r9
  406226:	4652      	mov	r2, sl
  406228:	47b8      	blx	r7
  40622a:	2800      	cmp	r0, #0
  40622c:	f77f af31 	ble.w	406092 <__sfvwrite_r+0xfa>
  406230:	4602      	mov	r2, r0
  406232:	e710      	b.n	406056 <__sfvwrite_r+0xbe>
  406234:	4662      	mov	r2, ip
  406236:	4659      	mov	r1, fp
  406238:	f8cd c000 	str.w	ip, [sp]
  40623c:	f000 fc2e 	bl	406a9c <memmove>
  406240:	f8dd c000 	ldr.w	ip, [sp]
  406244:	6823      	ldr	r3, [r4, #0]
  406246:	4463      	add	r3, ip
  406248:	6023      	str	r3, [r4, #0]
  40624a:	4648      	mov	r0, r9
  40624c:	4621      	mov	r1, r4
  40624e:	f8cd c000 	str.w	ip, [sp]
  406252:	f7ff fc75 	bl	405b40 <_fflush_r>
  406256:	f8dd c000 	ldr.w	ip, [sp]
  40625a:	2800      	cmp	r0, #0
  40625c:	f47f af19 	bne.w	406092 <__sfvwrite_r+0xfa>
  406260:	4667      	mov	r7, ip
  406262:	e743      	b.n	4060ec <__sfvwrite_r+0x154>
  406264:	4648      	mov	r0, r9
  406266:	f8cd c000 	str.w	ip, [sp]
  40626a:	f000 fc8f 	bl	406b8c <_realloc_r>
  40626e:	f8dd c000 	ldr.w	ip, [sp]
  406272:	4683      	mov	fp, r0
  406274:	2800      	cmp	r0, #0
  406276:	d1be      	bne.n	4061f6 <__sfvwrite_r+0x25e>
  406278:	4648      	mov	r0, r9
  40627a:	6921      	ldr	r1, [r4, #16]
  40627c:	f7ff fdbe 	bl	405dfc <_free_r>
  406280:	89a3      	ldrh	r3, [r4, #12]
  406282:	220c      	movs	r2, #12
  406284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406288:	b29b      	uxth	r3, r3
  40628a:	f8c9 2000 	str.w	r2, [r9]
  40628e:	e701      	b.n	406094 <__sfvwrite_r+0xfc>
  406290:	2701      	movs	r7, #1
  406292:	f108 0a01 	add.w	sl, r8, #1
  406296:	9701      	str	r7, [sp, #4]
  406298:	e70e      	b.n	4060b8 <__sfvwrite_r+0x120>
  40629a:	f04f 30ff 	mov.w	r0, #4294967295
  40629e:	e6aa      	b.n	405ff6 <__sfvwrite_r+0x5e>
  4062a0:	230c      	movs	r3, #12
  4062a2:	f8c9 3000 	str.w	r3, [r9]
  4062a6:	89a3      	ldrh	r3, [r4, #12]
  4062a8:	e6f4      	b.n	406094 <__sfvwrite_r+0xfc>
  4062aa:	bf00      	nop
  4062ac:	7ffffc00 	.word	0x7ffffc00

004062b0 <_fwalk>:
  4062b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4062b4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4062b8:	4688      	mov	r8, r1
  4062ba:	d01a      	beq.n	4062f2 <_fwalk+0x42>
  4062bc:	2600      	movs	r6, #0
  4062be:	687d      	ldr	r5, [r7, #4]
  4062c0:	68bc      	ldr	r4, [r7, #8]
  4062c2:	3d01      	subs	r5, #1
  4062c4:	d40f      	bmi.n	4062e6 <_fwalk+0x36>
  4062c6:	89a3      	ldrh	r3, [r4, #12]
  4062c8:	2b01      	cmp	r3, #1
  4062ca:	f105 35ff 	add.w	r5, r5, #4294967295
  4062ce:	d906      	bls.n	4062de <_fwalk+0x2e>
  4062d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4062d4:	3301      	adds	r3, #1
  4062d6:	4620      	mov	r0, r4
  4062d8:	d001      	beq.n	4062de <_fwalk+0x2e>
  4062da:	47c0      	blx	r8
  4062dc:	4306      	orrs	r6, r0
  4062de:	1c6b      	adds	r3, r5, #1
  4062e0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4062e4:	d1ef      	bne.n	4062c6 <_fwalk+0x16>
  4062e6:	683f      	ldr	r7, [r7, #0]
  4062e8:	2f00      	cmp	r7, #0
  4062ea:	d1e8      	bne.n	4062be <_fwalk+0xe>
  4062ec:	4630      	mov	r0, r6
  4062ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062f2:	463e      	mov	r6, r7
  4062f4:	4630      	mov	r0, r6
  4062f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4062fa:	bf00      	nop

004062fc <iswspace>:
  4062fc:	28ff      	cmp	r0, #255	; 0xff
  4062fe:	d807      	bhi.n	406310 <iswspace+0x14>
  406300:	4b04      	ldr	r3, [pc, #16]	; (406314 <iswspace+0x18>)
  406302:	681b      	ldr	r3, [r3, #0]
  406304:	4418      	add	r0, r3
  406306:	7840      	ldrb	r0, [r0, #1]
  406308:	f000 0008 	and.w	r0, r0, #8
  40630c:	b2c0      	uxtb	r0, r0
  40630e:	4770      	bx	lr
  406310:	2000      	movs	r0, #0
  406312:	4770      	bx	lr
  406314:	2000051c 	.word	0x2000051c

00406318 <__locale_charset>:
  406318:	4800      	ldr	r0, [pc, #0]	; (40631c <__locale_charset+0x4>)
  40631a:	4770      	bx	lr
  40631c:	20000558 	.word	0x20000558

00406320 <__locale_mb_cur_max>:
  406320:	4b01      	ldr	r3, [pc, #4]	; (406328 <__locale_mb_cur_max+0x8>)
  406322:	6818      	ldr	r0, [r3, #0]
  406324:	4770      	bx	lr
  406326:	bf00      	nop
  406328:	20000578 	.word	0x20000578

0040632c <_localeconv_r>:
  40632c:	4800      	ldr	r0, [pc, #0]	; (406330 <_localeconv_r+0x4>)
  40632e:	4770      	bx	lr
  406330:	20000520 	.word	0x20000520

00406334 <_lseek_r>:
  406334:	b570      	push	{r4, r5, r6, lr}
  406336:	4c08      	ldr	r4, [pc, #32]	; (406358 <_lseek_r+0x24>)
  406338:	4606      	mov	r6, r0
  40633a:	2500      	movs	r5, #0
  40633c:	4608      	mov	r0, r1
  40633e:	4611      	mov	r1, r2
  406340:	461a      	mov	r2, r3
  406342:	6025      	str	r5, [r4, #0]
  406344:	f7fc fefe 	bl	403144 <_lseek>
  406348:	1c43      	adds	r3, r0, #1
  40634a:	d000      	beq.n	40634e <_lseek_r+0x1a>
  40634c:	bd70      	pop	{r4, r5, r6, pc}
  40634e:	6823      	ldr	r3, [r4, #0]
  406350:	2b00      	cmp	r3, #0
  406352:	d0fb      	beq.n	40634c <_lseek_r+0x18>
  406354:	6033      	str	r3, [r6, #0]
  406356:	bd70      	pop	{r4, r5, r6, pc}
  406358:	2000c7bc 	.word	0x2000c7bc

0040635c <__smakebuf_r>:
  40635c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40635e:	898b      	ldrh	r3, [r1, #12]
  406360:	b29a      	uxth	r2, r3
  406362:	0796      	lsls	r6, r2, #30
  406364:	b091      	sub	sp, #68	; 0x44
  406366:	460c      	mov	r4, r1
  406368:	4605      	mov	r5, r0
  40636a:	d437      	bmi.n	4063dc <__smakebuf_r+0x80>
  40636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406370:	2900      	cmp	r1, #0
  406372:	db17      	blt.n	4063a4 <__smakebuf_r+0x48>
  406374:	aa01      	add	r2, sp, #4
  406376:	f004 fd2b 	bl	40add0 <_fstat_r>
  40637a:	2800      	cmp	r0, #0
  40637c:	db10      	blt.n	4063a0 <__smakebuf_r+0x44>
  40637e:	9b02      	ldr	r3, [sp, #8]
  406380:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  406384:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  406388:	424f      	negs	r7, r1
  40638a:	414f      	adcs	r7, r1
  40638c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  406390:	d02c      	beq.n	4063ec <__smakebuf_r+0x90>
  406392:	89a3      	ldrh	r3, [r4, #12]
  406394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  406398:	81a3      	strh	r3, [r4, #12]
  40639a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40639e:	e00b      	b.n	4063b8 <__smakebuf_r+0x5c>
  4063a0:	89a3      	ldrh	r3, [r4, #12]
  4063a2:	b29a      	uxth	r2, r3
  4063a4:	f012 0f80 	tst.w	r2, #128	; 0x80
  4063a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4063ac:	81a3      	strh	r3, [r4, #12]
  4063ae:	bf14      	ite	ne
  4063b0:	2640      	movne	r6, #64	; 0x40
  4063b2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  4063b6:	2700      	movs	r7, #0
  4063b8:	4628      	mov	r0, r5
  4063ba:	4631      	mov	r1, r6
  4063bc:	f000 f846 	bl	40644c <_malloc_r>
  4063c0:	89a3      	ldrh	r3, [r4, #12]
  4063c2:	2800      	cmp	r0, #0
  4063c4:	d029      	beq.n	40641a <__smakebuf_r+0xbe>
  4063c6:	4a1b      	ldr	r2, [pc, #108]	; (406434 <__smakebuf_r+0xd8>)
  4063c8:	63ea      	str	r2, [r5, #60]	; 0x3c
  4063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4063ce:	81a3      	strh	r3, [r4, #12]
  4063d0:	6020      	str	r0, [r4, #0]
  4063d2:	6120      	str	r0, [r4, #16]
  4063d4:	6166      	str	r6, [r4, #20]
  4063d6:	b9a7      	cbnz	r7, 406402 <__smakebuf_r+0xa6>
  4063d8:	b011      	add	sp, #68	; 0x44
  4063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063dc:	f101 0343 	add.w	r3, r1, #67	; 0x43
  4063e0:	2201      	movs	r2, #1
  4063e2:	600b      	str	r3, [r1, #0]
  4063e4:	610b      	str	r3, [r1, #16]
  4063e6:	614a      	str	r2, [r1, #20]
  4063e8:	b011      	add	sp, #68	; 0x44
  4063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4063ec:	4a12      	ldr	r2, [pc, #72]	; (406438 <__smakebuf_r+0xdc>)
  4063ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4063f0:	4293      	cmp	r3, r2
  4063f2:	d1ce      	bne.n	406392 <__smakebuf_r+0x36>
  4063f4:	89a3      	ldrh	r3, [r4, #12]
  4063f6:	f44f 6680 	mov.w	r6, #1024	; 0x400
  4063fa:	4333      	orrs	r3, r6
  4063fc:	81a3      	strh	r3, [r4, #12]
  4063fe:	64e6      	str	r6, [r4, #76]	; 0x4c
  406400:	e7da      	b.n	4063b8 <__smakebuf_r+0x5c>
  406402:	4628      	mov	r0, r5
  406404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406408:	f005 f8a8 	bl	40b55c <_isatty_r>
  40640c:	2800      	cmp	r0, #0
  40640e:	d0e3      	beq.n	4063d8 <__smakebuf_r+0x7c>
  406410:	89a3      	ldrh	r3, [r4, #12]
  406412:	f043 0301 	orr.w	r3, r3, #1
  406416:	81a3      	strh	r3, [r4, #12]
  406418:	e7de      	b.n	4063d8 <__smakebuf_r+0x7c>
  40641a:	059a      	lsls	r2, r3, #22
  40641c:	d4dc      	bmi.n	4063d8 <__smakebuf_r+0x7c>
  40641e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406422:	f043 0302 	orr.w	r3, r3, #2
  406426:	2101      	movs	r1, #1
  406428:	81a3      	strh	r3, [r4, #12]
  40642a:	6022      	str	r2, [r4, #0]
  40642c:	6122      	str	r2, [r4, #16]
  40642e:	6161      	str	r1, [r4, #20]
  406430:	e7d2      	b.n	4063d8 <__smakebuf_r+0x7c>
  406432:	bf00      	nop
  406434:	00405b6d 	.word	0x00405b6d
  406438:	004039a5 	.word	0x004039a5

0040643c <malloc>:
  40643c:	4b02      	ldr	r3, [pc, #8]	; (406448 <malloc+0xc>)
  40643e:	4601      	mov	r1, r0
  406440:	6818      	ldr	r0, [r3, #0]
  406442:	f000 b803 	b.w	40644c <_malloc_r>
  406446:	bf00      	nop
  406448:	20000518 	.word	0x20000518

0040644c <_malloc_r>:
  40644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406450:	f101 050b 	add.w	r5, r1, #11
  406454:	2d16      	cmp	r5, #22
  406456:	b083      	sub	sp, #12
  406458:	4606      	mov	r6, r0
  40645a:	d927      	bls.n	4064ac <_malloc_r+0x60>
  40645c:	f035 0507 	bics.w	r5, r5, #7
  406460:	d427      	bmi.n	4064b2 <_malloc_r+0x66>
  406462:	42a9      	cmp	r1, r5
  406464:	d825      	bhi.n	4064b2 <_malloc_r+0x66>
  406466:	4630      	mov	r0, r6
  406468:	f000 fb78 	bl	406b5c <__malloc_lock>
  40646c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  406470:	d226      	bcs.n	4064c0 <_malloc_r+0x74>
  406472:	4fc1      	ldr	r7, [pc, #772]	; (406778 <_malloc_r+0x32c>)
  406474:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  406478:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  40647c:	68dc      	ldr	r4, [r3, #12]
  40647e:	429c      	cmp	r4, r3
  406480:	f000 81d2 	beq.w	406828 <_malloc_r+0x3dc>
  406484:	6863      	ldr	r3, [r4, #4]
  406486:	68e2      	ldr	r2, [r4, #12]
  406488:	68a1      	ldr	r1, [r4, #8]
  40648a:	f023 0303 	bic.w	r3, r3, #3
  40648e:	4423      	add	r3, r4
  406490:	4630      	mov	r0, r6
  406492:	685d      	ldr	r5, [r3, #4]
  406494:	60ca      	str	r2, [r1, #12]
  406496:	f045 0501 	orr.w	r5, r5, #1
  40649a:	6091      	str	r1, [r2, #8]
  40649c:	605d      	str	r5, [r3, #4]
  40649e:	f000 fb5f 	bl	406b60 <__malloc_unlock>
  4064a2:	3408      	adds	r4, #8
  4064a4:	4620      	mov	r0, r4
  4064a6:	b003      	add	sp, #12
  4064a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064ac:	2510      	movs	r5, #16
  4064ae:	42a9      	cmp	r1, r5
  4064b0:	d9d9      	bls.n	406466 <_malloc_r+0x1a>
  4064b2:	2400      	movs	r4, #0
  4064b4:	230c      	movs	r3, #12
  4064b6:	4620      	mov	r0, r4
  4064b8:	6033      	str	r3, [r6, #0]
  4064ba:	b003      	add	sp, #12
  4064bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4064c0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  4064c4:	f000 808a 	beq.w	4065dc <_malloc_r+0x190>
  4064c8:	f1bc 0f04 	cmp.w	ip, #4
  4064cc:	f200 8160 	bhi.w	406790 <_malloc_r+0x344>
  4064d0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  4064d4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  4064d8:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4064dc:	4fa6      	ldr	r7, [pc, #664]	; (406778 <_malloc_r+0x32c>)
  4064de:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  4064e2:	68cc      	ldr	r4, [r1, #12]
  4064e4:	42a1      	cmp	r1, r4
  4064e6:	d105      	bne.n	4064f4 <_malloc_r+0xa8>
  4064e8:	e00c      	b.n	406504 <_malloc_r+0xb8>
  4064ea:	2b00      	cmp	r3, #0
  4064ec:	da7a      	bge.n	4065e4 <_malloc_r+0x198>
  4064ee:	68e4      	ldr	r4, [r4, #12]
  4064f0:	42a1      	cmp	r1, r4
  4064f2:	d007      	beq.n	406504 <_malloc_r+0xb8>
  4064f4:	6862      	ldr	r2, [r4, #4]
  4064f6:	f022 0203 	bic.w	r2, r2, #3
  4064fa:	1b53      	subs	r3, r2, r5
  4064fc:	2b0f      	cmp	r3, #15
  4064fe:	ddf4      	ble.n	4064ea <_malloc_r+0x9e>
  406500:	f10c 3cff 	add.w	ip, ip, #4294967295
  406504:	f10c 0c01 	add.w	ip, ip, #1
  406508:	4b9b      	ldr	r3, [pc, #620]	; (406778 <_malloc_r+0x32c>)
  40650a:	693c      	ldr	r4, [r7, #16]
  40650c:	f103 0e08 	add.w	lr, r3, #8
  406510:	4574      	cmp	r4, lr
  406512:	f000 817e 	beq.w	406812 <_malloc_r+0x3c6>
  406516:	6861      	ldr	r1, [r4, #4]
  406518:	f021 0103 	bic.w	r1, r1, #3
  40651c:	1b4a      	subs	r2, r1, r5
  40651e:	2a0f      	cmp	r2, #15
  406520:	f300 8164 	bgt.w	4067ec <_malloc_r+0x3a0>
  406524:	2a00      	cmp	r2, #0
  406526:	f8c3 e014 	str.w	lr, [r3, #20]
  40652a:	f8c3 e010 	str.w	lr, [r3, #16]
  40652e:	da6a      	bge.n	406606 <_malloc_r+0x1ba>
  406530:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  406534:	f080 813a 	bcs.w	4067ac <_malloc_r+0x360>
  406538:	08c9      	lsrs	r1, r1, #3
  40653a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40653e:	ea4f 08a1 	mov.w	r8, r1, asr #2
  406542:	685a      	ldr	r2, [r3, #4]
  406544:	6881      	ldr	r1, [r0, #8]
  406546:	60a1      	str	r1, [r4, #8]
  406548:	f04f 0901 	mov.w	r9, #1
  40654c:	fa09 f808 	lsl.w	r8, r9, r8
  406550:	ea48 0202 	orr.w	r2, r8, r2
  406554:	60e0      	str	r0, [r4, #12]
  406556:	605a      	str	r2, [r3, #4]
  406558:	6084      	str	r4, [r0, #8]
  40655a:	60cc      	str	r4, [r1, #12]
  40655c:	ea4f 03ac 	mov.w	r3, ip, asr #2
  406560:	2001      	movs	r0, #1
  406562:	4098      	lsls	r0, r3
  406564:	4290      	cmp	r0, r2
  406566:	d85b      	bhi.n	406620 <_malloc_r+0x1d4>
  406568:	4202      	tst	r2, r0
  40656a:	d106      	bne.n	40657a <_malloc_r+0x12e>
  40656c:	f02c 0c03 	bic.w	ip, ip, #3
  406570:	0040      	lsls	r0, r0, #1
  406572:	4202      	tst	r2, r0
  406574:	f10c 0c04 	add.w	ip, ip, #4
  406578:	d0fa      	beq.n	406570 <_malloc_r+0x124>
  40657a:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  40657e:	4644      	mov	r4, r8
  406580:	46e1      	mov	r9, ip
  406582:	68e3      	ldr	r3, [r4, #12]
  406584:	429c      	cmp	r4, r3
  406586:	d107      	bne.n	406598 <_malloc_r+0x14c>
  406588:	e145      	b.n	406816 <_malloc_r+0x3ca>
  40658a:	2a00      	cmp	r2, #0
  40658c:	f280 8156 	bge.w	40683c <_malloc_r+0x3f0>
  406590:	68db      	ldr	r3, [r3, #12]
  406592:	429c      	cmp	r4, r3
  406594:	f000 813f 	beq.w	406816 <_malloc_r+0x3ca>
  406598:	6859      	ldr	r1, [r3, #4]
  40659a:	f021 0103 	bic.w	r1, r1, #3
  40659e:	1b4a      	subs	r2, r1, r5
  4065a0:	2a0f      	cmp	r2, #15
  4065a2:	ddf2      	ble.n	40658a <_malloc_r+0x13e>
  4065a4:	461c      	mov	r4, r3
  4065a6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4065aa:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4065ae:	1959      	adds	r1, r3, r5
  4065b0:	f045 0901 	orr.w	r9, r5, #1
  4065b4:	f042 0501 	orr.w	r5, r2, #1
  4065b8:	f8c3 9004 	str.w	r9, [r3, #4]
  4065bc:	4630      	mov	r0, r6
  4065be:	f8c8 c00c 	str.w	ip, [r8, #12]
  4065c2:	f8cc 8008 	str.w	r8, [ip, #8]
  4065c6:	6179      	str	r1, [r7, #20]
  4065c8:	6139      	str	r1, [r7, #16]
  4065ca:	f8c1 e00c 	str.w	lr, [r1, #12]
  4065ce:	f8c1 e008 	str.w	lr, [r1, #8]
  4065d2:	604d      	str	r5, [r1, #4]
  4065d4:	508a      	str	r2, [r1, r2]
  4065d6:	f000 fac3 	bl	406b60 <__malloc_unlock>
  4065da:	e763      	b.n	4064a4 <_malloc_r+0x58>
  4065dc:	217e      	movs	r1, #126	; 0x7e
  4065de:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  4065e2:	e77b      	b.n	4064dc <_malloc_r+0x90>
  4065e4:	4422      	add	r2, r4
  4065e6:	68e3      	ldr	r3, [r4, #12]
  4065e8:	6850      	ldr	r0, [r2, #4]
  4065ea:	68a1      	ldr	r1, [r4, #8]
  4065ec:	f040 0501 	orr.w	r5, r0, #1
  4065f0:	60cb      	str	r3, [r1, #12]
  4065f2:	4630      	mov	r0, r6
  4065f4:	6099      	str	r1, [r3, #8]
  4065f6:	6055      	str	r5, [r2, #4]
  4065f8:	f000 fab2 	bl	406b60 <__malloc_unlock>
  4065fc:	3408      	adds	r4, #8
  4065fe:	4620      	mov	r0, r4
  406600:	b003      	add	sp, #12
  406602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406606:	4421      	add	r1, r4
  406608:	4630      	mov	r0, r6
  40660a:	684b      	ldr	r3, [r1, #4]
  40660c:	f043 0301 	orr.w	r3, r3, #1
  406610:	604b      	str	r3, [r1, #4]
  406612:	f000 faa5 	bl	406b60 <__malloc_unlock>
  406616:	3408      	adds	r4, #8
  406618:	4620      	mov	r0, r4
  40661a:	b003      	add	sp, #12
  40661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406620:	68bc      	ldr	r4, [r7, #8]
  406622:	6863      	ldr	r3, [r4, #4]
  406624:	f023 0903 	bic.w	r9, r3, #3
  406628:	45a9      	cmp	r9, r5
  40662a:	d304      	bcc.n	406636 <_malloc_r+0x1ea>
  40662c:	ebc5 0309 	rsb	r3, r5, r9
  406630:	2b0f      	cmp	r3, #15
  406632:	f300 8091 	bgt.w	406758 <_malloc_r+0x30c>
  406636:	4b51      	ldr	r3, [pc, #324]	; (40677c <_malloc_r+0x330>)
  406638:	4a51      	ldr	r2, [pc, #324]	; (406780 <_malloc_r+0x334>)
  40663a:	6819      	ldr	r1, [r3, #0]
  40663c:	6813      	ldr	r3, [r2, #0]
  40663e:	3301      	adds	r3, #1
  406640:	eb05 0a01 	add.w	sl, r5, r1
  406644:	eb04 0b09 	add.w	fp, r4, r9
  406648:	f000 8161 	beq.w	40690e <_malloc_r+0x4c2>
  40664c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  406650:	f10a 0a0f 	add.w	sl, sl, #15
  406654:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  406658:	f02a 0a0f 	bic.w	sl, sl, #15
  40665c:	4630      	mov	r0, r6
  40665e:	4651      	mov	r1, sl
  406660:	9201      	str	r2, [sp, #4]
  406662:	f000 fca1 	bl	406fa8 <_sbrk_r>
  406666:	f1b0 3fff 	cmp.w	r0, #4294967295
  40666a:	4680      	mov	r8, r0
  40666c:	9a01      	ldr	r2, [sp, #4]
  40666e:	f000 8100 	beq.w	406872 <_malloc_r+0x426>
  406672:	4583      	cmp	fp, r0
  406674:	f200 80fa 	bhi.w	40686c <_malloc_r+0x420>
  406678:	f8df c110 	ldr.w	ip, [pc, #272]	; 40678c <_malloc_r+0x340>
  40667c:	f8dc 3000 	ldr.w	r3, [ip]
  406680:	45c3      	cmp	fp, r8
  406682:	4453      	add	r3, sl
  406684:	f8cc 3000 	str.w	r3, [ip]
  406688:	f000 814a 	beq.w	406920 <_malloc_r+0x4d4>
  40668c:	6812      	ldr	r2, [r2, #0]
  40668e:	493c      	ldr	r1, [pc, #240]	; (406780 <_malloc_r+0x334>)
  406690:	3201      	adds	r2, #1
  406692:	bf1b      	ittet	ne
  406694:	ebcb 0b08 	rsbne	fp, fp, r8
  406698:	445b      	addne	r3, fp
  40669a:	f8c1 8000 	streq.w	r8, [r1]
  40669e:	f8cc 3000 	strne.w	r3, [ip]
  4066a2:	f018 0307 	ands.w	r3, r8, #7
  4066a6:	f000 8113 	beq.w	4068d0 <_malloc_r+0x484>
  4066aa:	f1c3 0208 	rsb	r2, r3, #8
  4066ae:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  4066b2:	4490      	add	r8, r2
  4066b4:	3308      	adds	r3, #8
  4066b6:	44c2      	add	sl, r8
  4066b8:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  4066bc:	ebca 0a03 	rsb	sl, sl, r3
  4066c0:	4651      	mov	r1, sl
  4066c2:	4630      	mov	r0, r6
  4066c4:	f8cd c004 	str.w	ip, [sp, #4]
  4066c8:	f000 fc6e 	bl	406fa8 <_sbrk_r>
  4066cc:	1c43      	adds	r3, r0, #1
  4066ce:	f8dd c004 	ldr.w	ip, [sp, #4]
  4066d2:	f000 8135 	beq.w	406940 <_malloc_r+0x4f4>
  4066d6:	ebc8 0200 	rsb	r2, r8, r0
  4066da:	4452      	add	r2, sl
  4066dc:	f042 0201 	orr.w	r2, r2, #1
  4066e0:	f8dc 3000 	ldr.w	r3, [ip]
  4066e4:	f8c7 8008 	str.w	r8, [r7, #8]
  4066e8:	4453      	add	r3, sl
  4066ea:	42bc      	cmp	r4, r7
  4066ec:	f8c8 2004 	str.w	r2, [r8, #4]
  4066f0:	f8cc 3000 	str.w	r3, [ip]
  4066f4:	f8df a094 	ldr.w	sl, [pc, #148]	; 40678c <_malloc_r+0x340>
  4066f8:	d015      	beq.n	406726 <_malloc_r+0x2da>
  4066fa:	f1b9 0f0f 	cmp.w	r9, #15
  4066fe:	f240 80ea 	bls.w	4068d6 <_malloc_r+0x48a>
  406702:	6861      	ldr	r1, [r4, #4]
  406704:	f1a9 020c 	sub.w	r2, r9, #12
  406708:	f022 0207 	bic.w	r2, r2, #7
  40670c:	f001 0e01 	and.w	lr, r1, #1
  406710:	18a1      	adds	r1, r4, r2
  406712:	2005      	movs	r0, #5
  406714:	ea42 0e0e 	orr.w	lr, r2, lr
  406718:	2a0f      	cmp	r2, #15
  40671a:	f8c4 e004 	str.w	lr, [r4, #4]
  40671e:	6048      	str	r0, [r1, #4]
  406720:	6088      	str	r0, [r1, #8]
  406722:	f200 8111 	bhi.w	406948 <_malloc_r+0x4fc>
  406726:	4a17      	ldr	r2, [pc, #92]	; (406784 <_malloc_r+0x338>)
  406728:	68bc      	ldr	r4, [r7, #8]
  40672a:	6811      	ldr	r1, [r2, #0]
  40672c:	428b      	cmp	r3, r1
  40672e:	bf88      	it	hi
  406730:	6013      	strhi	r3, [r2, #0]
  406732:	4a15      	ldr	r2, [pc, #84]	; (406788 <_malloc_r+0x33c>)
  406734:	6811      	ldr	r1, [r2, #0]
  406736:	428b      	cmp	r3, r1
  406738:	bf88      	it	hi
  40673a:	6013      	strhi	r3, [r2, #0]
  40673c:	6862      	ldr	r2, [r4, #4]
  40673e:	f022 0203 	bic.w	r2, r2, #3
  406742:	4295      	cmp	r5, r2
  406744:	ebc5 0302 	rsb	r3, r5, r2
  406748:	d801      	bhi.n	40674e <_malloc_r+0x302>
  40674a:	2b0f      	cmp	r3, #15
  40674c:	dc04      	bgt.n	406758 <_malloc_r+0x30c>
  40674e:	4630      	mov	r0, r6
  406750:	f000 fa06 	bl	406b60 <__malloc_unlock>
  406754:	2400      	movs	r4, #0
  406756:	e6a5      	b.n	4064a4 <_malloc_r+0x58>
  406758:	1962      	adds	r2, r4, r5
  40675a:	f043 0301 	orr.w	r3, r3, #1
  40675e:	f045 0501 	orr.w	r5, r5, #1
  406762:	6065      	str	r5, [r4, #4]
  406764:	4630      	mov	r0, r6
  406766:	60ba      	str	r2, [r7, #8]
  406768:	6053      	str	r3, [r2, #4]
  40676a:	f000 f9f9 	bl	406b60 <__malloc_unlock>
  40676e:	3408      	adds	r4, #8
  406770:	4620      	mov	r0, r4
  406772:	b003      	add	sp, #12
  406774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406778:	2000057c 	.word	0x2000057c
  40677c:	20000bdc 	.word	0x20000bdc
  406780:	20000988 	.word	0x20000988
  406784:	20000bd8 	.word	0x20000bd8
  406788:	20000bd4 	.word	0x20000bd4
  40678c:	20000be0 	.word	0x20000be0
  406790:	f1bc 0f14 	cmp.w	ip, #20
  406794:	d961      	bls.n	40685a <_malloc_r+0x40e>
  406796:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40679a:	f200 808f 	bhi.w	4068bc <_malloc_r+0x470>
  40679e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  4067a2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  4067a6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4067aa:	e697      	b.n	4064dc <_malloc_r+0x90>
  4067ac:	0a4b      	lsrs	r3, r1, #9
  4067ae:	2b04      	cmp	r3, #4
  4067b0:	d958      	bls.n	406864 <_malloc_r+0x418>
  4067b2:	2b14      	cmp	r3, #20
  4067b4:	f200 80ae 	bhi.w	406914 <_malloc_r+0x4c8>
  4067b8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  4067bc:	0050      	lsls	r0, r2, #1
  4067be:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4067c2:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 406980 <_malloc_r+0x534>
  4067c6:	6883      	ldr	r3, [r0, #8]
  4067c8:	4283      	cmp	r3, r0
  4067ca:	f000 808a 	beq.w	4068e2 <_malloc_r+0x496>
  4067ce:	685a      	ldr	r2, [r3, #4]
  4067d0:	f022 0203 	bic.w	r2, r2, #3
  4067d4:	4291      	cmp	r1, r2
  4067d6:	d202      	bcs.n	4067de <_malloc_r+0x392>
  4067d8:	689b      	ldr	r3, [r3, #8]
  4067da:	4298      	cmp	r0, r3
  4067dc:	d1f7      	bne.n	4067ce <_malloc_r+0x382>
  4067de:	68d9      	ldr	r1, [r3, #12]
  4067e0:	687a      	ldr	r2, [r7, #4]
  4067e2:	60e1      	str	r1, [r4, #12]
  4067e4:	60a3      	str	r3, [r4, #8]
  4067e6:	608c      	str	r4, [r1, #8]
  4067e8:	60dc      	str	r4, [r3, #12]
  4067ea:	e6b7      	b.n	40655c <_malloc_r+0x110>
  4067ec:	1961      	adds	r1, r4, r5
  4067ee:	f042 0701 	orr.w	r7, r2, #1
  4067f2:	f045 0501 	orr.w	r5, r5, #1
  4067f6:	6065      	str	r5, [r4, #4]
  4067f8:	4630      	mov	r0, r6
  4067fa:	6159      	str	r1, [r3, #20]
  4067fc:	6119      	str	r1, [r3, #16]
  4067fe:	f8c1 e00c 	str.w	lr, [r1, #12]
  406802:	f8c1 e008 	str.w	lr, [r1, #8]
  406806:	604f      	str	r7, [r1, #4]
  406808:	508a      	str	r2, [r1, r2]
  40680a:	3408      	adds	r4, #8
  40680c:	f000 f9a8 	bl	406b60 <__malloc_unlock>
  406810:	e648      	b.n	4064a4 <_malloc_r+0x58>
  406812:	685a      	ldr	r2, [r3, #4]
  406814:	e6a2      	b.n	40655c <_malloc_r+0x110>
  406816:	f109 0901 	add.w	r9, r9, #1
  40681a:	f019 0f03 	tst.w	r9, #3
  40681e:	f104 0408 	add.w	r4, r4, #8
  406822:	f47f aeae 	bne.w	406582 <_malloc_r+0x136>
  406826:	e02d      	b.n	406884 <_malloc_r+0x438>
  406828:	f104 0308 	add.w	r3, r4, #8
  40682c:	6964      	ldr	r4, [r4, #20]
  40682e:	42a3      	cmp	r3, r4
  406830:	bf08      	it	eq
  406832:	f10c 0c02 	addeq.w	ip, ip, #2
  406836:	f43f ae67 	beq.w	406508 <_malloc_r+0xbc>
  40683a:	e623      	b.n	406484 <_malloc_r+0x38>
  40683c:	4419      	add	r1, r3
  40683e:	461c      	mov	r4, r3
  406840:	6848      	ldr	r0, [r1, #4]
  406842:	68db      	ldr	r3, [r3, #12]
  406844:	f854 2f08 	ldr.w	r2, [r4, #8]!
  406848:	f040 0501 	orr.w	r5, r0, #1
  40684c:	604d      	str	r5, [r1, #4]
  40684e:	4630      	mov	r0, r6
  406850:	60d3      	str	r3, [r2, #12]
  406852:	609a      	str	r2, [r3, #8]
  406854:	f000 f984 	bl	406b60 <__malloc_unlock>
  406858:	e624      	b.n	4064a4 <_malloc_r+0x58>
  40685a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40685e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  406862:	e63b      	b.n	4064dc <_malloc_r+0x90>
  406864:	098a      	lsrs	r2, r1, #6
  406866:	3238      	adds	r2, #56	; 0x38
  406868:	0050      	lsls	r0, r2, #1
  40686a:	e7a8      	b.n	4067be <_malloc_r+0x372>
  40686c:	42bc      	cmp	r4, r7
  40686e:	f43f af03 	beq.w	406678 <_malloc_r+0x22c>
  406872:	68bc      	ldr	r4, [r7, #8]
  406874:	6862      	ldr	r2, [r4, #4]
  406876:	f022 0203 	bic.w	r2, r2, #3
  40687a:	e762      	b.n	406742 <_malloc_r+0x2f6>
  40687c:	f8d8 8000 	ldr.w	r8, [r8]
  406880:	4598      	cmp	r8, r3
  406882:	d17b      	bne.n	40697c <_malloc_r+0x530>
  406884:	f01c 0f03 	tst.w	ip, #3
  406888:	f1a8 0308 	sub.w	r3, r8, #8
  40688c:	f10c 3cff 	add.w	ip, ip, #4294967295
  406890:	d1f4      	bne.n	40687c <_malloc_r+0x430>
  406892:	687b      	ldr	r3, [r7, #4]
  406894:	ea23 0300 	bic.w	r3, r3, r0
  406898:	607b      	str	r3, [r7, #4]
  40689a:	0040      	lsls	r0, r0, #1
  40689c:	4298      	cmp	r0, r3
  40689e:	f63f aebf 	bhi.w	406620 <_malloc_r+0x1d4>
  4068a2:	2800      	cmp	r0, #0
  4068a4:	f43f aebc 	beq.w	406620 <_malloc_r+0x1d4>
  4068a8:	4203      	tst	r3, r0
  4068aa:	46cc      	mov	ip, r9
  4068ac:	f47f ae65 	bne.w	40657a <_malloc_r+0x12e>
  4068b0:	0040      	lsls	r0, r0, #1
  4068b2:	4203      	tst	r3, r0
  4068b4:	f10c 0c04 	add.w	ip, ip, #4
  4068b8:	d0fa      	beq.n	4068b0 <_malloc_r+0x464>
  4068ba:	e65e      	b.n	40657a <_malloc_r+0x12e>
  4068bc:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4068c0:	d81a      	bhi.n	4068f8 <_malloc_r+0x4ac>
  4068c2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  4068c6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4068ca:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4068ce:	e605      	b.n	4064dc <_malloc_r+0x90>
  4068d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4068d4:	e6ef      	b.n	4066b6 <_malloc_r+0x26a>
  4068d6:	2301      	movs	r3, #1
  4068d8:	f8c8 3004 	str.w	r3, [r8, #4]
  4068dc:	4644      	mov	r4, r8
  4068de:	2200      	movs	r2, #0
  4068e0:	e72f      	b.n	406742 <_malloc_r+0x2f6>
  4068e2:	1091      	asrs	r1, r2, #2
  4068e4:	2001      	movs	r0, #1
  4068e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4068ea:	fa00 f101 	lsl.w	r1, r0, r1
  4068ee:	430a      	orrs	r2, r1
  4068f0:	f8c8 2004 	str.w	r2, [r8, #4]
  4068f4:	4619      	mov	r1, r3
  4068f6:	e774      	b.n	4067e2 <_malloc_r+0x396>
  4068f8:	f240 5354 	movw	r3, #1364	; 0x554
  4068fc:	459c      	cmp	ip, r3
  4068fe:	d81b      	bhi.n	406938 <_malloc_r+0x4ec>
  406900:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  406904:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  406908:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40690c:	e5e6      	b.n	4064dc <_malloc_r+0x90>
  40690e:	f10a 0a10 	add.w	sl, sl, #16
  406912:	e6a3      	b.n	40665c <_malloc_r+0x210>
  406914:	2b54      	cmp	r3, #84	; 0x54
  406916:	d81f      	bhi.n	406958 <_malloc_r+0x50c>
  406918:	0b0a      	lsrs	r2, r1, #12
  40691a:	326e      	adds	r2, #110	; 0x6e
  40691c:	0050      	lsls	r0, r2, #1
  40691e:	e74e      	b.n	4067be <_malloc_r+0x372>
  406920:	f3cb 010b 	ubfx	r1, fp, #0, #12
  406924:	2900      	cmp	r1, #0
  406926:	f47f aeb1 	bne.w	40668c <_malloc_r+0x240>
  40692a:	eb0a 0109 	add.w	r1, sl, r9
  40692e:	68ba      	ldr	r2, [r7, #8]
  406930:	f041 0101 	orr.w	r1, r1, #1
  406934:	6051      	str	r1, [r2, #4]
  406936:	e6f6      	b.n	406726 <_malloc_r+0x2da>
  406938:	21fc      	movs	r1, #252	; 0xfc
  40693a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40693e:	e5cd      	b.n	4064dc <_malloc_r+0x90>
  406940:	2201      	movs	r2, #1
  406942:	f04f 0a00 	mov.w	sl, #0
  406946:	e6cb      	b.n	4066e0 <_malloc_r+0x294>
  406948:	f104 0108 	add.w	r1, r4, #8
  40694c:	4630      	mov	r0, r6
  40694e:	f7ff fa55 	bl	405dfc <_free_r>
  406952:	f8da 3000 	ldr.w	r3, [sl]
  406956:	e6e6      	b.n	406726 <_malloc_r+0x2da>
  406958:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40695c:	d803      	bhi.n	406966 <_malloc_r+0x51a>
  40695e:	0bca      	lsrs	r2, r1, #15
  406960:	3277      	adds	r2, #119	; 0x77
  406962:	0050      	lsls	r0, r2, #1
  406964:	e72b      	b.n	4067be <_malloc_r+0x372>
  406966:	f240 5254 	movw	r2, #1364	; 0x554
  40696a:	4293      	cmp	r3, r2
  40696c:	d803      	bhi.n	406976 <_malloc_r+0x52a>
  40696e:	0c8a      	lsrs	r2, r1, #18
  406970:	327c      	adds	r2, #124	; 0x7c
  406972:	0050      	lsls	r0, r2, #1
  406974:	e723      	b.n	4067be <_malloc_r+0x372>
  406976:	20fc      	movs	r0, #252	; 0xfc
  406978:	227e      	movs	r2, #126	; 0x7e
  40697a:	e720      	b.n	4067be <_malloc_r+0x372>
  40697c:	687b      	ldr	r3, [r7, #4]
  40697e:	e78c      	b.n	40689a <_malloc_r+0x44e>
  406980:	2000057c 	.word	0x2000057c

00406984 <_mbrtowc_r>:
  406984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406988:	b083      	sub	sp, #12
  40698a:	461f      	mov	r7, r3
  40698c:	4614      	mov	r4, r2
  40698e:	4605      	mov	r5, r0
  406990:	4688      	mov	r8, r1
  406992:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406994:	4b10      	ldr	r3, [pc, #64]	; (4069d8 <_mbrtowc_r+0x54>)
  406996:	b19a      	cbz	r2, 4069c0 <_mbrtowc_r+0x3c>
  406998:	f8d3 9000 	ldr.w	r9, [r3]
  40699c:	f7ff fcbc 	bl	406318 <__locale_charset>
  4069a0:	4641      	mov	r1, r8
  4069a2:	e88d 0041 	stmia.w	sp, {r0, r6}
  4069a6:	4622      	mov	r2, r4
  4069a8:	463b      	mov	r3, r7
  4069aa:	4628      	mov	r0, r5
  4069ac:	47c8      	blx	r9
  4069ae:	1c43      	adds	r3, r0, #1
  4069b0:	d103      	bne.n	4069ba <_mbrtowc_r+0x36>
  4069b2:	2200      	movs	r2, #0
  4069b4:	238a      	movs	r3, #138	; 0x8a
  4069b6:	6032      	str	r2, [r6, #0]
  4069b8:	602b      	str	r3, [r5, #0]
  4069ba:	b003      	add	sp, #12
  4069bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4069c0:	681f      	ldr	r7, [r3, #0]
  4069c2:	f7ff fca9 	bl	406318 <__locale_charset>
  4069c6:	4621      	mov	r1, r4
  4069c8:	e88d 0041 	stmia.w	sp, {r0, r6}
  4069cc:	4a03      	ldr	r2, [pc, #12]	; (4069dc <_mbrtowc_r+0x58>)
  4069ce:	4628      	mov	r0, r5
  4069d0:	2301      	movs	r3, #1
  4069d2:	47b8      	blx	r7
  4069d4:	e7eb      	b.n	4069ae <_mbrtowc_r+0x2a>
  4069d6:	bf00      	nop
  4069d8:	2000098c 	.word	0x2000098c
  4069dc:	0040d080 	.word	0x0040d080

004069e0 <__ascii_mbtowc>:
  4069e0:	b082      	sub	sp, #8
  4069e2:	b149      	cbz	r1, 4069f8 <__ascii_mbtowc+0x18>
  4069e4:	b15a      	cbz	r2, 4069fe <__ascii_mbtowc+0x1e>
  4069e6:	b16b      	cbz	r3, 406a04 <__ascii_mbtowc+0x24>
  4069e8:	7813      	ldrb	r3, [r2, #0]
  4069ea:	600b      	str	r3, [r1, #0]
  4069ec:	7810      	ldrb	r0, [r2, #0]
  4069ee:	3000      	adds	r0, #0
  4069f0:	bf18      	it	ne
  4069f2:	2001      	movne	r0, #1
  4069f4:	b002      	add	sp, #8
  4069f6:	4770      	bx	lr
  4069f8:	a901      	add	r1, sp, #4
  4069fa:	2a00      	cmp	r2, #0
  4069fc:	d1f3      	bne.n	4069e6 <__ascii_mbtowc+0x6>
  4069fe:	4610      	mov	r0, r2
  406a00:	b002      	add	sp, #8
  406a02:	4770      	bx	lr
  406a04:	f06f 0001 	mvn.w	r0, #1
  406a08:	e7f4      	b.n	4069f4 <__ascii_mbtowc+0x14>
  406a0a:	bf00      	nop

00406a0c <memchr>:
  406a0c:	0783      	lsls	r3, r0, #30
  406a0e:	b470      	push	{r4, r5, r6}
  406a10:	b2c9      	uxtb	r1, r1
  406a12:	d03f      	beq.n	406a94 <memchr+0x88>
  406a14:	1e54      	subs	r4, r2, #1
  406a16:	b32a      	cbz	r2, 406a64 <memchr+0x58>
  406a18:	7803      	ldrb	r3, [r0, #0]
  406a1a:	428b      	cmp	r3, r1
  406a1c:	d023      	beq.n	406a66 <memchr+0x5a>
  406a1e:	1c43      	adds	r3, r0, #1
  406a20:	e004      	b.n	406a2c <memchr+0x20>
  406a22:	b1fc      	cbz	r4, 406a64 <memchr+0x58>
  406a24:	7804      	ldrb	r4, [r0, #0]
  406a26:	428c      	cmp	r4, r1
  406a28:	d01d      	beq.n	406a66 <memchr+0x5a>
  406a2a:	4614      	mov	r4, r2
  406a2c:	f013 0f03 	tst.w	r3, #3
  406a30:	4618      	mov	r0, r3
  406a32:	f104 32ff 	add.w	r2, r4, #4294967295
  406a36:	f103 0301 	add.w	r3, r3, #1
  406a3a:	d1f2      	bne.n	406a22 <memchr+0x16>
  406a3c:	2c03      	cmp	r4, #3
  406a3e:	d814      	bhi.n	406a6a <memchr+0x5e>
  406a40:	1e65      	subs	r5, r4, #1
  406a42:	b34c      	cbz	r4, 406a98 <memchr+0x8c>
  406a44:	7803      	ldrb	r3, [r0, #0]
  406a46:	428b      	cmp	r3, r1
  406a48:	d00d      	beq.n	406a66 <memchr+0x5a>
  406a4a:	1c42      	adds	r2, r0, #1
  406a4c:	2300      	movs	r3, #0
  406a4e:	e002      	b.n	406a56 <memchr+0x4a>
  406a50:	7804      	ldrb	r4, [r0, #0]
  406a52:	428c      	cmp	r4, r1
  406a54:	d007      	beq.n	406a66 <memchr+0x5a>
  406a56:	42ab      	cmp	r3, r5
  406a58:	4610      	mov	r0, r2
  406a5a:	f103 0301 	add.w	r3, r3, #1
  406a5e:	f102 0201 	add.w	r2, r2, #1
  406a62:	d1f5      	bne.n	406a50 <memchr+0x44>
  406a64:	2000      	movs	r0, #0
  406a66:	bc70      	pop	{r4, r5, r6}
  406a68:	4770      	bx	lr
  406a6a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  406a6e:	4603      	mov	r3, r0
  406a70:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  406a74:	4618      	mov	r0, r3
  406a76:	3304      	adds	r3, #4
  406a78:	6802      	ldr	r2, [r0, #0]
  406a7a:	4072      	eors	r2, r6
  406a7c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  406a80:	ea25 0202 	bic.w	r2, r5, r2
  406a84:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  406a88:	d1da      	bne.n	406a40 <memchr+0x34>
  406a8a:	3c04      	subs	r4, #4
  406a8c:	2c03      	cmp	r4, #3
  406a8e:	4618      	mov	r0, r3
  406a90:	d8f0      	bhi.n	406a74 <memchr+0x68>
  406a92:	e7d5      	b.n	406a40 <memchr+0x34>
  406a94:	4614      	mov	r4, r2
  406a96:	e7d1      	b.n	406a3c <memchr+0x30>
  406a98:	4620      	mov	r0, r4
  406a9a:	e7e4      	b.n	406a66 <memchr+0x5a>

00406a9c <memmove>:
  406a9c:	4288      	cmp	r0, r1
  406a9e:	b4f0      	push	{r4, r5, r6, r7}
  406aa0:	d910      	bls.n	406ac4 <memmove+0x28>
  406aa2:	188c      	adds	r4, r1, r2
  406aa4:	42a0      	cmp	r0, r4
  406aa6:	d20d      	bcs.n	406ac4 <memmove+0x28>
  406aa8:	1885      	adds	r5, r0, r2
  406aaa:	1e53      	subs	r3, r2, #1
  406aac:	b142      	cbz	r2, 406ac0 <memmove+0x24>
  406aae:	4621      	mov	r1, r4
  406ab0:	462a      	mov	r2, r5
  406ab2:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  406ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406aba:	3b01      	subs	r3, #1
  406abc:	1c5c      	adds	r4, r3, #1
  406abe:	d1f8      	bne.n	406ab2 <memmove+0x16>
  406ac0:	bcf0      	pop	{r4, r5, r6, r7}
  406ac2:	4770      	bx	lr
  406ac4:	2a0f      	cmp	r2, #15
  406ac6:	d93f      	bls.n	406b48 <memmove+0xac>
  406ac8:	ea40 0301 	orr.w	r3, r0, r1
  406acc:	079b      	lsls	r3, r3, #30
  406ace:	d13f      	bne.n	406b50 <memmove+0xb4>
  406ad0:	f1a2 0710 	sub.w	r7, r2, #16
  406ad4:	093f      	lsrs	r7, r7, #4
  406ad6:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  406ada:	3610      	adds	r6, #16
  406adc:	460c      	mov	r4, r1
  406ade:	4603      	mov	r3, r0
  406ae0:	6825      	ldr	r5, [r4, #0]
  406ae2:	601d      	str	r5, [r3, #0]
  406ae4:	6865      	ldr	r5, [r4, #4]
  406ae6:	605d      	str	r5, [r3, #4]
  406ae8:	68a5      	ldr	r5, [r4, #8]
  406aea:	609d      	str	r5, [r3, #8]
  406aec:	68e5      	ldr	r5, [r4, #12]
  406aee:	60dd      	str	r5, [r3, #12]
  406af0:	3310      	adds	r3, #16
  406af2:	42b3      	cmp	r3, r6
  406af4:	f104 0410 	add.w	r4, r4, #16
  406af8:	d1f2      	bne.n	406ae0 <memmove+0x44>
  406afa:	1c7b      	adds	r3, r7, #1
  406afc:	f002 0c0f 	and.w	ip, r2, #15
  406b00:	011b      	lsls	r3, r3, #4
  406b02:	f1bc 0f03 	cmp.w	ip, #3
  406b06:	4419      	add	r1, r3
  406b08:	4403      	add	r3, r0
  406b0a:	d923      	bls.n	406b54 <memmove+0xb8>
  406b0c:	460e      	mov	r6, r1
  406b0e:	461d      	mov	r5, r3
  406b10:	4664      	mov	r4, ip
  406b12:	3c04      	subs	r4, #4
  406b14:	f856 7b04 	ldr.w	r7, [r6], #4
  406b18:	f845 7b04 	str.w	r7, [r5], #4
  406b1c:	2c03      	cmp	r4, #3
  406b1e:	d8f8      	bhi.n	406b12 <memmove+0x76>
  406b20:	f1ac 0404 	sub.w	r4, ip, #4
  406b24:	f024 0403 	bic.w	r4, r4, #3
  406b28:	3404      	adds	r4, #4
  406b2a:	f002 0203 	and.w	r2, r2, #3
  406b2e:	4423      	add	r3, r4
  406b30:	4421      	add	r1, r4
  406b32:	2a00      	cmp	r2, #0
  406b34:	d0c4      	beq.n	406ac0 <memmove+0x24>
  406b36:	441a      	add	r2, r3
  406b38:	f811 4b01 	ldrb.w	r4, [r1], #1
  406b3c:	f803 4b01 	strb.w	r4, [r3], #1
  406b40:	4293      	cmp	r3, r2
  406b42:	d1f9      	bne.n	406b38 <memmove+0x9c>
  406b44:	bcf0      	pop	{r4, r5, r6, r7}
  406b46:	4770      	bx	lr
  406b48:	4603      	mov	r3, r0
  406b4a:	2a00      	cmp	r2, #0
  406b4c:	d1f3      	bne.n	406b36 <memmove+0x9a>
  406b4e:	e7b7      	b.n	406ac0 <memmove+0x24>
  406b50:	4603      	mov	r3, r0
  406b52:	e7f0      	b.n	406b36 <memmove+0x9a>
  406b54:	4662      	mov	r2, ip
  406b56:	2a00      	cmp	r2, #0
  406b58:	d1ed      	bne.n	406b36 <memmove+0x9a>
  406b5a:	e7b1      	b.n	406ac0 <memmove+0x24>

00406b5c <__malloc_lock>:
  406b5c:	4770      	bx	lr
  406b5e:	bf00      	nop

00406b60 <__malloc_unlock>:
  406b60:	4770      	bx	lr
  406b62:	bf00      	nop

00406b64 <_read_r>:
  406b64:	b570      	push	{r4, r5, r6, lr}
  406b66:	4c08      	ldr	r4, [pc, #32]	; (406b88 <_read_r+0x24>)
  406b68:	4606      	mov	r6, r0
  406b6a:	2500      	movs	r5, #0
  406b6c:	4608      	mov	r0, r1
  406b6e:	4611      	mov	r1, r2
  406b70:	461a      	mov	r2, r3
  406b72:	6025      	str	r5, [r4, #0]
  406b74:	f7fa f986 	bl	400e84 <_read>
  406b78:	1c43      	adds	r3, r0, #1
  406b7a:	d000      	beq.n	406b7e <_read_r+0x1a>
  406b7c:	bd70      	pop	{r4, r5, r6, pc}
  406b7e:	6823      	ldr	r3, [r4, #0]
  406b80:	2b00      	cmp	r3, #0
  406b82:	d0fb      	beq.n	406b7c <_read_r+0x18>
  406b84:	6033      	str	r3, [r6, #0]
  406b86:	bd70      	pop	{r4, r5, r6, pc}
  406b88:	2000c7bc 	.word	0x2000c7bc

00406b8c <_realloc_r>:
  406b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406b90:	460c      	mov	r4, r1
  406b92:	b083      	sub	sp, #12
  406b94:	4690      	mov	r8, r2
  406b96:	4681      	mov	r9, r0
  406b98:	2900      	cmp	r1, #0
  406b9a:	f000 80e2 	beq.w	406d62 <_realloc_r+0x1d6>
  406b9e:	f7ff ffdd 	bl	406b5c <__malloc_lock>
  406ba2:	f108 060b 	add.w	r6, r8, #11
  406ba6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406baa:	2e16      	cmp	r6, #22
  406bac:	f023 0503 	bic.w	r5, r3, #3
  406bb0:	f1a4 0708 	sub.w	r7, r4, #8
  406bb4:	d84b      	bhi.n	406c4e <_realloc_r+0xc2>
  406bb6:	2110      	movs	r1, #16
  406bb8:	460e      	mov	r6, r1
  406bba:	45b0      	cmp	r8, r6
  406bbc:	d84c      	bhi.n	406c58 <_realloc_r+0xcc>
  406bbe:	428d      	cmp	r5, r1
  406bc0:	da78      	bge.n	406cb4 <_realloc_r+0x128>
  406bc2:	f8df b390 	ldr.w	fp, [pc, #912]	; 406f54 <_realloc_r+0x3c8>
  406bc6:	f8db e008 	ldr.w	lr, [fp, #8]
  406bca:	1978      	adds	r0, r7, r5
  406bcc:	4586      	cmp	lr, r0
  406bce:	f000 80ce 	beq.w	406d6e <_realloc_r+0x1e2>
  406bd2:	6842      	ldr	r2, [r0, #4]
  406bd4:	f022 0c01 	bic.w	ip, r2, #1
  406bd8:	4484      	add	ip, r0
  406bda:	f8dc c004 	ldr.w	ip, [ip, #4]
  406bde:	f01c 0f01 	tst.w	ip, #1
  406be2:	d07a      	beq.n	406cda <_realloc_r+0x14e>
  406be4:	2200      	movs	r2, #0
  406be6:	4610      	mov	r0, r2
  406be8:	07db      	lsls	r3, r3, #31
  406bea:	f100 8092 	bmi.w	406d12 <_realloc_r+0x186>
  406bee:	f854 3c08 	ldr.w	r3, [r4, #-8]
  406bf2:	ebc3 0a07 	rsb	sl, r3, r7
  406bf6:	f8da 3004 	ldr.w	r3, [sl, #4]
  406bfa:	f023 0303 	bic.w	r3, r3, #3
  406bfe:	442b      	add	r3, r5
  406c00:	b388      	cbz	r0, 406c66 <_realloc_r+0xda>
  406c02:	4570      	cmp	r0, lr
  406c04:	f000 80ed 	beq.w	406de2 <_realloc_r+0x256>
  406c08:	eb02 0e03 	add.w	lr, r2, r3
  406c0c:	458e      	cmp	lr, r1
  406c0e:	db2a      	blt.n	406c66 <_realloc_r+0xda>
  406c10:	68c3      	ldr	r3, [r0, #12]
  406c12:	6882      	ldr	r2, [r0, #8]
  406c14:	4657      	mov	r7, sl
  406c16:	60d3      	str	r3, [r2, #12]
  406c18:	609a      	str	r2, [r3, #8]
  406c1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406c1e:	f8da 300c 	ldr.w	r3, [sl, #12]
  406c22:	60cb      	str	r3, [r1, #12]
  406c24:	1f2a      	subs	r2, r5, #4
  406c26:	2a24      	cmp	r2, #36	; 0x24
  406c28:	6099      	str	r1, [r3, #8]
  406c2a:	f200 8126 	bhi.w	406e7a <_realloc_r+0x2ee>
  406c2e:	2a13      	cmp	r2, #19
  406c30:	f240 80b3 	bls.w	406d9a <_realloc_r+0x20e>
  406c34:	6823      	ldr	r3, [r4, #0]
  406c36:	f8ca 3008 	str.w	r3, [sl, #8]
  406c3a:	6863      	ldr	r3, [r4, #4]
  406c3c:	f8ca 300c 	str.w	r3, [sl, #12]
  406c40:	2a1b      	cmp	r2, #27
  406c42:	f200 8130 	bhi.w	406ea6 <_realloc_r+0x31a>
  406c46:	3408      	adds	r4, #8
  406c48:	f10a 0310 	add.w	r3, sl, #16
  406c4c:	e0a6      	b.n	406d9c <_realloc_r+0x210>
  406c4e:	f026 0607 	bic.w	r6, r6, #7
  406c52:	2e00      	cmp	r6, #0
  406c54:	4631      	mov	r1, r6
  406c56:	dab0      	bge.n	406bba <_realloc_r+0x2e>
  406c58:	230c      	movs	r3, #12
  406c5a:	2000      	movs	r0, #0
  406c5c:	f8c9 3000 	str.w	r3, [r9]
  406c60:	b003      	add	sp, #12
  406c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c66:	428b      	cmp	r3, r1
  406c68:	db53      	blt.n	406d12 <_realloc_r+0x186>
  406c6a:	4657      	mov	r7, sl
  406c6c:	f8da 100c 	ldr.w	r1, [sl, #12]
  406c70:	f857 0f08 	ldr.w	r0, [r7, #8]!
  406c74:	1f2a      	subs	r2, r5, #4
  406c76:	2a24      	cmp	r2, #36	; 0x24
  406c78:	60c1      	str	r1, [r0, #12]
  406c7a:	6088      	str	r0, [r1, #8]
  406c7c:	f200 8109 	bhi.w	406e92 <_realloc_r+0x306>
  406c80:	2a13      	cmp	r2, #19
  406c82:	f240 8104 	bls.w	406e8e <_realloc_r+0x302>
  406c86:	6821      	ldr	r1, [r4, #0]
  406c88:	f8ca 1008 	str.w	r1, [sl, #8]
  406c8c:	6861      	ldr	r1, [r4, #4]
  406c8e:	f8ca 100c 	str.w	r1, [sl, #12]
  406c92:	2a1b      	cmp	r2, #27
  406c94:	f200 811c 	bhi.w	406ed0 <_realloc_r+0x344>
  406c98:	3408      	adds	r4, #8
  406c9a:	f10a 0210 	add.w	r2, sl, #16
  406c9e:	6821      	ldr	r1, [r4, #0]
  406ca0:	6011      	str	r1, [r2, #0]
  406ca2:	6861      	ldr	r1, [r4, #4]
  406ca4:	6051      	str	r1, [r2, #4]
  406ca6:	68a1      	ldr	r1, [r4, #8]
  406ca8:	6091      	str	r1, [r2, #8]
  406caa:	461d      	mov	r5, r3
  406cac:	f8da 3004 	ldr.w	r3, [sl, #4]
  406cb0:	463c      	mov	r4, r7
  406cb2:	4657      	mov	r7, sl
  406cb4:	1baa      	subs	r2, r5, r6
  406cb6:	2a0f      	cmp	r2, #15
  406cb8:	f003 0301 	and.w	r3, r3, #1
  406cbc:	d819      	bhi.n	406cf2 <_realloc_r+0x166>
  406cbe:	432b      	orrs	r3, r5
  406cc0:	443d      	add	r5, r7
  406cc2:	607b      	str	r3, [r7, #4]
  406cc4:	686b      	ldr	r3, [r5, #4]
  406cc6:	f043 0301 	orr.w	r3, r3, #1
  406cca:	606b      	str	r3, [r5, #4]
  406ccc:	4648      	mov	r0, r9
  406cce:	f7ff ff47 	bl	406b60 <__malloc_unlock>
  406cd2:	4620      	mov	r0, r4
  406cd4:	b003      	add	sp, #12
  406cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406cda:	f022 0203 	bic.w	r2, r2, #3
  406cde:	eb02 0c05 	add.w	ip, r2, r5
  406ce2:	458c      	cmp	ip, r1
  406ce4:	db80      	blt.n	406be8 <_realloc_r+0x5c>
  406ce6:	68c2      	ldr	r2, [r0, #12]
  406ce8:	6881      	ldr	r1, [r0, #8]
  406cea:	4665      	mov	r5, ip
  406cec:	60ca      	str	r2, [r1, #12]
  406cee:	6091      	str	r1, [r2, #8]
  406cf0:	e7e0      	b.n	406cb4 <_realloc_r+0x128>
  406cf2:	19b9      	adds	r1, r7, r6
  406cf4:	f042 0001 	orr.w	r0, r2, #1
  406cf8:	431e      	orrs	r6, r3
  406cfa:	440a      	add	r2, r1
  406cfc:	607e      	str	r6, [r7, #4]
  406cfe:	6048      	str	r0, [r1, #4]
  406d00:	6853      	ldr	r3, [r2, #4]
  406d02:	f043 0301 	orr.w	r3, r3, #1
  406d06:	3108      	adds	r1, #8
  406d08:	6053      	str	r3, [r2, #4]
  406d0a:	4648      	mov	r0, r9
  406d0c:	f7ff f876 	bl	405dfc <_free_r>
  406d10:	e7dc      	b.n	406ccc <_realloc_r+0x140>
  406d12:	4641      	mov	r1, r8
  406d14:	4648      	mov	r0, r9
  406d16:	f7ff fb99 	bl	40644c <_malloc_r>
  406d1a:	4680      	mov	r8, r0
  406d1c:	b1d0      	cbz	r0, 406d54 <_realloc_r+0x1c8>
  406d1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406d22:	f023 0201 	bic.w	r2, r3, #1
  406d26:	443a      	add	r2, r7
  406d28:	f1a0 0108 	sub.w	r1, r0, #8
  406d2c:	4291      	cmp	r1, r2
  406d2e:	f000 809e 	beq.w	406e6e <_realloc_r+0x2e2>
  406d32:	1f2a      	subs	r2, r5, #4
  406d34:	2a24      	cmp	r2, #36	; 0x24
  406d36:	d850      	bhi.n	406dda <_realloc_r+0x24e>
  406d38:	2a13      	cmp	r2, #19
  406d3a:	d823      	bhi.n	406d84 <_realloc_r+0x1f8>
  406d3c:	4603      	mov	r3, r0
  406d3e:	4622      	mov	r2, r4
  406d40:	6811      	ldr	r1, [r2, #0]
  406d42:	6019      	str	r1, [r3, #0]
  406d44:	6851      	ldr	r1, [r2, #4]
  406d46:	6059      	str	r1, [r3, #4]
  406d48:	6892      	ldr	r2, [r2, #8]
  406d4a:	609a      	str	r2, [r3, #8]
  406d4c:	4621      	mov	r1, r4
  406d4e:	4648      	mov	r0, r9
  406d50:	f7ff f854 	bl	405dfc <_free_r>
  406d54:	4648      	mov	r0, r9
  406d56:	f7ff ff03 	bl	406b60 <__malloc_unlock>
  406d5a:	4640      	mov	r0, r8
  406d5c:	b003      	add	sp, #12
  406d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d62:	4611      	mov	r1, r2
  406d64:	b003      	add	sp, #12
  406d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406d6a:	f7ff bb6f 	b.w	40644c <_malloc_r>
  406d6e:	f8de 2004 	ldr.w	r2, [lr, #4]
  406d72:	f022 0203 	bic.w	r2, r2, #3
  406d76:	1950      	adds	r0, r2, r5
  406d78:	f106 0c10 	add.w	ip, r6, #16
  406d7c:	4560      	cmp	r0, ip
  406d7e:	da19      	bge.n	406db4 <_realloc_r+0x228>
  406d80:	4670      	mov	r0, lr
  406d82:	e731      	b.n	406be8 <_realloc_r+0x5c>
  406d84:	6823      	ldr	r3, [r4, #0]
  406d86:	6003      	str	r3, [r0, #0]
  406d88:	6863      	ldr	r3, [r4, #4]
  406d8a:	6043      	str	r3, [r0, #4]
  406d8c:	2a1b      	cmp	r2, #27
  406d8e:	d863      	bhi.n	406e58 <_realloc_r+0x2cc>
  406d90:	f100 0308 	add.w	r3, r0, #8
  406d94:	f104 0208 	add.w	r2, r4, #8
  406d98:	e7d2      	b.n	406d40 <_realloc_r+0x1b4>
  406d9a:	463b      	mov	r3, r7
  406d9c:	6822      	ldr	r2, [r4, #0]
  406d9e:	601a      	str	r2, [r3, #0]
  406da0:	6862      	ldr	r2, [r4, #4]
  406da2:	605a      	str	r2, [r3, #4]
  406da4:	68a2      	ldr	r2, [r4, #8]
  406da6:	609a      	str	r2, [r3, #8]
  406da8:	463c      	mov	r4, r7
  406daa:	4675      	mov	r5, lr
  406dac:	f8da 3004 	ldr.w	r3, [sl, #4]
  406db0:	4657      	mov	r7, sl
  406db2:	e77f      	b.n	406cb4 <_realloc_r+0x128>
  406db4:	4437      	add	r7, r6
  406db6:	1b83      	subs	r3, r0, r6
  406db8:	f043 0301 	orr.w	r3, r3, #1
  406dbc:	f8cb 7008 	str.w	r7, [fp, #8]
  406dc0:	607b      	str	r3, [r7, #4]
  406dc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406dc6:	f003 0301 	and.w	r3, r3, #1
  406dca:	431e      	orrs	r6, r3
  406dcc:	4648      	mov	r0, r9
  406dce:	f844 6c04 	str.w	r6, [r4, #-4]
  406dd2:	f7ff fec5 	bl	406b60 <__malloc_unlock>
  406dd6:	4620      	mov	r0, r4
  406dd8:	e77c      	b.n	406cd4 <_realloc_r+0x148>
  406dda:	4621      	mov	r1, r4
  406ddc:	f7ff fe5e 	bl	406a9c <memmove>
  406de0:	e7b4      	b.n	406d4c <_realloc_r+0x1c0>
  406de2:	eb02 0c03 	add.w	ip, r2, r3
  406de6:	f106 0210 	add.w	r2, r6, #16
  406dea:	4594      	cmp	ip, r2
  406dec:	f6ff af3b 	blt.w	406c66 <_realloc_r+0xda>
  406df0:	4657      	mov	r7, sl
  406df2:	f8da 300c 	ldr.w	r3, [sl, #12]
  406df6:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406dfa:	1f2a      	subs	r2, r5, #4
  406dfc:	2a24      	cmp	r2, #36	; 0x24
  406dfe:	60cb      	str	r3, [r1, #12]
  406e00:	6099      	str	r1, [r3, #8]
  406e02:	f200 8087 	bhi.w	406f14 <_realloc_r+0x388>
  406e06:	2a13      	cmp	r2, #19
  406e08:	d978      	bls.n	406efc <_realloc_r+0x370>
  406e0a:	6823      	ldr	r3, [r4, #0]
  406e0c:	f8ca 3008 	str.w	r3, [sl, #8]
  406e10:	6863      	ldr	r3, [r4, #4]
  406e12:	f8ca 300c 	str.w	r3, [sl, #12]
  406e16:	2a1b      	cmp	r2, #27
  406e18:	f200 8085 	bhi.w	406f26 <_realloc_r+0x39a>
  406e1c:	3408      	adds	r4, #8
  406e1e:	f10a 0310 	add.w	r3, sl, #16
  406e22:	6822      	ldr	r2, [r4, #0]
  406e24:	601a      	str	r2, [r3, #0]
  406e26:	6862      	ldr	r2, [r4, #4]
  406e28:	605a      	str	r2, [r3, #4]
  406e2a:	68a2      	ldr	r2, [r4, #8]
  406e2c:	609a      	str	r2, [r3, #8]
  406e2e:	eb0a 0306 	add.w	r3, sl, r6
  406e32:	ebc6 020c 	rsb	r2, r6, ip
  406e36:	f042 0201 	orr.w	r2, r2, #1
  406e3a:	f8cb 3008 	str.w	r3, [fp, #8]
  406e3e:	605a      	str	r2, [r3, #4]
  406e40:	f8da 3004 	ldr.w	r3, [sl, #4]
  406e44:	f003 0301 	and.w	r3, r3, #1
  406e48:	431e      	orrs	r6, r3
  406e4a:	4648      	mov	r0, r9
  406e4c:	f8ca 6004 	str.w	r6, [sl, #4]
  406e50:	f7ff fe86 	bl	406b60 <__malloc_unlock>
  406e54:	4638      	mov	r0, r7
  406e56:	e73d      	b.n	406cd4 <_realloc_r+0x148>
  406e58:	68a3      	ldr	r3, [r4, #8]
  406e5a:	6083      	str	r3, [r0, #8]
  406e5c:	68e3      	ldr	r3, [r4, #12]
  406e5e:	60c3      	str	r3, [r0, #12]
  406e60:	2a24      	cmp	r2, #36	; 0x24
  406e62:	d02c      	beq.n	406ebe <_realloc_r+0x332>
  406e64:	f100 0310 	add.w	r3, r0, #16
  406e68:	f104 0210 	add.w	r2, r4, #16
  406e6c:	e768      	b.n	406d40 <_realloc_r+0x1b4>
  406e6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406e72:	f022 0203 	bic.w	r2, r2, #3
  406e76:	4415      	add	r5, r2
  406e78:	e71c      	b.n	406cb4 <_realloc_r+0x128>
  406e7a:	4621      	mov	r1, r4
  406e7c:	4638      	mov	r0, r7
  406e7e:	4675      	mov	r5, lr
  406e80:	463c      	mov	r4, r7
  406e82:	f7ff fe0b 	bl	406a9c <memmove>
  406e86:	4657      	mov	r7, sl
  406e88:	f8da 3004 	ldr.w	r3, [sl, #4]
  406e8c:	e712      	b.n	406cb4 <_realloc_r+0x128>
  406e8e:	463a      	mov	r2, r7
  406e90:	e705      	b.n	406c9e <_realloc_r+0x112>
  406e92:	4621      	mov	r1, r4
  406e94:	4638      	mov	r0, r7
  406e96:	461d      	mov	r5, r3
  406e98:	463c      	mov	r4, r7
  406e9a:	f7ff fdff 	bl	406a9c <memmove>
  406e9e:	4657      	mov	r7, sl
  406ea0:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ea4:	e706      	b.n	406cb4 <_realloc_r+0x128>
  406ea6:	68a3      	ldr	r3, [r4, #8]
  406ea8:	f8ca 3010 	str.w	r3, [sl, #16]
  406eac:	68e3      	ldr	r3, [r4, #12]
  406eae:	f8ca 3014 	str.w	r3, [sl, #20]
  406eb2:	2a24      	cmp	r2, #36	; 0x24
  406eb4:	d018      	beq.n	406ee8 <_realloc_r+0x35c>
  406eb6:	3410      	adds	r4, #16
  406eb8:	f10a 0318 	add.w	r3, sl, #24
  406ebc:	e76e      	b.n	406d9c <_realloc_r+0x210>
  406ebe:	6923      	ldr	r3, [r4, #16]
  406ec0:	6103      	str	r3, [r0, #16]
  406ec2:	6963      	ldr	r3, [r4, #20]
  406ec4:	6143      	str	r3, [r0, #20]
  406ec6:	f104 0218 	add.w	r2, r4, #24
  406eca:	f100 0318 	add.w	r3, r0, #24
  406ece:	e737      	b.n	406d40 <_realloc_r+0x1b4>
  406ed0:	68a1      	ldr	r1, [r4, #8]
  406ed2:	f8ca 1010 	str.w	r1, [sl, #16]
  406ed6:	68e1      	ldr	r1, [r4, #12]
  406ed8:	f8ca 1014 	str.w	r1, [sl, #20]
  406edc:	2a24      	cmp	r2, #36	; 0x24
  406ede:	d00f      	beq.n	406f00 <_realloc_r+0x374>
  406ee0:	3410      	adds	r4, #16
  406ee2:	f10a 0218 	add.w	r2, sl, #24
  406ee6:	e6da      	b.n	406c9e <_realloc_r+0x112>
  406ee8:	6923      	ldr	r3, [r4, #16]
  406eea:	f8ca 3018 	str.w	r3, [sl, #24]
  406eee:	6963      	ldr	r3, [r4, #20]
  406ef0:	f8ca 301c 	str.w	r3, [sl, #28]
  406ef4:	3418      	adds	r4, #24
  406ef6:	f10a 0320 	add.w	r3, sl, #32
  406efa:	e74f      	b.n	406d9c <_realloc_r+0x210>
  406efc:	463b      	mov	r3, r7
  406efe:	e790      	b.n	406e22 <_realloc_r+0x296>
  406f00:	6922      	ldr	r2, [r4, #16]
  406f02:	f8ca 2018 	str.w	r2, [sl, #24]
  406f06:	6962      	ldr	r2, [r4, #20]
  406f08:	f8ca 201c 	str.w	r2, [sl, #28]
  406f0c:	3418      	adds	r4, #24
  406f0e:	f10a 0220 	add.w	r2, sl, #32
  406f12:	e6c4      	b.n	406c9e <_realloc_r+0x112>
  406f14:	4621      	mov	r1, r4
  406f16:	4638      	mov	r0, r7
  406f18:	f8cd c004 	str.w	ip, [sp, #4]
  406f1c:	f7ff fdbe 	bl	406a9c <memmove>
  406f20:	f8dd c004 	ldr.w	ip, [sp, #4]
  406f24:	e783      	b.n	406e2e <_realloc_r+0x2a2>
  406f26:	68a3      	ldr	r3, [r4, #8]
  406f28:	f8ca 3010 	str.w	r3, [sl, #16]
  406f2c:	68e3      	ldr	r3, [r4, #12]
  406f2e:	f8ca 3014 	str.w	r3, [sl, #20]
  406f32:	2a24      	cmp	r2, #36	; 0x24
  406f34:	d003      	beq.n	406f3e <_realloc_r+0x3b2>
  406f36:	3410      	adds	r4, #16
  406f38:	f10a 0318 	add.w	r3, sl, #24
  406f3c:	e771      	b.n	406e22 <_realloc_r+0x296>
  406f3e:	6923      	ldr	r3, [r4, #16]
  406f40:	f8ca 3018 	str.w	r3, [sl, #24]
  406f44:	6963      	ldr	r3, [r4, #20]
  406f46:	f8ca 301c 	str.w	r3, [sl, #28]
  406f4a:	3418      	adds	r4, #24
  406f4c:	f10a 0320 	add.w	r3, sl, #32
  406f50:	e767      	b.n	406e22 <_realloc_r+0x296>
  406f52:	bf00      	nop
  406f54:	2000057c 	.word	0x2000057c

00406f58 <__fpclassifyd>:
  406f58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406f5c:	b410      	push	{r4}
  406f5e:	d008      	beq.n	406f72 <__fpclassifyd+0x1a>
  406f60:	4a0f      	ldr	r2, [pc, #60]	; (406fa0 <__fpclassifyd+0x48>)
  406f62:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  406f66:	4294      	cmp	r4, r2
  406f68:	d80a      	bhi.n	406f80 <__fpclassifyd+0x28>
  406f6a:	2004      	movs	r0, #4
  406f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406f70:	4770      	bx	lr
  406f72:	2800      	cmp	r0, #0
  406f74:	bf0c      	ite	eq
  406f76:	2002      	moveq	r0, #2
  406f78:	2003      	movne	r0, #3
  406f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  406f7e:	4770      	bx	lr
  406f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  406f84:	d201      	bcs.n	406f8a <__fpclassifyd+0x32>
  406f86:	2003      	movs	r0, #3
  406f88:	e7f7      	b.n	406f7a <__fpclassifyd+0x22>
  406f8a:	4a06      	ldr	r2, [pc, #24]	; (406fa4 <__fpclassifyd+0x4c>)
  406f8c:	4293      	cmp	r3, r2
  406f8e:	d001      	beq.n	406f94 <__fpclassifyd+0x3c>
  406f90:	2000      	movs	r0, #0
  406f92:	e7f2      	b.n	406f7a <__fpclassifyd+0x22>
  406f94:	f1d0 0001 	rsbs	r0, r0, #1
  406f98:	bf38      	it	cc
  406f9a:	2000      	movcc	r0, #0
  406f9c:	e7ed      	b.n	406f7a <__fpclassifyd+0x22>
  406f9e:	bf00      	nop
  406fa0:	7fdfffff 	.word	0x7fdfffff
  406fa4:	7ff00000 	.word	0x7ff00000

00406fa8 <_sbrk_r>:
  406fa8:	b538      	push	{r3, r4, r5, lr}
  406faa:	4c07      	ldr	r4, [pc, #28]	; (406fc8 <_sbrk_r+0x20>)
  406fac:	2300      	movs	r3, #0
  406fae:	4605      	mov	r5, r0
  406fb0:	4608      	mov	r0, r1
  406fb2:	6023      	str	r3, [r4, #0]
  406fb4:	f7fc f8a0 	bl	4030f8 <_sbrk>
  406fb8:	1c43      	adds	r3, r0, #1
  406fba:	d000      	beq.n	406fbe <_sbrk_r+0x16>
  406fbc:	bd38      	pop	{r3, r4, r5, pc}
  406fbe:	6823      	ldr	r3, [r4, #0]
  406fc0:	2b00      	cmp	r3, #0
  406fc2:	d0fb      	beq.n	406fbc <_sbrk_r+0x14>
  406fc4:	602b      	str	r3, [r5, #0]
  406fc6:	bd38      	pop	{r3, r4, r5, pc}
  406fc8:	2000c7bc 	.word	0x2000c7bc

00406fcc <__sccl>:
  406fcc:	b470      	push	{r4, r5, r6}
  406fce:	780c      	ldrb	r4, [r1, #0]
  406fd0:	2c5e      	cmp	r4, #94	; 0x5e
  406fd2:	d02e      	beq.n	407032 <__sccl+0x66>
  406fd4:	2200      	movs	r2, #0
  406fd6:	1c4d      	adds	r5, r1, #1
  406fd8:	4616      	mov	r6, r2
  406fda:	2300      	movs	r3, #0
  406fdc:	54c2      	strb	r2, [r0, r3]
  406fde:	3301      	adds	r3, #1
  406fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  406fe4:	d1fa      	bne.n	406fdc <__sccl+0x10>
  406fe6:	b184      	cbz	r4, 40700a <__sccl+0x3e>
  406fe8:	f086 0201 	eor.w	r2, r6, #1
  406fec:	5502      	strb	r2, [r0, r4]
  406fee:	1c6e      	adds	r6, r5, #1
  406ff0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  406ff4:	2b2d      	cmp	r3, #45	; 0x2d
  406ff6:	d00e      	beq.n	407016 <__sccl+0x4a>
  406ff8:	2b5d      	cmp	r3, #93	; 0x5d
  406ffa:	d009      	beq.n	407010 <__sccl+0x44>
  406ffc:	b113      	cbz	r3, 407004 <__sccl+0x38>
  406ffe:	461c      	mov	r4, r3
  407000:	4635      	mov	r5, r6
  407002:	e7f3      	b.n	406fec <__sccl+0x20>
  407004:	4628      	mov	r0, r5
  407006:	bc70      	pop	{r4, r5, r6}
  407008:	4770      	bx	lr
  40700a:	1e68      	subs	r0, r5, #1
  40700c:	bc70      	pop	{r4, r5, r6}
  40700e:	4770      	bx	lr
  407010:	4630      	mov	r0, r6
  407012:	bc70      	pop	{r4, r5, r6}
  407014:	4770      	bx	lr
  407016:	7869      	ldrb	r1, [r5, #1]
  407018:	295d      	cmp	r1, #93	; 0x5d
  40701a:	d0f0      	beq.n	406ffe <__sccl+0x32>
  40701c:	428c      	cmp	r4, r1
  40701e:	dcee      	bgt.n	406ffe <__sccl+0x32>
  407020:	3502      	adds	r5, #2
  407022:	1903      	adds	r3, r0, r4
  407024:	3401      	adds	r4, #1
  407026:	42a1      	cmp	r1, r4
  407028:	f803 2f01 	strb.w	r2, [r3, #1]!
  40702c:	dcfa      	bgt.n	407024 <__sccl+0x58>
  40702e:	3602      	adds	r6, #2
  407030:	e7de      	b.n	406ff0 <__sccl+0x24>
  407032:	2201      	movs	r2, #1
  407034:	784c      	ldrb	r4, [r1, #1]
  407036:	4616      	mov	r6, r2
  407038:	1c8d      	adds	r5, r1, #2
  40703a:	e7ce      	b.n	406fda <__sccl+0xe>

0040703c <nanf>:
  40703c:	4800      	ldr	r0, [pc, #0]	; (407040 <nanf+0x4>)
  40703e:	4770      	bx	lr
  407040:	7fc00000 	.word	0x7fc00000

00407044 <sprintf>:
  407044:	b40e      	push	{r1, r2, r3}
  407046:	b5f0      	push	{r4, r5, r6, r7, lr}
  407048:	b09c      	sub	sp, #112	; 0x70
  40704a:	ab21      	add	r3, sp, #132	; 0x84
  40704c:	490f      	ldr	r1, [pc, #60]	; (40708c <sprintf+0x48>)
  40704e:	f853 2b04 	ldr.w	r2, [r3], #4
  407052:	9301      	str	r3, [sp, #4]
  407054:	4605      	mov	r5, r0
  407056:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40705a:	6808      	ldr	r0, [r1, #0]
  40705c:	9502      	str	r5, [sp, #8]
  40705e:	f44f 7702 	mov.w	r7, #520	; 0x208
  407062:	f64f 76ff 	movw	r6, #65535	; 0xffff
  407066:	a902      	add	r1, sp, #8
  407068:	9506      	str	r5, [sp, #24]
  40706a:	f8ad 7014 	strh.w	r7, [sp, #20]
  40706e:	9404      	str	r4, [sp, #16]
  407070:	9407      	str	r4, [sp, #28]
  407072:	f8ad 6016 	strh.w	r6, [sp, #22]
  407076:	f001 fb19 	bl	4086ac <_svfprintf_r>
  40707a:	9b02      	ldr	r3, [sp, #8]
  40707c:	2200      	movs	r2, #0
  40707e:	701a      	strb	r2, [r3, #0]
  407080:	b01c      	add	sp, #112	; 0x70
  407082:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  407086:	b003      	add	sp, #12
  407088:	4770      	bx	lr
  40708a:	bf00      	nop
  40708c:	20000518 	.word	0x20000518

00407090 <sulp>:
  407090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407094:	460d      	mov	r5, r1
  407096:	4690      	mov	r8, r2
  407098:	f004 fd6a 	bl	40bb70 <__ulp>
  40709c:	4606      	mov	r6, r0
  40709e:	460f      	mov	r7, r1
  4070a0:	f1b8 0f00 	cmp.w	r8, #0
  4070a4:	d00f      	beq.n	4070c6 <sulp+0x36>
  4070a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
  4070aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  4070ae:	2b00      	cmp	r3, #0
  4070b0:	dd09      	ble.n	4070c6 <sulp+0x36>
  4070b2:	051c      	lsls	r4, r3, #20
  4070b4:	f104 537f 	add.w	r3, r4, #1069547520	; 0x3fc00000
  4070b8:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
  4070bc:	2200      	movs	r2, #0
  4070be:	f005 f913 	bl	40c2e8 <__aeabi_dmul>
  4070c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070c6:	4630      	mov	r0, r6
  4070c8:	4639      	mov	r1, r7
  4070ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4070ce:	bf00      	nop

004070d0 <_strtod_r>:
  4070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4070d4:	b09f      	sub	sp, #124	; 0x7c
  4070d6:	460d      	mov	r5, r1
  4070d8:	9119      	str	r1, [sp, #100]	; 0x64
  4070da:	4683      	mov	fp, r0
  4070dc:	9205      	str	r2, [sp, #20]
  4070de:	2000      	movs	r0, #0
  4070e0:	460a      	mov	r2, r1
  4070e2:	2100      	movs	r1, #0
  4070e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4070e8:	2300      	movs	r3, #0
  4070ea:	931a      	str	r3, [sp, #104]	; 0x68
  4070ec:	4616      	mov	r6, r2
  4070ee:	f812 4b01 	ldrb.w	r4, [r2], #1
  4070f2:	2c2d      	cmp	r4, #45	; 0x2d
  4070f4:	f200 8158 	bhi.w	4073a8 <_strtod_r+0x2d8>
  4070f8:	e8df f014 	tbh	[pc, r4, lsl #1]
  4070fc:	01560039 	.word	0x01560039
  407100:	01560156 	.word	0x01560156
  407104:	01560156 	.word	0x01560156
  407108:	01560156 	.word	0x01560156
  40710c:	007d0156 	.word	0x007d0156
  407110:	007d007d 	.word	0x007d007d
  407114:	007d007d 	.word	0x007d007d
  407118:	01560156 	.word	0x01560156
  40711c:	01560156 	.word	0x01560156
  407120:	01560156 	.word	0x01560156
  407124:	01560156 	.word	0x01560156
  407128:	01560156 	.word	0x01560156
  40712c:	01560156 	.word	0x01560156
  407130:	01560156 	.word	0x01560156
  407134:	01560156 	.word	0x01560156
  407138:	01560156 	.word	0x01560156
  40713c:	0156007d 	.word	0x0156007d
  407140:	01560156 	.word	0x01560156
  407144:	01560156 	.word	0x01560156
  407148:	01560156 	.word	0x01560156
  40714c:	01560156 	.word	0x01560156
  407150:	004d0156 	.word	0x004d0156
  407154:	007f0156 	.word	0x007f0156
  407158:	2300      	movs	r3, #0
  40715a:	2101      	movs	r1, #1
  40715c:	469a      	mov	sl, r3
  40715e:	910b      	str	r1, [sp, #44]	; 0x2c
  407160:	2800      	cmp	r0, #0
  407162:	f040 8151 	bne.w	407408 <_strtod_r+0x338>
  407166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407168:	2a00      	cmp	r2, #0
  40716a:	f040 814d 	bne.w	407408 <_strtod_r+0x338>
  40716e:	2000      	movs	r0, #0
  407170:	f04f 0800 	mov.w	r8, #0
  407174:	f04f 0900 	mov.w	r9, #0
  407178:	9519      	str	r5, [sp, #100]	; 0x64
  40717a:	9007      	str	r0, [sp, #28]
  40717c:	9805      	ldr	r0, [sp, #20]
  40717e:	b108      	cbz	r0, 407184 <_strtod_r+0xb4>
  407180:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407182:	6003      	str	r3, [r0, #0]
  407184:	9907      	ldr	r1, [sp, #28]
  407186:	2900      	cmp	r1, #0
  407188:	f040 809e 	bne.w	4072c8 <_strtod_r+0x1f8>
  40718c:	4640      	mov	r0, r8
  40718e:	4649      	mov	r1, r9
  407190:	b01f      	add	sp, #124	; 0x7c
  407192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407196:	2300      	movs	r3, #0
  407198:	9307      	str	r3, [sp, #28]
  40719a:	1c73      	adds	r3, r6, #1
  40719c:	9319      	str	r3, [sp, #100]	; 0x64
  40719e:	7874      	ldrb	r4, [r6, #1]
  4071a0:	2c00      	cmp	r4, #0
  4071a2:	d0e4      	beq.n	40716e <_strtod_r+0x9e>
  4071a4:	2c30      	cmp	r4, #48	; 0x30
  4071a6:	461e      	mov	r6, r3
  4071a8:	f000 8103 	beq.w	4073b2 <_strtod_r+0x2e2>
  4071ac:	2300      	movs	r3, #0
  4071ae:	9606      	str	r6, [sp, #24]
  4071b0:	930a      	str	r3, [sp, #40]	; 0x28
  4071b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
  4071b6:	2700      	movs	r7, #0
  4071b8:	2b09      	cmp	r3, #9
  4071ba:	46b9      	mov	r9, r7
  4071bc:	463e      	mov	r6, r7
  4071be:	d81f      	bhi.n	407200 <_strtod_r+0x130>
  4071c0:	9806      	ldr	r0, [sp, #24]
  4071c2:	1c43      	adds	r3, r0, #1
  4071c4:	e00f      	b.n	4071e6 <_strtod_r+0x116>
  4071c6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  4071ca:	eb04 0949 	add.w	r9, r4, r9, lsl #1
  4071ce:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  4071d2:	9319      	str	r3, [sp, #100]	; 0x64
  4071d4:	4698      	mov	r8, r3
  4071d6:	f813 4b01 	ldrb.w	r4, [r3], #1
  4071da:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  4071de:	2a09      	cmp	r2, #9
  4071e0:	f106 0601 	add.w	r6, r6, #1
  4071e4:	d80e      	bhi.n	407204 <_strtod_r+0x134>
  4071e6:	2e08      	cmp	r6, #8
  4071e8:	dded      	ble.n	4071c6 <_strtod_r+0xf6>
  4071ea:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4071ee:	eb04 0747 	add.w	r7, r4, r7, lsl #1
  4071f2:	3f30      	subs	r7, #48	; 0x30
  4071f4:	e7ed      	b.n	4071d2 <_strtod_r+0x102>
  4071f6:	9219      	str	r2, [sp, #100]	; 0x64
  4071f8:	e778      	b.n	4070ec <_strtod_r+0x1c>
  4071fa:	2201      	movs	r2, #1
  4071fc:	9207      	str	r2, [sp, #28]
  4071fe:	e7cc      	b.n	40719a <_strtod_r+0xca>
  407200:	f8dd 8018 	ldr.w	r8, [sp, #24]
  407204:	4658      	mov	r0, fp
  407206:	f7ff f891 	bl	40632c <_localeconv_r>
  40720a:	f8d0 a000 	ldr.w	sl, [r0]
  40720e:	4658      	mov	r0, fp
  407210:	f7ff f88c 	bl	40632c <_localeconv_r>
  407214:	6800      	ldr	r0, [r0, #0]
  407216:	f7fc fce7 	bl	403be8 <strlen>
  40721a:	4651      	mov	r1, sl
  40721c:	4602      	mov	r2, r0
  40721e:	4640      	mov	r0, r8
  407220:	f7fc fd12 	bl	403c48 <strncmp>
  407224:	4680      	mov	r8, r0
  407226:	2800      	cmp	r0, #0
  407228:	f000 8146 	beq.w	4074b8 <_strtod_r+0x3e8>
  40722c:	2000      	movs	r0, #0
  40722e:	4603      	mov	r3, r0
  407230:	900b      	str	r0, [sp, #44]	; 0x2c
  407232:	46b2      	mov	sl, r6
  407234:	f024 0220 	bic.w	r2, r4, #32
  407238:	2a45      	cmp	r2, #69	; 0x45
  40723a:	f000 80e1 	beq.w	407400 <_strtod_r+0x330>
  40723e:	2100      	movs	r1, #0
  407240:	f1ba 0f00 	cmp.w	sl, #0
  407244:	d054      	beq.n	4072f0 <_strtod_r+0x220>
  407246:	1acb      	subs	r3, r1, r3
  407248:	4648      	mov	r0, r9
  40724a:	9308      	str	r3, [sp, #32]
  40724c:	f004 ffd6 	bl	40c1fc <__aeabi_ui2d>
  407250:	f1ba 0f10 	cmp.w	sl, #16
  407254:	bfb4      	ite	lt
  407256:	46d0      	movlt	r8, sl
  407258:	f04f 0810 	movge.w	r8, #16
  40725c:	2e00      	cmp	r6, #0
  40725e:	bf08      	it	eq
  407260:	4656      	moveq	r6, sl
  407262:	f1b8 0f09 	cmp.w	r8, #9
  407266:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40726a:	dd13      	ble.n	407294 <_strtod_r+0x1c4>
  40726c:	4ba0      	ldr	r3, [pc, #640]	; (4074f0 <_strtod_r+0x420>)
  40726e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  407272:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
  407276:	f005 f837 	bl	40c2e8 <__aeabi_dmul>
  40727a:	4604      	mov	r4, r0
  40727c:	4638      	mov	r0, r7
  40727e:	460d      	mov	r5, r1
  407280:	f004 ffbc 	bl	40c1fc <__aeabi_ui2d>
  407284:	4602      	mov	r2, r0
  407286:	460b      	mov	r3, r1
  407288:	4620      	mov	r0, r4
  40728a:	4629      	mov	r1, r5
  40728c:	f004 fe7a 	bl	40bf84 <__adddf3>
  407290:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407294:	f1ba 0f0f 	cmp.w	sl, #15
  407298:	f300 812c 	bgt.w	4074f4 <_strtod_r+0x424>
  40729c:	9908      	ldr	r1, [sp, #32]
  40729e:	2900      	cmp	r1, #0
  4072a0:	f000 80ab 	beq.w	4073fa <_strtod_r+0x32a>
  4072a4:	f340 8580 	ble.w	407da8 <_strtod_r+0xcd8>
  4072a8:	9a08      	ldr	r2, [sp, #32]
  4072aa:	2a16      	cmp	r2, #22
  4072ac:	f300 84ef 	bgt.w	407c8e <_strtod_r+0xbbe>
  4072b0:	4b8f      	ldr	r3, [pc, #572]	; (4074f0 <_strtod_r+0x420>)
  4072b2:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
  4072b6:	e9da 0100 	ldrd	r0, r1, [sl]
  4072ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4072be:	f005 f813 	bl	40c2e8 <__aeabi_dmul>
  4072c2:	4680      	mov	r8, r0
  4072c4:	4689      	mov	r9, r1
  4072c6:	e759      	b.n	40717c <_strtod_r+0xac>
  4072c8:	4640      	mov	r0, r8
  4072ca:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  4072ce:	b01f      	add	sp, #124	; 0x7c
  4072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072d4:	4633      	mov	r3, r6
  4072d6:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  4072da:	2a08      	cmp	r2, #8
  4072dc:	f240 833c 	bls.w	407958 <_strtod_r+0x888>
  4072e0:	f024 0220 	bic.w	r2, r4, #32
  4072e4:	2a45      	cmp	r2, #69	; 0x45
  4072e6:	4618      	mov	r0, r3
  4072e8:	f43f af36 	beq.w	407158 <_strtod_r+0x88>
  4072ec:	2101      	movs	r1, #1
  4072ee:	910b      	str	r1, [sp, #44]	; 0x2c
  4072f0:	2800      	cmp	r0, #0
  4072f2:	d171      	bne.n	4073d8 <_strtod_r+0x308>
  4072f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072f6:	2b00      	cmp	r3, #0
  4072f8:	d16e      	bne.n	4073d8 <_strtod_r+0x308>
  4072fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4072fc:	2800      	cmp	r0, #0
  4072fe:	f47f af36 	bne.w	40716e <_strtod_r+0x9e>
  407302:	3c49      	subs	r4, #73	; 0x49
  407304:	2c25      	cmp	r4, #37	; 0x25
  407306:	f63f af32 	bhi.w	40716e <_strtod_r+0x9e>
  40730a:	a101      	add	r1, pc, #4	; (adr r1, 407310 <_strtod_r+0x240>)
  40730c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
  407310:	004079d3 	.word	0x004079d3
  407314:	0040716f 	.word	0x0040716f
  407318:	0040716f 	.word	0x0040716f
  40731c:	0040716f 	.word	0x0040716f
  407320:	0040716f 	.word	0x0040716f
  407324:	0040799b 	.word	0x0040799b
  407328:	0040716f 	.word	0x0040716f
  40732c:	0040716f 	.word	0x0040716f
  407330:	0040716f 	.word	0x0040716f
  407334:	0040716f 	.word	0x0040716f
  407338:	0040716f 	.word	0x0040716f
  40733c:	0040716f 	.word	0x0040716f
  407340:	0040716f 	.word	0x0040716f
  407344:	0040716f 	.word	0x0040716f
  407348:	0040716f 	.word	0x0040716f
  40734c:	0040716f 	.word	0x0040716f
  407350:	0040716f 	.word	0x0040716f
  407354:	0040716f 	.word	0x0040716f
  407358:	0040716f 	.word	0x0040716f
  40735c:	0040716f 	.word	0x0040716f
  407360:	0040716f 	.word	0x0040716f
  407364:	0040716f 	.word	0x0040716f
  407368:	0040716f 	.word	0x0040716f
  40736c:	0040716f 	.word	0x0040716f
  407370:	0040716f 	.word	0x0040716f
  407374:	0040716f 	.word	0x0040716f
  407378:	0040716f 	.word	0x0040716f
  40737c:	0040716f 	.word	0x0040716f
  407380:	0040716f 	.word	0x0040716f
  407384:	0040716f 	.word	0x0040716f
  407388:	0040716f 	.word	0x0040716f
  40738c:	0040716f 	.word	0x0040716f
  407390:	004079d3 	.word	0x004079d3
  407394:	0040716f 	.word	0x0040716f
  407398:	0040716f 	.word	0x0040716f
  40739c:	0040716f 	.word	0x0040716f
  4073a0:	0040716f 	.word	0x0040716f
  4073a4:	0040799b 	.word	0x0040799b
  4073a8:	2000      	movs	r0, #0
  4073aa:	2c30      	cmp	r4, #48	; 0x30
  4073ac:	9007      	str	r0, [sp, #28]
  4073ae:	f47f aefd 	bne.w	4071ac <_strtod_r+0xdc>
  4073b2:	7873      	ldrb	r3, [r6, #1]
  4073b4:	2b58      	cmp	r3, #88	; 0x58
  4073b6:	f000 8336 	beq.w	407a26 <_strtod_r+0x956>
  4073ba:	2b78      	cmp	r3, #120	; 0x78
  4073bc:	f000 8333 	beq.w	407a26 <_strtod_r+0x956>
  4073c0:	3601      	adds	r6, #1
  4073c2:	9619      	str	r6, [sp, #100]	; 0x64
  4073c4:	4633      	mov	r3, r6
  4073c6:	f816 4b01 	ldrb.w	r4, [r6], #1
  4073ca:	2c30      	cmp	r4, #48	; 0x30
  4073cc:	d0f9      	beq.n	4073c2 <_strtod_r+0x2f2>
  4073ce:	b11c      	cbz	r4, 4073d8 <_strtod_r+0x308>
  4073d0:	9306      	str	r3, [sp, #24]
  4073d2:	2301      	movs	r3, #1
  4073d4:	930a      	str	r3, [sp, #40]	; 0x28
  4073d6:	e6ec      	b.n	4071b2 <_strtod_r+0xe2>
  4073d8:	f04f 0800 	mov.w	r8, #0
  4073dc:	f04f 0900 	mov.w	r9, #0
  4073e0:	e6cc      	b.n	40717c <_strtod_r+0xac>
  4073e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4073e6:	f04f 30ff 	mov.w	r0, #4294967295
  4073ea:	9303      	str	r3, [sp, #12]
  4073ec:	9002      	str	r0, [sp, #8]
  4073ee:	0722      	lsls	r2, r4, #28
  4073f0:	bf42      	ittt	mi
  4073f2:	9903      	ldrmi	r1, [sp, #12]
  4073f4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
  4073f8:	9103      	strmi	r1, [sp, #12]
  4073fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4073fe:	e6bd      	b.n	40717c <_strtod_r+0xac>
  407400:	f1ba 0f00 	cmp.w	sl, #0
  407404:	f43f aeac 	beq.w	407160 <_strtod_r+0x90>
  407408:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40740a:	1c6a      	adds	r2, r5, #1
  40740c:	9219      	str	r2, [sp, #100]	; 0x64
  40740e:	786c      	ldrb	r4, [r5, #1]
  407410:	2c2b      	cmp	r4, #43	; 0x2b
  407412:	f000 824b 	beq.w	4078ac <_strtod_r+0x7dc>
  407416:	2c2d      	cmp	r4, #45	; 0x2d
  407418:	f040 8245 	bne.w	4078a6 <_strtod_r+0x7d6>
  40741c:	2101      	movs	r1, #1
  40741e:	9108      	str	r1, [sp, #32]
  407420:	1caa      	adds	r2, r5, #2
  407422:	9219      	str	r2, [sp, #100]	; 0x64
  407424:	78ac      	ldrb	r4, [r5, #2]
  407426:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  40742a:	2a09      	cmp	r2, #9
  40742c:	f200 81e5 	bhi.w	4077fa <_strtod_r+0x72a>
  407430:	2c30      	cmp	r4, #48	; 0x30
  407432:	d106      	bne.n	407442 <_strtod_r+0x372>
  407434:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407436:	3201      	adds	r2, #1
  407438:	9219      	str	r2, [sp, #100]	; 0x64
  40743a:	f812 4b01 	ldrb.w	r4, [r2], #1
  40743e:	2c30      	cmp	r4, #48	; 0x30
  407440:	d0fa      	beq.n	407438 <_strtod_r+0x368>
  407442:	f1a4 0231 	sub.w	r2, r4, #49	; 0x31
  407446:	2a08      	cmp	r2, #8
  407448:	f63f aef9 	bhi.w	40723e <_strtod_r+0x16e>
  40744c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40744e:	920e      	str	r2, [sp, #56]	; 0x38
  407450:	f102 0801 	add.w	r8, r2, #1
  407454:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  407458:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
  40745c:	7854      	ldrb	r4, [r2, #1]
  40745e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  407462:	2a09      	cmp	r2, #9
  407464:	d812      	bhi.n	40748c <_strtod_r+0x3bc>
  407466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407468:	f102 0c02 	add.w	ip, r2, #2
  40746c:	4662      	mov	r2, ip
  40746e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  407472:	9219      	str	r2, [sp, #100]	; 0x64
  407474:	eb04 0141 	add.w	r1, r4, r1, lsl #1
  407478:	4690      	mov	r8, r2
  40747a:	f812 4b01 	ldrb.w	r4, [r2], #1
  40747e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
  407482:	f1bc 0f09 	cmp.w	ip, #9
  407486:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
  40748a:	d9f0      	bls.n	40746e <_strtod_r+0x39e>
  40748c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40748e:	ebc2 0808 	rsb	r8, r2, r8
  407492:	f1b8 0f08 	cmp.w	r8, #8
  407496:	f300 83f2 	bgt.w	407c7e <_strtod_r+0xbae>
  40749a:	f644 621f 	movw	r2, #19999	; 0x4e1f
  40749e:	4291      	cmp	r1, r2
  4074a0:	bfa8      	it	ge
  4074a2:	4611      	movge	r1, r2
  4074a4:	9a08      	ldr	r2, [sp, #32]
  4074a6:	2a00      	cmp	r2, #0
  4074a8:	f43f aeca 	beq.w	407240 <_strtod_r+0x170>
  4074ac:	4249      	negs	r1, r1
  4074ae:	f1ba 0f00 	cmp.w	sl, #0
  4074b2:	f47f aec8 	bne.w	407246 <_strtod_r+0x176>
  4074b6:	e71b      	b.n	4072f0 <_strtod_r+0x220>
  4074b8:	4658      	mov	r0, fp
  4074ba:	9c19      	ldr	r4, [sp, #100]	; 0x64
  4074bc:	f7fe ff36 	bl	40632c <_localeconv_r>
  4074c0:	6800      	ldr	r0, [r0, #0]
  4074c2:	f7fc fb91 	bl	403be8 <strlen>
  4074c6:	1823      	adds	r3, r4, r0
  4074c8:	9319      	str	r3, [sp, #100]	; 0x64
  4074ca:	5c24      	ldrb	r4, [r4, r0]
  4074cc:	2e00      	cmp	r6, #0
  4074ce:	f040 81c3 	bne.w	407858 <_strtod_r+0x788>
  4074d2:	2c30      	cmp	r4, #48	; 0x30
  4074d4:	f47f aefe 	bne.w	4072d4 <_strtod_r+0x204>
  4074d8:	461a      	mov	r2, r3
  4074da:	4633      	mov	r3, r6
  4074dc:	e000      	b.n	4074e0 <_strtod_r+0x410>
  4074de:	460a      	mov	r2, r1
  4074e0:	1c51      	adds	r1, r2, #1
  4074e2:	9119      	str	r1, [sp, #100]	; 0x64
  4074e4:	7854      	ldrb	r4, [r2, #1]
  4074e6:	2c30      	cmp	r4, #48	; 0x30
  4074e8:	f103 0301 	add.w	r3, r3, #1
  4074ec:	d0f7      	beq.n	4074de <_strtod_r+0x40e>
  4074ee:	e6f2      	b.n	4072d6 <_strtod_r+0x206>
  4074f0:	0040d408 	.word	0x0040d408
  4074f4:	9908      	ldr	r1, [sp, #32]
  4074f6:	ebc8 080a 	rsb	r8, r8, sl
  4074fa:	4488      	add	r8, r1
  4074fc:	f1b8 0f00 	cmp.w	r8, #0
  407500:	f340 8369 	ble.w	407bd6 <_strtod_r+0xb06>
  407504:	f018 030f 	ands.w	r3, r8, #15
  407508:	d00a      	beq.n	407520 <_strtod_r+0x450>
  40750a:	49a7      	ldr	r1, [pc, #668]	; (4077a8 <_strtod_r+0x6d8>)
  40750c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407510:	e9d1 0100 	ldrd	r0, r1, [r1]
  407514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407518:	f004 fee6 	bl	40c2e8 <__aeabi_dmul>
  40751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407520:	f038 040f 	bics.w	r4, r8, #15
  407524:	f040 81c8 	bne.w	4078b8 <_strtod_r+0x7e8>
  407528:	2200      	movs	r2, #0
  40752a:	920a      	str	r2, [sp, #40]	; 0x28
  40752c:	f8cd 9000 	str.w	r9, [sp]
  407530:	9906      	ldr	r1, [sp, #24]
  407532:	4632      	mov	r2, r6
  407534:	4653      	mov	r3, sl
  407536:	4658      	mov	r0, fp
  407538:	f004 f89e 	bl	40b678 <__s2b>
  40753c:	900b      	str	r0, [sp, #44]	; 0x2c
  40753e:	2800      	cmp	r0, #0
  407540:	f000 82d5 	beq.w	407aee <_strtod_r+0xa1e>
  407544:	9908      	ldr	r1, [sp, #32]
  407546:	2200      	movs	r2, #0
  407548:	2900      	cmp	r1, #0
  40754a:	f1c1 0300 	rsb	r3, r1, #0
  40754e:	bfa8      	it	ge
  407550:	4613      	movge	r3, r2
  407552:	930e      	str	r3, [sp, #56]	; 0x38
  407554:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  407558:	9206      	str	r2, [sp, #24]
  40755a:	930f      	str	r3, [sp, #60]	; 0x3c
  40755c:	4617      	mov	r7, r2
  40755e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  407560:	4658      	mov	r0, fp
  407562:	6851      	ldr	r1, [r2, #4]
  407564:	f004 f80c 	bl	40b580 <_Balloc>
  407568:	4606      	mov	r6, r0
  40756a:	2800      	cmp	r0, #0
  40756c:	f000 82cd 	beq.w	407b0a <_strtod_r+0xa3a>
  407570:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407572:	6903      	ldr	r3, [r0, #16]
  407574:	1c9a      	adds	r2, r3, #2
  407576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407578:	0092      	lsls	r2, r2, #2
  40757a:	f103 010c 	add.w	r1, r3, #12
  40757e:	f106 000c 	add.w	r0, r6, #12
  407582:	f7fc f847 	bl	403614 <memcpy>
  407586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40758a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40758e:	a81b      	add	r0, sp, #108	; 0x6c
  407590:	a91c      	add	r1, sp, #112	; 0x70
  407592:	e88d 0003 	stmia.w	sp, {r0, r1}
  407596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  40759a:	4658      	mov	r0, fp
  40759c:	f004 fb62 	bl	40bc64 <__d2b>
  4075a0:	901a      	str	r0, [sp, #104]	; 0x68
  4075a2:	2800      	cmp	r0, #0
  4075a4:	f000 8412 	beq.w	407dcc <_strtod_r+0xcfc>
  4075a8:	4658      	mov	r0, fp
  4075aa:	2101      	movs	r1, #1
  4075ac:	f004 f8fe 	bl	40b7ac <__i2b>
  4075b0:	4607      	mov	r7, r0
  4075b2:	2800      	cmp	r0, #0
  4075b4:	f000 82a9 	beq.w	407b0a <_strtod_r+0xa3a>
  4075b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4075ba:	2b00      	cmp	r3, #0
  4075bc:	f2c0 8110 	blt.w	4077e0 <_strtod_r+0x710>
  4075c0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4075c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4075c6:	4499      	add	r9, r3
  4075c8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4075ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  4075cc:	1a1b      	subs	r3, r3, r0
  4075ce:	4413      	add	r3, r2
  4075d0:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
  4075d4:	428b      	cmp	r3, r1
  4075d6:	f1c2 0a36 	rsb	sl, r2, #54	; 0x36
  4075da:	f280 80da 	bge.w	407792 <_strtod_r+0x6c2>
  4075de:	1aca      	subs	r2, r1, r3
  4075e0:	2a1f      	cmp	r2, #31
  4075e2:	ebc2 0a0a 	rsb	sl, r2, sl
  4075e6:	f300 8100 	bgt.w	4077ea <_strtod_r+0x71a>
  4075ea:	f04f 0801 	mov.w	r8, #1
  4075ee:	2300      	movs	r3, #0
  4075f0:	fa08 f802 	lsl.w	r8, r8, r2
  4075f4:	930c      	str	r3, [sp, #48]	; 0x30
  4075f6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4075f8:	4455      	add	r5, sl
  4075fa:	44ca      	add	sl, r9
  4075fc:	45ca      	cmp	sl, r9
  4075fe:	bfb4      	ite	lt
  407600:	4653      	movlt	r3, sl
  407602:	464b      	movge	r3, r9
  407604:	4405      	add	r5, r0
  407606:	42ab      	cmp	r3, r5
  407608:	bfa8      	it	ge
  40760a:	462b      	movge	r3, r5
  40760c:	2b00      	cmp	r3, #0
  40760e:	dd04      	ble.n	40761a <_strtod_r+0x54a>
  407610:	ebc3 0a0a 	rsb	sl, r3, sl
  407614:	1aed      	subs	r5, r5, r3
  407616:	ebc3 0909 	rsb	r9, r3, r9
  40761a:	990e      	ldr	r1, [sp, #56]	; 0x38
  40761c:	b1b1      	cbz	r1, 40764c <_strtod_r+0x57c>
  40761e:	4639      	mov	r1, r7
  407620:	4658      	mov	r0, fp
  407622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407624:	f004 f96a 	bl	40b8fc <__pow5mult>
  407628:	4607      	mov	r7, r0
  40762a:	2800      	cmp	r0, #0
  40762c:	f000 826d 	beq.w	407b0a <_strtod_r+0xa3a>
  407630:	4658      	mov	r0, fp
  407632:	4639      	mov	r1, r7
  407634:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407636:	f004 f8c3 	bl	40b7c0 <__multiply>
  40763a:	4604      	mov	r4, r0
  40763c:	2800      	cmp	r0, #0
  40763e:	f000 8264 	beq.w	407b0a <_strtod_r+0xa3a>
  407642:	4658      	mov	r0, fp
  407644:	991a      	ldr	r1, [sp, #104]	; 0x68
  407646:	f003 ffc1 	bl	40b5cc <_Bfree>
  40764a:	941a      	str	r4, [sp, #104]	; 0x68
  40764c:	f1ba 0f00 	cmp.w	sl, #0
  407650:	dd08      	ble.n	407664 <_strtod_r+0x594>
  407652:	4652      	mov	r2, sl
  407654:	4658      	mov	r0, fp
  407656:	991a      	ldr	r1, [sp, #104]	; 0x68
  407658:	f004 f99e 	bl	40b998 <__lshift>
  40765c:	901a      	str	r0, [sp, #104]	; 0x68
  40765e:	2800      	cmp	r0, #0
  407660:	f000 83b4 	beq.w	407dcc <_strtod_r+0xcfc>
  407664:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407666:	b142      	cbz	r2, 40767a <_strtod_r+0x5aa>
  407668:	4631      	mov	r1, r6
  40766a:	4658      	mov	r0, fp
  40766c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40766e:	f004 f945 	bl	40b8fc <__pow5mult>
  407672:	4606      	mov	r6, r0
  407674:	2800      	cmp	r0, #0
  407676:	f000 8248 	beq.w	407b0a <_strtod_r+0xa3a>
  40767a:	2d00      	cmp	r5, #0
  40767c:	dd08      	ble.n	407690 <_strtod_r+0x5c0>
  40767e:	4631      	mov	r1, r6
  407680:	462a      	mov	r2, r5
  407682:	4658      	mov	r0, fp
  407684:	f004 f988 	bl	40b998 <__lshift>
  407688:	4606      	mov	r6, r0
  40768a:	2800      	cmp	r0, #0
  40768c:	f000 823d 	beq.w	407b0a <_strtod_r+0xa3a>
  407690:	f1b9 0f00 	cmp.w	r9, #0
  407694:	dd08      	ble.n	4076a8 <_strtod_r+0x5d8>
  407696:	4639      	mov	r1, r7
  407698:	464a      	mov	r2, r9
  40769a:	4658      	mov	r0, fp
  40769c:	f004 f97c 	bl	40b998 <__lshift>
  4076a0:	4607      	mov	r7, r0
  4076a2:	2800      	cmp	r0, #0
  4076a4:	f000 8231 	beq.w	407b0a <_strtod_r+0xa3a>
  4076a8:	4658      	mov	r0, fp
  4076aa:	991a      	ldr	r1, [sp, #104]	; 0x68
  4076ac:	4632      	mov	r2, r6
  4076ae:	f004 f9f5 	bl	40ba9c <__mdiff>
  4076b2:	9006      	str	r0, [sp, #24]
  4076b4:	2800      	cmp	r0, #0
  4076b6:	f000 8228 	beq.w	407b0a <_strtod_r+0xa3a>
  4076ba:	9906      	ldr	r1, [sp, #24]
  4076bc:	2300      	movs	r3, #0
  4076be:	f8d1 a00c 	ldr.w	sl, [r1, #12]
  4076c2:	60cb      	str	r3, [r1, #12]
  4076c4:	4639      	mov	r1, r7
  4076c6:	f004 f9c5 	bl	40ba54 <__mcmp>
  4076ca:	2800      	cmp	r0, #0
  4076cc:	f2c0 83cb 	blt.w	407e66 <_strtod_r+0xd96>
  4076d0:	f000 8388 	beq.w	407de4 <_strtod_r+0xd14>
  4076d4:	9806      	ldr	r0, [sp, #24]
  4076d6:	4639      	mov	r1, r7
  4076d8:	f004 fb22 	bl	40bd20 <__ratio>
  4076dc:	2200      	movs	r2, #0
  4076de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4076e2:	4604      	mov	r4, r0
  4076e4:	460d      	mov	r5, r1
  4076e6:	f005 f87b 	bl	40c7e0 <__aeabi_dcmple>
  4076ea:	2800      	cmp	r0, #0
  4076ec:	d064      	beq.n	4077b8 <_strtod_r+0x6e8>
  4076ee:	f1ba 0f00 	cmp.w	sl, #0
  4076f2:	f000 808e 	beq.w	407812 <_strtod_r+0x742>
  4076f6:	4d2d      	ldr	r5, [pc, #180]	; (4077ac <_strtod_r+0x6dc>)
  4076f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4076fc:	2400      	movs	r4, #0
  4076fe:	4622      	mov	r2, r4
  407700:	462b      	mov	r3, r5
  407702:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  407706:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 4077b4 <_strtod_r+0x6e4>
  40770a:	4b29      	ldr	r3, [pc, #164]	; (4077b0 <_strtod_r+0x6e0>)
  40770c:	ea09 0808 	and.w	r8, r9, r8
  407710:	4598      	cmp	r8, r3
  407712:	f000 81bf 	beq.w	407a94 <_strtod_r+0x9c4>
  407716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407718:	b182      	cbz	r2, 40773c <_strtod_r+0x66c>
  40771a:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
  40771e:	d80d      	bhi.n	40773c <_strtod_r+0x66c>
  407720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  407724:	a31e      	add	r3, pc, #120	; (adr r3, 4077a0 <_strtod_r+0x6d0>)
  407726:	e9d3 2300 	ldrd	r2, r3, [r3]
  40772a:	f005 f859 	bl	40c7e0 <__aeabi_dcmple>
  40772e:	2800      	cmp	r0, #0
  407730:	f040 811b 	bne.w	40796a <_strtod_r+0x89a>
  407734:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
  407738:	ebc8 0503 	rsb	r5, r8, r3
  40773c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407740:	f004 fa16 	bl	40bb70 <__ulp>
  407744:	4602      	mov	r2, r0
  407746:	460b      	mov	r3, r1
  407748:	4620      	mov	r0, r4
  40774a:	4629      	mov	r1, r5
  40774c:	f004 fdcc 	bl	40c2e8 <__aeabi_dmul>
  407750:	4602      	mov	r2, r0
  407752:	460b      	mov	r3, r1
  407754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407758:	f004 fc14 	bl	40bf84 <__adddf3>
  40775c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407760:	9c03      	ldr	r4, [sp, #12]
  407762:	990a      	ldr	r1, [sp, #40]	; 0x28
  407764:	b921      	cbnz	r1, 407770 <_strtod_r+0x6a0>
  407766:	4b13      	ldr	r3, [pc, #76]	; (4077b4 <_strtod_r+0x6e4>)
  407768:	4023      	ands	r3, r4
  40776a:	4598      	cmp	r8, r3
  40776c:	f000 81ed 	beq.w	407b4a <_strtod_r+0xa7a>
  407770:	4658      	mov	r0, fp
  407772:	991a      	ldr	r1, [sp, #104]	; 0x68
  407774:	f003 ff2a 	bl	40b5cc <_Bfree>
  407778:	4658      	mov	r0, fp
  40777a:	4631      	mov	r1, r6
  40777c:	f003 ff26 	bl	40b5cc <_Bfree>
  407780:	4658      	mov	r0, fp
  407782:	4639      	mov	r1, r7
  407784:	f003 ff22 	bl	40b5cc <_Bfree>
  407788:	4658      	mov	r0, fp
  40778a:	9906      	ldr	r1, [sp, #24]
  40778c:	f003 ff1e 	bl	40b5cc <_Bfree>
  407790:	e6e5      	b.n	40755e <_strtod_r+0x48e>
  407792:	2300      	movs	r3, #0
  407794:	930c      	str	r3, [sp, #48]	; 0x30
  407796:	f04f 0801 	mov.w	r8, #1
  40779a:	e72c      	b.n	4075f6 <_strtod_r+0x526>
  40779c:	f3af 8000 	nop.w
  4077a0:	ffc00000 	.word	0xffc00000
  4077a4:	41dfffff 	.word	0x41dfffff
  4077a8:	0040d408 	.word	0x0040d408
  4077ac:	3ff00000 	.word	0x3ff00000
  4077b0:	7fe00000 	.word	0x7fe00000
  4077b4:	7ff00000 	.word	0x7ff00000
  4077b8:	4620      	mov	r0, r4
  4077ba:	4629      	mov	r1, r5
  4077bc:	2200      	movs	r2, #0
  4077be:	4ba8      	ldr	r3, [pc, #672]	; (407a60 <_strtod_r+0x990>)
  4077c0:	f004 fd92 	bl	40c2e8 <__aeabi_dmul>
  4077c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4077c8:	f1ba 0f00 	cmp.w	sl, #0
  4077cc:	d11c      	bne.n	407808 <_strtod_r+0x738>
  4077ce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4077d2:	9010      	str	r0, [sp, #64]	; 0x40
  4077d4:	9111      	str	r1, [sp, #68]	; 0x44
  4077d6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  4077da:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4077de:	e792      	b.n	407706 <_strtod_r+0x636>
  4077e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4077e2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
  4077e6:	1acd      	subs	r5, r1, r3
  4077e8:	e6ee      	b.n	4075c8 <_strtod_r+0x4f8>
  4077ea:	4c9e      	ldr	r4, [pc, #632]	; (407a64 <_strtod_r+0x994>)
  4077ec:	f04f 0801 	mov.w	r8, #1
  4077f0:	1ae4      	subs	r4, r4, r3
  4077f2:	fa08 f404 	lsl.w	r4, r8, r4
  4077f6:	940c      	str	r4, [sp, #48]	; 0x30
  4077f8:	e6fd      	b.n	4075f6 <_strtod_r+0x526>
  4077fa:	9519      	str	r5, [sp, #100]	; 0x64
  4077fc:	2100      	movs	r1, #0
  4077fe:	f1ba 0f00 	cmp.w	sl, #0
  407802:	f47f ad20 	bne.w	407246 <_strtod_r+0x176>
  407806:	e573      	b.n	4072f0 <_strtod_r+0x220>
  407808:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40780c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  407810:	e7e1      	b.n	4077d6 <_strtod_r+0x706>
  407812:	9b02      	ldr	r3, [sp, #8]
  407814:	2b00      	cmp	r3, #0
  407816:	f040 8092 	bne.w	40793e <_strtod_r+0x86e>
  40781a:	9803      	ldr	r0, [sp, #12]
  40781c:	f3c0 0313 	ubfx	r3, r0, #0, #20
  407820:	4681      	mov	r9, r0
  407822:	2b00      	cmp	r3, #0
  407824:	f040 8091 	bne.w	40794a <_strtod_r+0x87a>
  407828:	4620      	mov	r0, r4
  40782a:	4629      	mov	r1, r5
  40782c:	2200      	movs	r2, #0
  40782e:	4b8e      	ldr	r3, [pc, #568]	; (407a68 <_strtod_r+0x998>)
  407830:	f004 ffcc 	bl	40c7cc <__aeabi_dcmplt>
  407834:	2800      	cmp	r0, #0
  407836:	f040 8356 	bne.w	407ee6 <_strtod_r+0xe16>
  40783a:	4620      	mov	r0, r4
  40783c:	4629      	mov	r1, r5
  40783e:	2200      	movs	r2, #0
  407840:	4b87      	ldr	r3, [pc, #540]	; (407a60 <_strtod_r+0x990>)
  407842:	f004 fd51 	bl	40c2e8 <__aeabi_dmul>
  407846:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40784a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40784e:	9016      	str	r0, [sp, #88]	; 0x58
  407850:	9117      	str	r1, [sp, #92]	; 0x5c
  407852:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  407856:	e756      	b.n	407706 <_strtod_r+0x636>
  407858:	4640      	mov	r0, r8
  40785a:	4643      	mov	r3, r8
  40785c:	46b2      	mov	sl, r6
  40785e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  407862:	2a09      	cmp	r2, #9
  407864:	d825      	bhi.n	4078b2 <_strtod_r+0x7e2>
  407866:	9c19      	ldr	r4, [sp, #100]	; 0x64
  407868:	3001      	adds	r0, #1
  40786a:	2a00      	cmp	r2, #0
  40786c:	f000 81af 	beq.w	407bce <_strtod_r+0xafe>
  407870:	2801      	cmp	r0, #1
  407872:	4403      	add	r3, r0
  407874:	f000 81a0 	beq.w	407bb8 <_strtod_r+0xae8>
  407878:	4450      	add	r0, sl
  40787a:	3801      	subs	r0, #1
  40787c:	e006      	b.n	40788c <_strtod_r+0x7bc>
  40787e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  407882:	ea4f 0949 	mov.w	r9, r9, lsl #1
  407886:	4582      	cmp	sl, r0
  407888:	f000 8197 	beq.w	407bba <_strtod_r+0xaea>
  40788c:	f10a 0a01 	add.w	sl, sl, #1
  407890:	f10a 31ff 	add.w	r1, sl, #4294967295
  407894:	2908      	cmp	r1, #8
  407896:	ddf2      	ble.n	40787e <_strtod_r+0x7ae>
  407898:	f1ba 0f10 	cmp.w	sl, #16
  40789c:	bfdc      	itt	le
  40789e:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  4078a2:	007f      	lslle	r7, r7, #1
  4078a4:	e7ef      	b.n	407886 <_strtod_r+0x7b6>
  4078a6:	2200      	movs	r2, #0
  4078a8:	9208      	str	r2, [sp, #32]
  4078aa:	e5bc      	b.n	407426 <_strtod_r+0x356>
  4078ac:	2100      	movs	r1, #0
  4078ae:	9108      	str	r1, [sp, #32]
  4078b0:	e5b6      	b.n	407420 <_strtod_r+0x350>
  4078b2:	2201      	movs	r2, #1
  4078b4:	920b      	str	r2, [sp, #44]	; 0x2c
  4078b6:	e4bd      	b.n	407234 <_strtod_r+0x164>
  4078b8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
  4078bc:	f300 8117 	bgt.w	407aee <_strtod_r+0xa1e>
  4078c0:	1124      	asrs	r4, r4, #4
  4078c2:	2c01      	cmp	r4, #1
  4078c4:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 407a90 <_strtod_r+0x9c0>
  4078c8:	f340 832a 	ble.w	407f20 <_strtod_r+0xe50>
  4078cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4078d0:	4645      	mov	r5, r8
  4078d2:	2700      	movs	r7, #0
  4078d4:	f014 0f01 	tst.w	r4, #1
  4078d8:	f107 0701 	add.w	r7, r7, #1
  4078dc:	ea4f 0464 	mov.w	r4, r4, asr #1
  4078e0:	d003      	beq.n	4078ea <_strtod_r+0x81a>
  4078e2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4078e6:	f004 fcff 	bl	40c2e8 <__aeabi_dmul>
  4078ea:	2c01      	cmp	r4, #1
  4078ec:	f105 0508 	add.w	r5, r5, #8
  4078f0:	dcf0      	bgt.n	4078d4 <_strtod_r+0x804>
  4078f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4078f6:	9b03      	ldr	r3, [sp, #12]
  4078f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
  4078fc:	9303      	str	r3, [sp, #12]
  4078fe:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
  407902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407906:	e9d7 0100 	ldrd	r0, r1, [r7]
  40790a:	f004 fced 	bl	40c2e8 <__aeabi_dmul>
  40790e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407912:	9803      	ldr	r0, [sp, #12]
  407914:	4a55      	ldr	r2, [pc, #340]	; (407a6c <_strtod_r+0x99c>)
  407916:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  40791a:	0d1b      	lsrs	r3, r3, #20
  40791c:	051b      	lsls	r3, r3, #20
  40791e:	4293      	cmp	r3, r2
  407920:	f200 80e5 	bhi.w	407aee <_strtod_r+0xa1e>
  407924:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
  407928:	4293      	cmp	r3, r2
  40792a:	f240 82d5 	bls.w	407ed8 <_strtod_r+0xe08>
  40792e:	4950      	ldr	r1, [pc, #320]	; (407a70 <_strtod_r+0x9a0>)
  407930:	9103      	str	r1, [sp, #12]
  407932:	2200      	movs	r2, #0
  407934:	f04f 33ff 	mov.w	r3, #4294967295
  407938:	920a      	str	r2, [sp, #40]	; 0x28
  40793a:	9302      	str	r3, [sp, #8]
  40793c:	e5f6      	b.n	40752c <_strtod_r+0x45c>
  40793e:	9902      	ldr	r1, [sp, #8]
  407940:	f8dd 900c 	ldr.w	r9, [sp, #12]
  407944:	2901      	cmp	r1, #1
  407946:	f000 81c9 	beq.w	407cdc <_strtod_r+0xc0c>
  40794a:	4947      	ldr	r1, [pc, #284]	; (407a68 <_strtod_r+0x998>)
  40794c:	4d49      	ldr	r5, [pc, #292]	; (407a74 <_strtod_r+0x9a4>)
  40794e:	2000      	movs	r0, #0
  407950:	2400      	movs	r4, #0
  407952:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  407956:	e6d6      	b.n	407706 <_strtod_r+0x636>
  407958:	9919      	ldr	r1, [sp, #100]	; 0x64
  40795a:	9106      	str	r1, [sp, #24]
  40795c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
  407960:	f04f 0a00 	mov.w	sl, #0
  407964:	460c      	mov	r4, r1
  407966:	2001      	movs	r0, #1
  407968:	e77f      	b.n	40786a <_strtod_r+0x79a>
  40796a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40796e:	f004 ff7d 	bl	40c86c <__aeabi_d2uiz>
  407972:	2800      	cmp	r0, #0
  407974:	f000 81ad 	beq.w	407cd2 <_strtod_r+0xc02>
  407978:	f004 fc40 	bl	40c1fc <__aeabi_ui2d>
  40797c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  407980:	f1ba 0f00 	cmp.w	sl, #0
  407984:	f040 81a0 	bne.w	407cc8 <_strtod_r+0xbf8>
  407988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40798a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40798c:	9114      	str	r1, [sp, #80]	; 0x50
  40798e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  407992:	9215      	str	r2, [sp, #84]	; 0x54
  407994:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  407998:	e6cc      	b.n	407734 <_strtod_r+0x664>
  40799a:	4837      	ldr	r0, [pc, #220]	; (407a78 <_strtod_r+0x9a8>)
  40799c:	9919      	ldr	r1, [sp, #100]	; 0x64
  40799e:	e009      	b.n	4079b4 <_strtod_r+0x8e4>
  4079a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4079a4:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  4079a8:	2c19      	cmp	r4, #25
  4079aa:	bf98      	it	ls
  4079ac:	3320      	addls	r3, #32
  4079ae:	4293      	cmp	r3, r2
  4079b0:	f47f abdd 	bne.w	40716e <_strtod_r+0x9e>
  4079b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4079b8:	2a00      	cmp	r2, #0
  4079ba:	d1f1      	bne.n	4079a0 <_strtod_r+0x8d0>
  4079bc:	1c4b      	adds	r3, r1, #1
  4079be:	9319      	str	r3, [sp, #100]	; 0x64
  4079c0:	784b      	ldrb	r3, [r1, #1]
  4079c2:	2b28      	cmp	r3, #40	; 0x28
  4079c4:	f000 82e2 	beq.w	407f8c <_strtod_r+0xebc>
  4079c8:	4a2c      	ldr	r2, [pc, #176]	; (407a7c <_strtod_r+0x9ac>)
  4079ca:	9203      	str	r2, [sp, #12]
  4079cc:	2300      	movs	r3, #0
  4079ce:	9302      	str	r3, [sp, #8]
  4079d0:	e513      	b.n	4073fa <_strtod_r+0x32a>
  4079d2:	482b      	ldr	r0, [pc, #172]	; (407a80 <_strtod_r+0x9b0>)
  4079d4:	9919      	ldr	r1, [sp, #100]	; 0x64
  4079d6:	e009      	b.n	4079ec <_strtod_r+0x91c>
  4079d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4079dc:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
  4079e0:	2c19      	cmp	r4, #25
  4079e2:	bf98      	it	ls
  4079e4:	3320      	addls	r3, #32
  4079e6:	4293      	cmp	r3, r2
  4079e8:	f47f abc1 	bne.w	40716e <_strtod_r+0x9e>
  4079ec:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4079f0:	2a00      	cmp	r2, #0
  4079f2:	d1f1      	bne.n	4079d8 <_strtod_r+0x908>
  4079f4:	9119      	str	r1, [sp, #100]	; 0x64
  4079f6:	4c23      	ldr	r4, [pc, #140]	; (407a84 <_strtod_r+0x9b4>)
  4079f8:	4608      	mov	r0, r1
  4079fa:	e009      	b.n	407a10 <_strtod_r+0x940>
  4079fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  407a00:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
  407a04:	2d19      	cmp	r5, #25
  407a06:	bf98      	it	ls
  407a08:	3320      	addls	r3, #32
  407a0a:	4293      	cmp	r3, r2
  407a0c:	f040 8285 	bne.w	407f1a <_strtod_r+0xe4a>
  407a10:	f814 2f01 	ldrb.w	r2, [r4, #1]!
  407a14:	2a00      	cmp	r2, #0
  407a16:	d1f1      	bne.n	4079fc <_strtod_r+0x92c>
  407a18:	3001      	adds	r0, #1
  407a1a:	9019      	str	r0, [sp, #100]	; 0x64
  407a1c:	4a1a      	ldr	r2, [pc, #104]	; (407a88 <_strtod_r+0x9b8>)
  407a1e:	9203      	str	r2, [sp, #12]
  407a20:	2300      	movs	r3, #0
  407a22:	9302      	str	r3, [sp, #8]
  407a24:	e4e9      	b.n	4073fa <_strtod_r+0x32a>
  407a26:	9907      	ldr	r1, [sp, #28]
  407a28:	9101      	str	r1, [sp, #4]
  407a2a:	ab1a      	add	r3, sp, #104	; 0x68
  407a2c:	9300      	str	r3, [sp, #0]
  407a2e:	4658      	mov	r0, fp
  407a30:	a919      	add	r1, sp, #100	; 0x64
  407a32:	4a16      	ldr	r2, [pc, #88]	; (407a8c <_strtod_r+0x9bc>)
  407a34:	ab1b      	add	r3, sp, #108	; 0x6c
  407a36:	f003 fa2f 	bl	40ae98 <__gethex>
  407a3a:	f010 0507 	ands.w	r5, r0, #7
  407a3e:	4604      	mov	r4, r0
  407a40:	f43f acca 	beq.w	4073d8 <_strtod_r+0x308>
  407a44:	2d06      	cmp	r5, #6
  407a46:	f040 8157 	bne.w	407cf8 <_strtod_r+0xc28>
  407a4a:	3601      	adds	r6, #1
  407a4c:	2200      	movs	r2, #0
  407a4e:	9619      	str	r6, [sp, #100]	; 0x64
  407a50:	f04f 0800 	mov.w	r8, #0
  407a54:	f04f 0900 	mov.w	r9, #0
  407a58:	9207      	str	r2, [sp, #28]
  407a5a:	f7ff bb8f 	b.w	40717c <_strtod_r+0xac>
  407a5e:	bf00      	nop
  407a60:	3fe00000 	.word	0x3fe00000
  407a64:	fffffbe3 	.word	0xfffffbe3
  407a68:	3ff00000 	.word	0x3ff00000
  407a6c:	7ca00000 	.word	0x7ca00000
  407a70:	7fefffff 	.word	0x7fefffff
  407a74:	bff00000 	.word	0xbff00000
  407a78:	0040d27b 	.word	0x0040d27b
  407a7c:	fff80000 	.word	0xfff80000
  407a80:	0040d26f 	.word	0x0040d26f
  407a84:	0040d273 	.word	0x0040d273
  407a88:	7ff00000 	.word	0x7ff00000
  407a8c:	0040d25c 	.word	0x0040d25c
  407a90:	0040d4d0 	.word	0x0040d4d0
  407a94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
  407a98:	f8cd 900c 	str.w	r9, [sp, #12]
  407a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407aa0:	f004 f866 	bl	40bb70 <__ulp>
  407aa4:	4602      	mov	r2, r0
  407aa6:	460b      	mov	r3, r1
  407aa8:	4620      	mov	r0, r4
  407aaa:	4629      	mov	r1, r5
  407aac:	f004 fc1c 	bl	40c2e8 <__aeabi_dmul>
  407ab0:	4602      	mov	r2, r0
  407ab2:	460b      	mov	r3, r1
  407ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407ab8:	f004 fa64 	bl	40bf84 <__adddf3>
  407abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407ac0:	9903      	ldr	r1, [sp, #12]
  407ac2:	4aad      	ldr	r2, [pc, #692]	; (407d78 <_strtod_r+0xca8>)
  407ac4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  407ac8:	0d1b      	lsrs	r3, r3, #20
  407aca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407ace:	051b      	lsls	r3, r3, #20
  407ad0:	4293      	cmp	r3, r2
  407ad2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  407ad6:	f240 80d5 	bls.w	407c84 <_strtod_r+0xbb4>
  407ada:	4ba8      	ldr	r3, [pc, #672]	; (407d7c <_strtod_r+0xcac>)
  407adc:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407ade:	4299      	cmp	r1, r3
  407ae0:	d010      	beq.n	407b04 <_strtod_r+0xa34>
  407ae2:	4ba6      	ldr	r3, [pc, #664]	; (407d7c <_strtod_r+0xcac>)
  407ae4:	9303      	str	r3, [sp, #12]
  407ae6:	f04f 30ff 	mov.w	r0, #4294967295
  407aea:	9002      	str	r0, [sp, #8]
  407aec:	e640      	b.n	407770 <_strtod_r+0x6a0>
  407aee:	4aa4      	ldr	r2, [pc, #656]	; (407d80 <_strtod_r+0xcb0>)
  407af0:	9203      	str	r2, [sp, #12]
  407af2:	2000      	movs	r0, #0
  407af4:	2322      	movs	r3, #34	; 0x22
  407af6:	9002      	str	r0, [sp, #8]
  407af8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407afc:	f8cb 3000 	str.w	r3, [fp]
  407b00:	f7ff bb3c 	b.w	40717c <_strtod_r+0xac>
  407b04:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407b06:	3201      	adds	r2, #1
  407b08:	d1eb      	bne.n	407ae2 <_strtod_r+0xa12>
  407b0a:	46b2      	mov	sl, r6
  407b0c:	991a      	ldr	r1, [sp, #104]	; 0x68
  407b0e:	4a9c      	ldr	r2, [pc, #624]	; (407d80 <_strtod_r+0xcb0>)
  407b10:	9203      	str	r2, [sp, #12]
  407b12:	2000      	movs	r0, #0
  407b14:	9002      	str	r0, [sp, #8]
  407b16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407b1a:	2322      	movs	r3, #34	; 0x22
  407b1c:	f8cb 3000 	str.w	r3, [fp]
  407b20:	4658      	mov	r0, fp
  407b22:	f003 fd53 	bl	40b5cc <_Bfree>
  407b26:	4658      	mov	r0, fp
  407b28:	4651      	mov	r1, sl
  407b2a:	f003 fd4f 	bl	40b5cc <_Bfree>
  407b2e:	4658      	mov	r0, fp
  407b30:	4639      	mov	r1, r7
  407b32:	f003 fd4b 	bl	40b5cc <_Bfree>
  407b36:	4658      	mov	r0, fp
  407b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407b3a:	f003 fd47 	bl	40b5cc <_Bfree>
  407b3e:	4658      	mov	r0, fp
  407b40:	9906      	ldr	r1, [sp, #24]
  407b42:	f003 fd43 	bl	40b5cc <_Bfree>
  407b46:	f7ff bb19 	b.w	40717c <_strtod_r+0xac>
  407b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  407b4e:	f004 fe65 	bl	40c81c <__aeabi_d2iz>
  407b52:	f004 fb63 	bl	40c21c <__aeabi_i2d>
  407b56:	4602      	mov	r2, r0
  407b58:	460b      	mov	r3, r1
  407b5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  407b5e:	f004 fa0f 	bl	40bf80 <__aeabi_dsub>
  407b62:	4680      	mov	r8, r0
  407b64:	4689      	mov	r9, r1
  407b66:	f1ba 0f00 	cmp.w	sl, #0
  407b6a:	d111      	bne.n	407b90 <_strtod_r+0xac0>
  407b6c:	9a02      	ldr	r2, [sp, #8]
  407b6e:	b97a      	cbnz	r2, 407b90 <_strtod_r+0xac0>
  407b70:	f3c4 0413 	ubfx	r4, r4, #0, #20
  407b74:	b964      	cbnz	r4, 407b90 <_strtod_r+0xac0>
  407b76:	a37a      	add	r3, pc, #488	; (adr r3, 407d60 <_strtod_r+0xc90>)
  407b78:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b7c:	f004 fe26 	bl	40c7cc <__aeabi_dcmplt>
  407b80:	2800      	cmp	r0, #0
  407b82:	f43f adf5 	beq.w	407770 <_strtod_r+0x6a0>
  407b86:	46b2      	mov	sl, r6
  407b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407b8c:	991a      	ldr	r1, [sp, #104]	; 0x68
  407b8e:	e7c7      	b.n	407b20 <_strtod_r+0xa50>
  407b90:	4640      	mov	r0, r8
  407b92:	4649      	mov	r1, r9
  407b94:	a374      	add	r3, pc, #464	; (adr r3, 407d68 <_strtod_r+0xc98>)
  407b96:	e9d3 2300 	ldrd	r2, r3, [r3]
  407b9a:	f004 fe17 	bl	40c7cc <__aeabi_dcmplt>
  407b9e:	2800      	cmp	r0, #0
  407ba0:	d1f1      	bne.n	407b86 <_strtod_r+0xab6>
  407ba2:	4640      	mov	r0, r8
  407ba4:	4649      	mov	r1, r9
  407ba6:	a372      	add	r3, pc, #456	; (adr r3, 407d70 <_strtod_r+0xca0>)
  407ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bac:	f004 fe2c 	bl	40c808 <__aeabi_dcmpgt>
  407bb0:	2800      	cmp	r0, #0
  407bb2:	f43f addd 	beq.w	407770 <_strtod_r+0x6a0>
  407bb6:	e7e6      	b.n	407b86 <_strtod_r+0xab6>
  407bb8:	4650      	mov	r0, sl
  407bba:	2808      	cmp	r0, #8
  407bbc:	f100 0a01 	add.w	sl, r0, #1
  407bc0:	f300 8107 	bgt.w	407dd2 <_strtod_r+0xd02>
  407bc4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
  407bc8:	eb02 0949 	add.w	r9, r2, r9, lsl #1
  407bcc:	2000      	movs	r0, #0
  407bce:	1c62      	adds	r2, r4, #1
  407bd0:	9219      	str	r2, [sp, #100]	; 0x64
  407bd2:	7864      	ldrb	r4, [r4, #1]
  407bd4:	e643      	b.n	40785e <_strtod_r+0x78e>
  407bd6:	f43f aca7 	beq.w	407528 <_strtod_r+0x458>
  407bda:	f1c8 0400 	rsb	r4, r8, #0
  407bde:	f014 030f 	ands.w	r3, r4, #15
  407be2:	d00a      	beq.n	407bfa <_strtod_r+0xb2a>
  407be4:	4a67      	ldr	r2, [pc, #412]	; (407d84 <_strtod_r+0xcb4>)
  407be6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  407bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407bee:	e9d3 2300 	ldrd	r2, r3, [r3]
  407bf2:	f004 fca3 	bl	40c53c <__aeabi_ddiv>
  407bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407bfa:	1124      	asrs	r4, r4, #4
  407bfc:	f43f ac94 	beq.w	407528 <_strtod_r+0x458>
  407c00:	2c1f      	cmp	r4, #31
  407c02:	dc33      	bgt.n	407c6c <_strtod_r+0xb9c>
  407c04:	f014 0f10 	tst.w	r4, #16
  407c08:	bf14      	ite	ne
  407c0a:	216a      	movne	r1, #106	; 0x6a
  407c0c:	2100      	moveq	r1, #0
  407c0e:	2c00      	cmp	r4, #0
  407c10:	910a      	str	r1, [sp, #40]	; 0x28
  407c12:	dd0e      	ble.n	407c32 <_strtod_r+0xb62>
  407c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407c18:	4d5b      	ldr	r5, [pc, #364]	; (407d88 <_strtod_r+0xcb8>)
  407c1a:	07e3      	lsls	r3, r4, #31
  407c1c:	d503      	bpl.n	407c26 <_strtod_r+0xb56>
  407c1e:	e9d5 2300 	ldrd	r2, r3, [r5]
  407c22:	f004 fb61 	bl	40c2e8 <__aeabi_dmul>
  407c26:	1064      	asrs	r4, r4, #1
  407c28:	f105 0508 	add.w	r5, r5, #8
  407c2c:	d1f5      	bne.n	407c1a <_strtod_r+0xb4a>
  407c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  407c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407c34:	b18a      	cbz	r2, 407c5a <_strtod_r+0xb8a>
  407c36:	9803      	ldr	r0, [sp, #12]
  407c38:	f3c0 530a 	ubfx	r3, r0, #20, #11
  407c3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  407c40:	2b00      	cmp	r3, #0
  407c42:	dd0a      	ble.n	407c5a <_strtod_r+0xb8a>
  407c44:	2b1f      	cmp	r3, #31
  407c46:	f340 81bd 	ble.w	407fc4 <_strtod_r+0xef4>
  407c4a:	2100      	movs	r1, #0
  407c4c:	2b34      	cmp	r3, #52	; 0x34
  407c4e:	9102      	str	r1, [sp, #8]
  407c50:	f340 81c0 	ble.w	407fd4 <_strtod_r+0xf04>
  407c54:	f04f 725c 	mov.w	r2, #57671680	; 0x3700000
  407c58:	9203      	str	r2, [sp, #12]
  407c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407c5e:	2200      	movs	r2, #0
  407c60:	2300      	movs	r3, #0
  407c62:	f004 fda9 	bl	40c7b8 <__aeabi_dcmpeq>
  407c66:	2800      	cmp	r0, #0
  407c68:	f43f ac60 	beq.w	40752c <_strtod_r+0x45c>
  407c6c:	2322      	movs	r3, #34	; 0x22
  407c6e:	f8cb 3000 	str.w	r3, [fp]
  407c72:	f04f 0800 	mov.w	r8, #0
  407c76:	f04f 0900 	mov.w	r9, #0
  407c7a:	f7ff ba7f 	b.w	40717c <_strtod_r+0xac>
  407c7e:	f644 611f 	movw	r1, #19999	; 0x4e1f
  407c82:	e40f      	b.n	4074a4 <_strtod_r+0x3d4>
  407c84:	9903      	ldr	r1, [sp, #12]
  407c86:	f101 7454 	add.w	r4, r1, #55574528	; 0x3500000
  407c8a:	9403      	str	r4, [sp, #12]
  407c8c:	e569      	b.n	407762 <_strtod_r+0x692>
  407c8e:	9808      	ldr	r0, [sp, #32]
  407c90:	f1ca 0325 	rsb	r3, sl, #37	; 0x25
  407c94:	4298      	cmp	r0, r3
  407c96:	f73f ac2d 	bgt.w	4074f4 <_strtod_r+0x424>
  407c9a:	4c3a      	ldr	r4, [pc, #232]	; (407d84 <_strtod_r+0xcb4>)
  407c9c:	f1ca 050f 	rsb	r5, sl, #15
  407ca0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
  407ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
  407cac:	f004 fb1c 	bl	40c2e8 <__aeabi_dmul>
  407cb0:	9a08      	ldr	r2, [sp, #32]
  407cb2:	1b55      	subs	r5, r2, r5
  407cb4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  407cb8:	e9d4 2300 	ldrd	r2, r3, [r4]
  407cbc:	f004 fb14 	bl	40c2e8 <__aeabi_dmul>
  407cc0:	4680      	mov	r8, r0
  407cc2:	4689      	mov	r9, r1
  407cc4:	f7ff ba5a 	b.w	40717c <_strtod_r+0xac>
  407cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  407ccc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  407cd0:	e660      	b.n	407994 <_strtod_r+0x8c4>
  407cd2:	492e      	ldr	r1, [pc, #184]	; (407d8c <_strtod_r+0xcbc>)
  407cd4:	2000      	movs	r0, #0
  407cd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  407cda:	e651      	b.n	407980 <_strtod_r+0x8b0>
  407cdc:	464a      	mov	r2, r9
  407cde:	2a00      	cmp	r2, #0
  407ce0:	f47f ae33 	bne.w	40794a <_strtod_r+0x87a>
  407ce4:	46b2      	mov	sl, r6
  407ce6:	2322      	movs	r3, #34	; 0x22
  407ce8:	f8cb 3000 	str.w	r3, [fp]
  407cec:	991a      	ldr	r1, [sp, #104]	; 0x68
  407cee:	f04f 0800 	mov.w	r8, #0
  407cf2:	f04f 0900 	mov.w	r9, #0
  407cf6:	e713      	b.n	407b20 <_strtod_r+0xa50>
  407cf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  407cfa:	b13a      	cbz	r2, 407d0c <_strtod_r+0xc3c>
  407cfc:	a81c      	add	r0, sp, #112	; 0x70
  407cfe:	2135      	movs	r1, #53	; 0x35
  407d00:	f004 f836 	bl	40bd70 <__copybits>
  407d04:	4658      	mov	r0, fp
  407d06:	991a      	ldr	r1, [sp, #104]	; 0x68
  407d08:	f003 fc60 	bl	40b5cc <_Bfree>
  407d0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  407d0e:	2d06      	cmp	r5, #6
  407d10:	f63f ab6d 	bhi.w	4073ee <_strtod_r+0x31e>
  407d14:	a001      	add	r0, pc, #4	; (adr r0, 407d1c <_strtod_r+0xc4c>)
  407d16:	f850 f025 	ldr.w	pc, [r0, r5, lsl #2]
  407d1a:	bf00      	nop
  407d1c:	00407d51 	.word	0x00407d51
  407d20:	00407d91 	.word	0x00407d91
  407d24:	00407d45 	.word	0x00407d45
  407d28:	00407d39 	.word	0x00407d39
  407d2c:	004073e3 	.word	0x004073e3
  407d30:	00407d91 	.word	0x00407d91
  407d34:	00407d51 	.word	0x00407d51
  407d38:	4911      	ldr	r1, [pc, #68]	; (407d80 <_strtod_r+0xcb0>)
  407d3a:	9103      	str	r1, [sp, #12]
  407d3c:	2200      	movs	r2, #0
  407d3e:	9202      	str	r2, [sp, #8]
  407d40:	f7ff bb55 	b.w	4073ee <_strtod_r+0x31e>
  407d44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  407d46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407d48:	9202      	str	r2, [sp, #8]
  407d4a:	9303      	str	r3, [sp, #12]
  407d4c:	f7ff bb4f 	b.w	4073ee <_strtod_r+0x31e>
  407d50:	2100      	movs	r1, #0
  407d52:	9103      	str	r1, [sp, #12]
  407d54:	9102      	str	r1, [sp, #8]
  407d56:	f7ff bb4a 	b.w	4073ee <_strtod_r+0x31e>
  407d5a:	bf00      	nop
  407d5c:	f3af 8000 	nop.w
  407d60:	94a03595 	.word	0x94a03595
  407d64:	3fcfffff 	.word	0x3fcfffff
  407d68:	94a03595 	.word	0x94a03595
  407d6c:	3fdfffff 	.word	0x3fdfffff
  407d70:	35afe535 	.word	0x35afe535
  407d74:	3fe00000 	.word	0x3fe00000
  407d78:	7c9fffff 	.word	0x7c9fffff
  407d7c:	7fefffff 	.word	0x7fefffff
  407d80:	7ff00000 	.word	0x7ff00000
  407d84:	0040d408 	.word	0x0040d408
  407d88:	0040d298 	.word	0x0040d298
  407d8c:	3ff00000 	.word	0x3ff00000
  407d90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
  407d92:	981c      	ldr	r0, [sp, #112]	; 0x70
  407d94:	9002      	str	r0, [sp, #8]
  407d96:	f203 4333 	addw	r3, r3, #1075	; 0x433
  407d9a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  407d9e:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  407da2:	9203      	str	r2, [sp, #12]
  407da4:	f7ff bb23 	b.w	4073ee <_strtod_r+0x31e>
  407da8:	9b08      	ldr	r3, [sp, #32]
  407daa:	3316      	adds	r3, #22
  407dac:	f6ff aba2 	blt.w	4074f4 <_strtod_r+0x424>
  407db0:	4b8e      	ldr	r3, [pc, #568]	; (407fec <_strtod_r+0xf1c>)
  407db2:	9808      	ldr	r0, [sp, #32]
  407db4:	eba3 0ac0 	sub.w	sl, r3, r0, lsl #3
  407db8:	e9da 2300 	ldrd	r2, r3, [sl]
  407dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407dc0:	f004 fbbc 	bl	40c53c <__aeabi_ddiv>
  407dc4:	4680      	mov	r8, r0
  407dc6:	4689      	mov	r9, r1
  407dc8:	f7ff b9d8 	b.w	40717c <_strtod_r+0xac>
  407dcc:	46b2      	mov	sl, r6
  407dce:	4601      	mov	r1, r0
  407dd0:	e69d      	b.n	407b0e <_strtod_r+0xa3e>
  407dd2:	f1ba 0f10 	cmp.w	sl, #16
  407dd6:	bfdc      	itt	le
  407dd8:	eb07 0787 	addle.w	r7, r7, r7, lsl #2
  407ddc:	eb02 0747 	addle.w	r7, r2, r7, lsl #1
  407de0:	2000      	movs	r0, #0
  407de2:	e6f4      	b.n	407bce <_strtod_r+0xafe>
  407de4:	4655      	mov	r5, sl
  407de6:	46c4      	mov	ip, r8
  407de8:	46b2      	mov	sl, r6
  407dea:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407dee:	2d00      	cmp	r5, #0
  407df0:	f000 8082 	beq.w	407ef8 <_strtod_r+0xe28>
  407df4:	9a03      	ldr	r2, [sp, #12]
  407df6:	4b7e      	ldr	r3, [pc, #504]	; (407ff0 <_strtod_r+0xf20>)
  407df8:	f3c2 0113 	ubfx	r1, r2, #0, #20
  407dfc:	4299      	cmp	r1, r3
  407dfe:	f000 80a3 	beq.w	407f48 <_strtod_r+0xe78>
  407e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407e04:	2b00      	cmp	r3, #0
  407e06:	f000 8083 	beq.w	407f10 <_strtod_r+0xe40>
  407e0a:	9803      	ldr	r0, [sp, #12]
  407e0c:	4203      	tst	r3, r0
  407e0e:	d00f      	beq.n	407e30 <_strtod_r+0xd60>
  407e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  407e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  407e16:	2d00      	cmp	r5, #0
  407e18:	f000 8084 	beq.w	407f24 <_strtod_r+0xe54>
  407e1c:	f7ff f938 	bl	407090 <sulp>
  407e20:	4602      	mov	r2, r0
  407e22:	460b      	mov	r3, r1
  407e24:	4640      	mov	r0, r8
  407e26:	4649      	mov	r1, r9
  407e28:	f004 f8ac 	bl	40bf84 <__adddf3>
  407e2c:	4680      	mov	r8, r0
  407e2e:	4689      	mov	r9, r1
  407e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407e32:	b1b3      	cbz	r3, 407e62 <_strtod_r+0xd92>
  407e34:	486f      	ldr	r0, [pc, #444]	; (407ff4 <_strtod_r+0xf24>)
  407e36:	9013      	str	r0, [sp, #76]	; 0x4c
  407e38:	2100      	movs	r1, #0
  407e3a:	9112      	str	r1, [sp, #72]	; 0x48
  407e3c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  407e40:	4640      	mov	r0, r8
  407e42:	4649      	mov	r1, r9
  407e44:	f004 fa50 	bl	40c2e8 <__aeabi_dmul>
  407e48:	4680      	mov	r8, r0
  407e4a:	4689      	mov	r9, r1
  407e4c:	e9cd 8902 	strd	r8, r9, [sp, #8]
  407e50:	9a03      	ldr	r2, [sp, #12]
  407e52:	b932      	cbnz	r2, 407e62 <_strtod_r+0xd92>
  407e54:	9b02      	ldr	r3, [sp, #8]
  407e56:	b923      	cbnz	r3, 407e62 <_strtod_r+0xd92>
  407e58:	2322      	movs	r3, #34	; 0x22
  407e5a:	991a      	ldr	r1, [sp, #104]	; 0x68
  407e5c:	f8cb 3000 	str.w	r3, [fp]
  407e60:	e65e      	b.n	407b20 <_strtod_r+0xa50>
  407e62:	991a      	ldr	r1, [sp, #104]	; 0x68
  407e64:	e65c      	b.n	407b20 <_strtod_r+0xa50>
  407e66:	4655      	mov	r5, sl
  407e68:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  407e6c:	46b2      	mov	sl, r6
  407e6e:	2d00      	cmp	r5, #0
  407e70:	d1de      	bne.n	407e30 <_strtod_r+0xd60>
  407e72:	9a02      	ldr	r2, [sp, #8]
  407e74:	2a00      	cmp	r2, #0
  407e76:	d1db      	bne.n	407e30 <_strtod_r+0xd60>
  407e78:	9803      	ldr	r0, [sp, #12]
  407e7a:	f3c0 0313 	ubfx	r3, r0, #0, #20
  407e7e:	4604      	mov	r4, r0
  407e80:	2b00      	cmp	r3, #0
  407e82:	d1d5      	bne.n	407e30 <_strtod_r+0xd60>
  407e84:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  407e88:	0d1b      	lsrs	r3, r3, #20
  407e8a:	051b      	lsls	r3, r3, #20
  407e8c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  407e90:	d9ce      	bls.n	407e30 <_strtod_r+0xd60>
  407e92:	9906      	ldr	r1, [sp, #24]
  407e94:	694b      	ldr	r3, [r1, #20]
  407e96:	b913      	cbnz	r3, 407e9e <_strtod_r+0xdce>
  407e98:	690b      	ldr	r3, [r1, #16]
  407e9a:	2b01      	cmp	r3, #1
  407e9c:	ddc8      	ble.n	407e30 <_strtod_r+0xd60>
  407e9e:	9906      	ldr	r1, [sp, #24]
  407ea0:	2201      	movs	r2, #1
  407ea2:	4658      	mov	r0, fp
  407ea4:	f003 fd78 	bl	40b998 <__lshift>
  407ea8:	4639      	mov	r1, r7
  407eaa:	9006      	str	r0, [sp, #24]
  407eac:	f003 fdd2 	bl	40ba54 <__mcmp>
  407eb0:	2800      	cmp	r0, #0
  407eb2:	ddbd      	ble.n	407e30 <_strtod_r+0xd60>
  407eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407eb6:	2b00      	cmp	r3, #0
  407eb8:	d17a      	bne.n	407fb0 <_strtod_r+0xee0>
  407eba:	4b4f      	ldr	r3, [pc, #316]	; (407ff8 <_strtod_r+0xf28>)
  407ebc:	4023      	ands	r3, r4
  407ebe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
  407ec2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
  407ec6:	ea6f 5003 	mvn.w	r0, r3, lsl #20
  407eca:	f04f 31ff 	mov.w	r1, #4294967295
  407ece:	9003      	str	r0, [sp, #12]
  407ed0:	9102      	str	r1, [sp, #8]
  407ed2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407ed6:	e7ab      	b.n	407e30 <_strtod_r+0xd60>
  407ed8:	f100 7154 	add.w	r1, r0, #55574528	; 0x3500000
  407edc:	2000      	movs	r0, #0
  407ede:	9103      	str	r1, [sp, #12]
  407ee0:	900a      	str	r0, [sp, #40]	; 0x28
  407ee2:	f7ff bb23 	b.w	40752c <_strtod_r+0x45c>
  407ee6:	4b45      	ldr	r3, [pc, #276]	; (407ffc <_strtod_r+0xf2c>)
  407ee8:	4945      	ldr	r1, [pc, #276]	; (408000 <_strtod_r+0xf30>)
  407eea:	2200      	movs	r2, #0
  407eec:	2000      	movs	r0, #0
  407eee:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  407ef2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  407ef6:	e4ac      	b.n	407852 <_strtod_r+0x782>
  407ef8:	9903      	ldr	r1, [sp, #12]
  407efa:	f3c1 0313 	ubfx	r3, r1, #0, #20
  407efe:	460c      	mov	r4, r1
  407f00:	2b00      	cmp	r3, #0
  407f02:	f47f af7e 	bne.w	407e02 <_strtod_r+0xd32>
  407f06:	9a02      	ldr	r2, [sp, #8]
  407f08:	2a00      	cmp	r2, #0
  407f0a:	f47f af7a 	bne.w	407e02 <_strtod_r+0xd32>
  407f0e:	e7d1      	b.n	407eb4 <_strtod_r+0xde4>
  407f10:	9902      	ldr	r1, [sp, #8]
  407f12:	ea1c 0f01 	tst.w	ip, r1
  407f16:	d08b      	beq.n	407e30 <_strtod_r+0xd60>
  407f18:	e77a      	b.n	407e10 <_strtod_r+0xd40>
  407f1a:	3101      	adds	r1, #1
  407f1c:	9119      	str	r1, [sp, #100]	; 0x64
  407f1e:	e57d      	b.n	407a1c <_strtod_r+0x94c>
  407f20:	2700      	movs	r7, #0
  407f22:	e4e8      	b.n	4078f6 <_strtod_r+0x826>
  407f24:	f7ff f8b4 	bl	407090 <sulp>
  407f28:	4602      	mov	r2, r0
  407f2a:	460b      	mov	r3, r1
  407f2c:	4640      	mov	r0, r8
  407f2e:	4649      	mov	r1, r9
  407f30:	f004 f826 	bl	40bf80 <__aeabi_dsub>
  407f34:	2200      	movs	r2, #0
  407f36:	2300      	movs	r3, #0
  407f38:	4680      	mov	r8, r0
  407f3a:	4689      	mov	r9, r1
  407f3c:	f004 fc3c 	bl	40c7b8 <__aeabi_dcmpeq>
  407f40:	2800      	cmp	r0, #0
  407f42:	f47f aed0 	bne.w	407ce6 <_strtod_r+0xc16>
  407f46:	e773      	b.n	407e30 <_strtod_r+0xd60>
  407f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407f4a:	9902      	ldr	r1, [sp, #8]
  407f4c:	b1db      	cbz	r3, 407f86 <_strtod_r+0xeb6>
  407f4e:	4b2a      	ldr	r3, [pc, #168]	; (407ff8 <_strtod_r+0xf28>)
  407f50:	4013      	ands	r3, r2
  407f52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
  407f56:	d816      	bhi.n	407f86 <_strtod_r+0xeb6>
  407f58:	0d1b      	lsrs	r3, r3, #20
  407f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
  407f5e:	f04f 30ff 	mov.w	r0, #4294967295
  407f62:	fa00 f303 	lsl.w	r3, r0, r3
  407f66:	4299      	cmp	r1, r3
  407f68:	f47f af4b 	bne.w	407e02 <_strtod_r+0xd32>
  407f6c:	4b25      	ldr	r3, [pc, #148]	; (408004 <_strtod_r+0xf34>)
  407f6e:	429a      	cmp	r2, r3
  407f70:	d038      	beq.n	407fe4 <_strtod_r+0xf14>
  407f72:	4b21      	ldr	r3, [pc, #132]	; (407ff8 <_strtod_r+0xf28>)
  407f74:	4013      	ands	r3, r2
  407f76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
  407f7a:	2000      	movs	r0, #0
  407f7c:	9303      	str	r3, [sp, #12]
  407f7e:	9002      	str	r0, [sp, #8]
  407f80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  407f84:	e754      	b.n	407e30 <_strtod_r+0xd60>
  407f86:	f04f 33ff 	mov.w	r3, #4294967295
  407f8a:	e7ec      	b.n	407f66 <_strtod_r+0xe96>
  407f8c:	a819      	add	r0, sp, #100	; 0x64
  407f8e:	491e      	ldr	r1, [pc, #120]	; (408008 <_strtod_r+0xf38>)
  407f90:	aa1c      	add	r2, sp, #112	; 0x70
  407f92:	f003 fa19 	bl	40b3c8 <__hexnan>
  407f96:	2805      	cmp	r0, #5
  407f98:	f47f ad16 	bne.w	4079c8 <_strtod_r+0x8f8>
  407f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407f9e:	991c      	ldr	r1, [sp, #112]	; 0x70
  407fa0:	9102      	str	r1, [sp, #8]
  407fa2:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
  407fa6:	f443 00e0 	orr.w	r0, r3, #7340032	; 0x700000
  407faa:	9003      	str	r0, [sp, #12]
  407fac:	f7ff ba25 	b.w	4073fa <_strtod_r+0x32a>
  407fb0:	4b11      	ldr	r3, [pc, #68]	; (407ff8 <_strtod_r+0xf28>)
  407fb2:	4023      	ands	r3, r4
  407fb4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
  407fb8:	d881      	bhi.n	407ebe <_strtod_r+0xdee>
  407fba:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
  407fbe:	f63f af39 	bhi.w	407e34 <_strtod_r+0xd64>
  407fc2:	e690      	b.n	407ce6 <_strtod_r+0xc16>
  407fc4:	9802      	ldr	r0, [sp, #8]
  407fc6:	f04f 32ff 	mov.w	r2, #4294967295
  407fca:	fa02 f303 	lsl.w	r3, r2, r3
  407fce:	4003      	ands	r3, r0
  407fd0:	9302      	str	r3, [sp, #8]
  407fd2:	e642      	b.n	407c5a <_strtod_r+0xb8a>
  407fd4:	3b20      	subs	r3, #32
  407fd6:	f04f 31ff 	mov.w	r1, #4294967295
  407fda:	fa01 f303 	lsl.w	r3, r1, r3
  407fde:	4003      	ands	r3, r0
  407fe0:	9303      	str	r3, [sp, #12]
  407fe2:	e63a      	b.n	407c5a <_strtod_r+0xb8a>
  407fe4:	3101      	adds	r1, #1
  407fe6:	d1c4      	bne.n	407f72 <_strtod_r+0xea2>
  407fe8:	e590      	b.n	407b0c <_strtod_r+0xa3c>
  407fea:	bf00      	nop
  407fec:	0040d408 	.word	0x0040d408
  407ff0:	000fffff 	.word	0x000fffff
  407ff4:	39500000 	.word	0x39500000
  407ff8:	7ff00000 	.word	0x7ff00000
  407ffc:	bfe00000 	.word	0xbfe00000
  408000:	3fe00000 	.word	0x3fe00000
  408004:	7fefffff 	.word	0x7fefffff
  408008:	0040d280 	.word	0x0040d280
  40800c:	f3af 8000 	nop.w

00408010 <_strtol_r>:
  408010:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  408014:	4c42      	ldr	r4, [pc, #264]	; (408120 <_strtol_r+0x110>)
  408016:	b082      	sub	sp, #8
  408018:	f8d4 c000 	ldr.w	ip, [r4]
  40801c:	9001      	str	r0, [sp, #4]
  40801e:	460e      	mov	r6, r1
  408020:	e000      	b.n	408024 <_strtol_r+0x14>
  408022:	4626      	mov	r6, r4
  408024:	4634      	mov	r4, r6
  408026:	f814 5b01 	ldrb.w	r5, [r4], #1
  40802a:	eb0c 0005 	add.w	r0, ip, r5
  40802e:	7840      	ldrb	r0, [r0, #1]
  408030:	f000 0008 	and.w	r0, r0, #8
  408034:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  408038:	2800      	cmp	r0, #0
  40803a:	d1f2      	bne.n	408022 <_strtol_r+0x12>
  40803c:	2d2d      	cmp	r5, #45	; 0x2d
  40803e:	d05b      	beq.n	4080f8 <_strtol_r+0xe8>
  408040:	2d2b      	cmp	r5, #43	; 0x2b
  408042:	bf04      	itt	eq
  408044:	7875      	ldrbeq	r5, [r6, #1]
  408046:	1cb4      	addeq	r4, r6, #2
  408048:	f033 0010 	bics.w	r0, r3, #16
  40804c:	d03c      	beq.n	4080c8 <_strtol_r+0xb8>
  40804e:	4699      	mov	r9, r3
  408050:	f1ba 0f00 	cmp.w	sl, #0
  408054:	bf0c      	ite	eq
  408056:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  40805a:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  40805e:	fbbb f8f9 	udiv	r8, fp, r9
  408062:	2700      	movs	r7, #0
  408064:	fb09 bb18 	mls	fp, r9, r8, fp
  408068:	4638      	mov	r0, r7
  40806a:	e00c      	b.n	408086 <_strtol_r+0x76>
  40806c:	3d30      	subs	r5, #48	; 0x30
  40806e:	42ab      	cmp	r3, r5
  408070:	dd19      	ble.n	4080a6 <_strtol_r+0x96>
  408072:	1c7e      	adds	r6, r7, #1
  408074:	d005      	beq.n	408082 <_strtol_r+0x72>
  408076:	4540      	cmp	r0, r8
  408078:	d823      	bhi.n	4080c2 <_strtol_r+0xb2>
  40807a:	d020      	beq.n	4080be <_strtol_r+0xae>
  40807c:	fb09 5000 	mla	r0, r9, r0, r5
  408080:	2701      	movs	r7, #1
  408082:	f814 5b01 	ldrb.w	r5, [r4], #1
  408086:	eb0c 0605 	add.w	r6, ip, r5
  40808a:	7876      	ldrb	r6, [r6, #1]
  40808c:	f016 0f04 	tst.w	r6, #4
  408090:	d1ec      	bne.n	40806c <_strtol_r+0x5c>
  408092:	f016 0603 	ands.w	r6, r6, #3
  408096:	d006      	beq.n	4080a6 <_strtol_r+0x96>
  408098:	2e01      	cmp	r6, #1
  40809a:	bf14      	ite	ne
  40809c:	2657      	movne	r6, #87	; 0x57
  40809e:	2637      	moveq	r6, #55	; 0x37
  4080a0:	1bad      	subs	r5, r5, r6
  4080a2:	42ab      	cmp	r3, r5
  4080a4:	dce5      	bgt.n	408072 <_strtol_r+0x62>
  4080a6:	1c7b      	adds	r3, r7, #1
  4080a8:	d015      	beq.n	4080d6 <_strtol_r+0xc6>
  4080aa:	f1ba 0f00 	cmp.w	sl, #0
  4080ae:	d121      	bne.n	4080f4 <_strtol_r+0xe4>
  4080b0:	b10a      	cbz	r2, 4080b6 <_strtol_r+0xa6>
  4080b2:	b9ef      	cbnz	r7, 4080f0 <_strtol_r+0xe0>
  4080b4:	6011      	str	r1, [r2, #0]
  4080b6:	b002      	add	sp, #8
  4080b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4080bc:	4770      	bx	lr
  4080be:	455d      	cmp	r5, fp
  4080c0:	dddc      	ble.n	40807c <_strtol_r+0x6c>
  4080c2:	f04f 37ff 	mov.w	r7, #4294967295
  4080c6:	e7dc      	b.n	408082 <_strtol_r+0x72>
  4080c8:	2d30      	cmp	r5, #48	; 0x30
  4080ca:	d01a      	beq.n	408102 <_strtol_r+0xf2>
  4080cc:	2b00      	cmp	r3, #0
  4080ce:	d1be      	bne.n	40804e <_strtol_r+0x3e>
  4080d0:	230a      	movs	r3, #10
  4080d2:	4699      	mov	r9, r3
  4080d4:	e7bc      	b.n	408050 <_strtol_r+0x40>
  4080d6:	9901      	ldr	r1, [sp, #4]
  4080d8:	f1ba 0f00 	cmp.w	sl, #0
  4080dc:	f04f 0322 	mov.w	r3, #34	; 0x22
  4080e0:	bf0c      	ite	eq
  4080e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4080e6:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4080ea:	600b      	str	r3, [r1, #0]
  4080ec:	2a00      	cmp	r2, #0
  4080ee:	d0e2      	beq.n	4080b6 <_strtol_r+0xa6>
  4080f0:	1e61      	subs	r1, r4, #1
  4080f2:	e7df      	b.n	4080b4 <_strtol_r+0xa4>
  4080f4:	4240      	negs	r0, r0
  4080f6:	e7db      	b.n	4080b0 <_strtol_r+0xa0>
  4080f8:	1cb4      	adds	r4, r6, #2
  4080fa:	7875      	ldrb	r5, [r6, #1]
  4080fc:	f04f 0a01 	mov.w	sl, #1
  408100:	e7a2      	b.n	408048 <_strtol_r+0x38>
  408102:	7820      	ldrb	r0, [r4, #0]
  408104:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  408108:	2858      	cmp	r0, #88	; 0x58
  40810a:	d003      	beq.n	408114 <_strtol_r+0x104>
  40810c:	2b00      	cmp	r3, #0
  40810e:	d19e      	bne.n	40804e <_strtol_r+0x3e>
  408110:	2308      	movs	r3, #8
  408112:	e79c      	b.n	40804e <_strtol_r+0x3e>
  408114:	2310      	movs	r3, #16
  408116:	7865      	ldrb	r5, [r4, #1]
  408118:	4699      	mov	r9, r3
  40811a:	3402      	adds	r4, #2
  40811c:	e798      	b.n	408050 <_strtol_r+0x40>
  40811e:	bf00      	nop
  408120:	2000051c 	.word	0x2000051c

00408124 <_strtoll_r>:
  408124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408128:	4c64      	ldr	r4, [pc, #400]	; (4082bc <_strtoll_r+0x198>)
  40812a:	b087      	sub	sp, #28
  40812c:	4694      	mov	ip, r2
  40812e:	9104      	str	r1, [sp, #16]
  408130:	f8d4 8000 	ldr.w	r8, [r4]
  408134:	9005      	str	r0, [sp, #20]
  408136:	4699      	mov	r9, r3
  408138:	460a      	mov	r2, r1
  40813a:	e000      	b.n	40813e <_strtoll_r+0x1a>
  40813c:	4632      	mov	r2, r6
  40813e:	4616      	mov	r6, r2
  408140:	f816 7b01 	ldrb.w	r7, [r6], #1
  408144:	eb08 0307 	add.w	r3, r8, r7
  408148:	785b      	ldrb	r3, [r3, #1]
  40814a:	f003 0308 	and.w	r3, r3, #8
  40814e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  408152:	2b00      	cmp	r3, #0
  408154:	d1f2      	bne.n	40813c <_strtoll_r+0x18>
  408156:	2f2d      	cmp	r7, #45	; 0x2d
  408158:	f000 808d 	beq.w	408276 <_strtoll_r+0x152>
  40815c:	2f2b      	cmp	r7, #43	; 0x2b
  40815e:	bf08      	it	eq
  408160:	7857      	ldrbeq	r7, [r2, #1]
  408162:	9102      	str	r1, [sp, #8]
  408164:	bf08      	it	eq
  408166:	1c96      	addeq	r6, r2, #2
  408168:	f039 0110 	bics.w	r1, r9, #16
  40816c:	d05e      	beq.n	40822c <_strtoll_r+0x108>
  40816e:	46ca      	mov	sl, r9
  408170:	ea4f 7be9 	mov.w	fp, r9, asr #31
  408174:	9c02      	ldr	r4, [sp, #8]
  408176:	2c00      	cmp	r4, #0
  408178:	d066      	beq.n	408248 <_strtoll_r+0x124>
  40817a:	2400      	movs	r4, #0
  40817c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  408180:	4620      	mov	r0, r4
  408182:	4629      	mov	r1, r5
  408184:	4652      	mov	r2, sl
  408186:	465b      	mov	r3, fp
  408188:	f8cd c004 	str.w	ip, [sp, #4]
  40818c:	f004 fbde 	bl	40c94c <__aeabi_uldivmod>
  408190:	4620      	mov	r0, r4
  408192:	9203      	str	r2, [sp, #12]
  408194:	465b      	mov	r3, fp
  408196:	4652      	mov	r2, sl
  408198:	4629      	mov	r1, r5
  40819a:	f004 fbd7 	bl	40c94c <__aeabi_uldivmod>
  40819e:	2400      	movs	r4, #0
  4081a0:	2200      	movs	r2, #0
  4081a2:	2300      	movs	r3, #0
  4081a4:	f8dd c004 	ldr.w	ip, [sp, #4]
  4081a8:	e019      	b.n	4081de <_strtoll_r+0xba>
  4081aa:	3f30      	subs	r7, #48	; 0x30
  4081ac:	45b9      	cmp	r9, r7
  4081ae:	dd26      	ble.n	4081fe <_strtoll_r+0xda>
  4081b0:	1c65      	adds	r5, r4, #1
  4081b2:	d012      	beq.n	4081da <_strtoll_r+0xb6>
  4081b4:	4299      	cmp	r1, r3
  4081b6:	bf08      	it	eq
  4081b8:	4290      	cmpeq	r0, r2
  4081ba:	d334      	bcc.n	408226 <_strtoll_r+0x102>
  4081bc:	428b      	cmp	r3, r1
  4081be:	bf08      	it	eq
  4081c0:	4282      	cmpeq	r2, r0
  4081c2:	d02d      	beq.n	408220 <_strtoll_r+0xfc>
  4081c4:	fb02 f40b 	mul.w	r4, r2, fp
  4081c8:	fb0a 4403 	mla	r4, sl, r3, r4
  4081cc:	fba2 230a 	umull	r2, r3, r2, sl
  4081d0:	4423      	add	r3, r4
  4081d2:	19d2      	adds	r2, r2, r7
  4081d4:	eb43 73e7 	adc.w	r3, r3, r7, asr #31
  4081d8:	2401      	movs	r4, #1
  4081da:	f816 7b01 	ldrb.w	r7, [r6], #1
  4081de:	eb08 0507 	add.w	r5, r8, r7
  4081e2:	786d      	ldrb	r5, [r5, #1]
  4081e4:	f015 0f04 	tst.w	r5, #4
  4081e8:	d1df      	bne.n	4081aa <_strtoll_r+0x86>
  4081ea:	f015 0503 	ands.w	r5, r5, #3
  4081ee:	d006      	beq.n	4081fe <_strtoll_r+0xda>
  4081f0:	2d01      	cmp	r5, #1
  4081f2:	bf14      	ite	ne
  4081f4:	2557      	movne	r5, #87	; 0x57
  4081f6:	2537      	moveq	r5, #55	; 0x37
  4081f8:	1b7f      	subs	r7, r7, r5
  4081fa:	45b9      	cmp	r9, r7
  4081fc:	dcd8      	bgt.n	4081b0 <_strtoll_r+0x8c>
  4081fe:	1c61      	adds	r1, r4, #1
  408200:	d027      	beq.n	408252 <_strtoll_r+0x12e>
  408202:	9902      	ldr	r1, [sp, #8]
  408204:	2900      	cmp	r1, #0
  408206:	d132      	bne.n	40826e <_strtoll_r+0x14a>
  408208:	4610      	mov	r0, r2
  40820a:	4619      	mov	r1, r3
  40820c:	f1bc 0f00 	cmp.w	ip, #0
  408210:	d003      	beq.n	40821a <_strtoll_r+0xf6>
  408212:	bb54      	cbnz	r4, 40826a <_strtoll_r+0x146>
  408214:	9e04      	ldr	r6, [sp, #16]
  408216:	f8cc 6000 	str.w	r6, [ip]
  40821a:	b007      	add	sp, #28
  40821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408220:	9c03      	ldr	r4, [sp, #12]
  408222:	42a7      	cmp	r7, r4
  408224:	ddce      	ble.n	4081c4 <_strtoll_r+0xa0>
  408226:	f04f 34ff 	mov.w	r4, #4294967295
  40822a:	e7d6      	b.n	4081da <_strtoll_r+0xb6>
  40822c:	2f30      	cmp	r7, #48	; 0x30
  40822e:	d027      	beq.n	408280 <_strtoll_r+0x15c>
  408230:	f1b9 0f00 	cmp.w	r9, #0
  408234:	d19b      	bne.n	40816e <_strtoll_r+0x4a>
  408236:	9c02      	ldr	r4, [sp, #8]
  408238:	f04f 0a0a 	mov.w	sl, #10
  40823c:	f04f 0b00 	mov.w	fp, #0
  408240:	f04f 090a 	mov.w	r9, #10
  408244:	2c00      	cmp	r4, #0
  408246:	d198      	bne.n	40817a <_strtoll_r+0x56>
  408248:	f04f 34ff 	mov.w	r4, #4294967295
  40824c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  408250:	e796      	b.n	408180 <_strtoll_r+0x5c>
  408252:	9c02      	ldr	r4, [sp, #8]
  408254:	bb24      	cbnz	r4, 4082a0 <_strtoll_r+0x17c>
  408256:	f04f 30ff 	mov.w	r0, #4294967295
  40825a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40825e:	9c05      	ldr	r4, [sp, #20]
  408260:	2322      	movs	r3, #34	; 0x22
  408262:	6023      	str	r3, [r4, #0]
  408264:	f1bc 0f00 	cmp.w	ip, #0
  408268:	d0d7      	beq.n	40821a <_strtoll_r+0xf6>
  40826a:	3e01      	subs	r6, #1
  40826c:	e7d3      	b.n	408216 <_strtoll_r+0xf2>
  40826e:	4252      	negs	r2, r2
  408270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408274:	e7c8      	b.n	408208 <_strtoll_r+0xe4>
  408276:	2401      	movs	r4, #1
  408278:	1c96      	adds	r6, r2, #2
  40827a:	7857      	ldrb	r7, [r2, #1]
  40827c:	9402      	str	r4, [sp, #8]
  40827e:	e773      	b.n	408168 <_strtoll_r+0x44>
  408280:	7833      	ldrb	r3, [r6, #0]
  408282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  408286:	2b58      	cmp	r3, #88	; 0x58
  408288:	d00e      	beq.n	4082a8 <_strtoll_r+0x184>
  40828a:	f1b9 0f00 	cmp.w	r9, #0
  40828e:	f47f af6e 	bne.w	40816e <_strtoll_r+0x4a>
  408292:	f04f 0a08 	mov.w	sl, #8
  408296:	f04f 0b00 	mov.w	fp, #0
  40829a:	f04f 0908 	mov.w	r9, #8
  40829e:	e769      	b.n	408174 <_strtoll_r+0x50>
  4082a0:	2000      	movs	r0, #0
  4082a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4082a6:	e7da      	b.n	40825e <_strtoll_r+0x13a>
  4082a8:	7877      	ldrb	r7, [r6, #1]
  4082aa:	f04f 0a10 	mov.w	sl, #16
  4082ae:	f04f 0b00 	mov.w	fp, #0
  4082b2:	3602      	adds	r6, #2
  4082b4:	f04f 0910 	mov.w	r9, #16
  4082b8:	e75c      	b.n	408174 <_strtoll_r+0x50>
  4082ba:	bf00      	nop
  4082bc:	2000051c 	.word	0x2000051c

004082c0 <_strtoul_r>:
  4082c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4082c4:	4c44      	ldr	r4, [pc, #272]	; (4083d8 <_strtoul_r+0x118>)
  4082c6:	b082      	sub	sp, #8
  4082c8:	f8d4 c000 	ldr.w	ip, [r4]
  4082cc:	9001      	str	r0, [sp, #4]
  4082ce:	460e      	mov	r6, r1
  4082d0:	e000      	b.n	4082d4 <_strtoul_r+0x14>
  4082d2:	4626      	mov	r6, r4
  4082d4:	4634      	mov	r4, r6
  4082d6:	f814 5b01 	ldrb.w	r5, [r4], #1
  4082da:	eb0c 0005 	add.w	r0, ip, r5
  4082de:	7840      	ldrb	r0, [r0, #1]
  4082e0:	f000 0008 	and.w	r0, r0, #8
  4082e4:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  4082e8:	2800      	cmp	r0, #0
  4082ea:	d1f2      	bne.n	4082d2 <_strtoul_r+0x12>
  4082ec:	2d2d      	cmp	r5, #45	; 0x2d
  4082ee:	d057      	beq.n	4083a0 <_strtoul_r+0xe0>
  4082f0:	2d2b      	cmp	r5, #43	; 0x2b
  4082f2:	bf08      	it	eq
  4082f4:	7875      	ldrbeq	r5, [r6, #1]
  4082f6:	46ba      	mov	sl, r7
  4082f8:	bf08      	it	eq
  4082fa:	1cb4      	addeq	r4, r6, #2
  4082fc:	f033 0010 	bics.w	r0, r3, #16
  408300:	d039      	beq.n	408376 <_strtoul_r+0xb6>
  408302:	f04f 38ff 	mov.w	r8, #4294967295
  408306:	fbb8 f8f3 	udiv	r8, r8, r3
  40830a:	fb03 fb08 	mul.w	fp, r3, r8
  40830e:	ea6f 0b0b 	mvn.w	fp, fp
  408312:	4699      	mov	r9, r3
  408314:	2700      	movs	r7, #0
  408316:	4638      	mov	r0, r7
  408318:	e00c      	b.n	408334 <_strtoul_r+0x74>
  40831a:	3d30      	subs	r5, #48	; 0x30
  40831c:	42ab      	cmp	r3, r5
  40831e:	dd19      	ble.n	408354 <_strtoul_r+0x94>
  408320:	2f00      	cmp	r7, #0
  408322:	db25      	blt.n	408370 <_strtoul_r+0xb0>
  408324:	4540      	cmp	r0, r8
  408326:	d823      	bhi.n	408370 <_strtoul_r+0xb0>
  408328:	d020      	beq.n	40836c <_strtoul_r+0xac>
  40832a:	fb09 5000 	mla	r0, r9, r0, r5
  40832e:	2701      	movs	r7, #1
  408330:	f814 5b01 	ldrb.w	r5, [r4], #1
  408334:	eb0c 0605 	add.w	r6, ip, r5
  408338:	7876      	ldrb	r6, [r6, #1]
  40833a:	f016 0f04 	tst.w	r6, #4
  40833e:	d1ec      	bne.n	40831a <_strtoul_r+0x5a>
  408340:	f016 0603 	ands.w	r6, r6, #3
  408344:	d006      	beq.n	408354 <_strtoul_r+0x94>
  408346:	2e01      	cmp	r6, #1
  408348:	bf14      	ite	ne
  40834a:	2657      	movne	r6, #87	; 0x57
  40834c:	2637      	moveq	r6, #55	; 0x37
  40834e:	1bad      	subs	r5, r5, r6
  408350:	42ab      	cmp	r3, r5
  408352:	dce5      	bgt.n	408320 <_strtoul_r+0x60>
  408354:	2f00      	cmp	r7, #0
  408356:	db1d      	blt.n	408394 <_strtoul_r+0xd4>
  408358:	f1ba 0f00 	cmp.w	sl, #0
  40835c:	d118      	bne.n	408390 <_strtoul_r+0xd0>
  40835e:	b10a      	cbz	r2, 408364 <_strtoul_r+0xa4>
  408360:	b9a7      	cbnz	r7, 40838c <_strtoul_r+0xcc>
  408362:	6011      	str	r1, [r2, #0]
  408364:	b002      	add	sp, #8
  408366:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40836a:	4770      	bx	lr
  40836c:	455d      	cmp	r5, fp
  40836e:	dddc      	ble.n	40832a <_strtoul_r+0x6a>
  408370:	f04f 37ff 	mov.w	r7, #4294967295
  408374:	e7dc      	b.n	408330 <_strtoul_r+0x70>
  408376:	2d30      	cmp	r5, #48	; 0x30
  408378:	d017      	beq.n	4083aa <_strtoul_r+0xea>
  40837a:	2b00      	cmp	r3, #0
  40837c:	d1c1      	bne.n	408302 <_strtoul_r+0x42>
  40837e:	230a      	movs	r3, #10
  408380:	4699      	mov	r9, r3
  408382:	f04f 0b05 	mov.w	fp, #5
  408386:	f8df 8054 	ldr.w	r8, [pc, #84]	; 4083dc <_strtoul_r+0x11c>
  40838a:	e7c3      	b.n	408314 <_strtoul_r+0x54>
  40838c:	1e61      	subs	r1, r4, #1
  40838e:	e7e8      	b.n	408362 <_strtoul_r+0xa2>
  408390:	4240      	negs	r0, r0
  408392:	e7e4      	b.n	40835e <_strtoul_r+0x9e>
  408394:	9801      	ldr	r0, [sp, #4]
  408396:	2322      	movs	r3, #34	; 0x22
  408398:	6003      	str	r3, [r0, #0]
  40839a:	f04f 30ff 	mov.w	r0, #4294967295
  40839e:	e7de      	b.n	40835e <_strtoul_r+0x9e>
  4083a0:	1cb4      	adds	r4, r6, #2
  4083a2:	7875      	ldrb	r5, [r6, #1]
  4083a4:	f04f 0a01 	mov.w	sl, #1
  4083a8:	e7a8      	b.n	4082fc <_strtoul_r+0x3c>
  4083aa:	7820      	ldrb	r0, [r4, #0]
  4083ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4083b0:	2858      	cmp	r0, #88	; 0x58
  4083b2:	d008      	beq.n	4083c6 <_strtoul_r+0x106>
  4083b4:	2b00      	cmp	r3, #0
  4083b6:	d1a4      	bne.n	408302 <_strtoul_r+0x42>
  4083b8:	2308      	movs	r3, #8
  4083ba:	4699      	mov	r9, r3
  4083bc:	f04f 0b07 	mov.w	fp, #7
  4083c0:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
  4083c4:	e7a6      	b.n	408314 <_strtoul_r+0x54>
  4083c6:	2310      	movs	r3, #16
  4083c8:	7865      	ldrb	r5, [r4, #1]
  4083ca:	4699      	mov	r9, r3
  4083cc:	f04f 0b0f 	mov.w	fp, #15
  4083d0:	3402      	adds	r4, #2
  4083d2:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
  4083d6:	e79d      	b.n	408314 <_strtoul_r+0x54>
  4083d8:	2000051c 	.word	0x2000051c
  4083dc:	19999999 	.word	0x19999999

004083e0 <_strtoull_r>:
  4083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083e4:	4c60      	ldr	r4, [pc, #384]	; (408568 <_strtoull_r+0x188>)
  4083e6:	b085      	sub	sp, #20
  4083e8:	f8d4 8000 	ldr.w	r8, [r4]
  4083ec:	9200      	str	r2, [sp, #0]
  4083ee:	9101      	str	r1, [sp, #4]
  4083f0:	9003      	str	r0, [sp, #12]
  4083f2:	4699      	mov	r9, r3
  4083f4:	460a      	mov	r2, r1
  4083f6:	e000      	b.n	4083fa <_strtoull_r+0x1a>
  4083f8:	4632      	mov	r2, r6
  4083fa:	4616      	mov	r6, r2
  4083fc:	f816 7b01 	ldrb.w	r7, [r6], #1
  408400:	eb08 0307 	add.w	r3, r8, r7
  408404:	785b      	ldrb	r3, [r3, #1]
  408406:	f003 0308 	and.w	r3, r3, #8
  40840a:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  40840e:	2b00      	cmp	r3, #0
  408410:	d1f2      	bne.n	4083f8 <_strtoull_r+0x18>
  408412:	2f2d      	cmp	r7, #45	; 0x2d
  408414:	d07d      	beq.n	408512 <_strtoull_r+0x132>
  408416:	2f2b      	cmp	r7, #43	; 0x2b
  408418:	bf08      	it	eq
  40841a:	7857      	ldrbeq	r7, [r2, #1]
  40841c:	9102      	str	r1, [sp, #8]
  40841e:	bf08      	it	eq
  408420:	1c96      	addeq	r6, r2, #2
  408422:	f039 0210 	bics.w	r2, r9, #16
  408426:	d055      	beq.n	4084d4 <_strtoull_r+0xf4>
  408428:	ea4f 7be9 	mov.w	fp, r9, asr #31
  40842c:	464a      	mov	r2, r9
  40842e:	465b      	mov	r3, fp
  408430:	f04f 30ff 	mov.w	r0, #4294967295
  408434:	f04f 31ff 	mov.w	r1, #4294967295
  408438:	f004 fa88 	bl	40c94c <__aeabi_uldivmod>
  40843c:	464a      	mov	r2, r9
  40843e:	4604      	mov	r4, r0
  408440:	460d      	mov	r5, r1
  408442:	465b      	mov	r3, fp
  408444:	f04f 30ff 	mov.w	r0, #4294967295
  408448:	f04f 31ff 	mov.w	r1, #4294967295
  40844c:	f004 fa7e 	bl	40c94c <__aeabi_uldivmod>
  408450:	46ca      	mov	sl, r9
  408452:	4694      	mov	ip, r2
  408454:	2300      	movs	r3, #0
  408456:	2000      	movs	r0, #0
  408458:	2100      	movs	r1, #0
  40845a:	e019      	b.n	408490 <_strtoull_r+0xb0>
  40845c:	3f30      	subs	r7, #48	; 0x30
  40845e:	45b9      	cmp	r9, r7
  408460:	dd26      	ble.n	4084b0 <_strtoull_r+0xd0>
  408462:	2b00      	cmp	r3, #0
  408464:	db33      	blt.n	4084ce <_strtoull_r+0xee>
  408466:	428d      	cmp	r5, r1
  408468:	bf08      	it	eq
  40846a:	4284      	cmpeq	r4, r0
  40846c:	d32f      	bcc.n	4084ce <_strtoull_r+0xee>
  40846e:	42a9      	cmp	r1, r5
  408470:	bf08      	it	eq
  408472:	42a0      	cmpeq	r0, r4
  408474:	d029      	beq.n	4084ca <_strtoull_r+0xea>
  408476:	fb00 f30b 	mul.w	r3, r0, fp
  40847a:	fb0a 3301 	mla	r3, sl, r1, r3
  40847e:	fba0 010a 	umull	r0, r1, r0, sl
  408482:	4419      	add	r1, r3
  408484:	19c0      	adds	r0, r0, r7
  408486:	eb41 71e7 	adc.w	r1, r1, r7, asr #31
  40848a:	2301      	movs	r3, #1
  40848c:	f816 7b01 	ldrb.w	r7, [r6], #1
  408490:	eb08 0207 	add.w	r2, r8, r7
  408494:	7852      	ldrb	r2, [r2, #1]
  408496:	f012 0f04 	tst.w	r2, #4
  40849a:	d1df      	bne.n	40845c <_strtoull_r+0x7c>
  40849c:	f012 0203 	ands.w	r2, r2, #3
  4084a0:	d006      	beq.n	4084b0 <_strtoull_r+0xd0>
  4084a2:	2a01      	cmp	r2, #1
  4084a4:	bf14      	ite	ne
  4084a6:	2257      	movne	r2, #87	; 0x57
  4084a8:	2237      	moveq	r2, #55	; 0x37
  4084aa:	1abf      	subs	r7, r7, r2
  4084ac:	45b9      	cmp	r9, r7
  4084ae:	dcd8      	bgt.n	408462 <_strtoull_r+0x82>
  4084b0:	2b00      	cmp	r3, #0
  4084b2:	db26      	blt.n	408502 <_strtoull_r+0x122>
  4084b4:	9a02      	ldr	r2, [sp, #8]
  4084b6:	bb02      	cbnz	r2, 4084fa <_strtoull_r+0x11a>
  4084b8:	9a00      	ldr	r2, [sp, #0]
  4084ba:	b11a      	cbz	r2, 4084c4 <_strtoull_r+0xe4>
  4084bc:	b9db      	cbnz	r3, 4084f6 <_strtoull_r+0x116>
  4084be:	9e01      	ldr	r6, [sp, #4]
  4084c0:	9b00      	ldr	r3, [sp, #0]
  4084c2:	601e      	str	r6, [r3, #0]
  4084c4:	b005      	add	sp, #20
  4084c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4084ca:	4567      	cmp	r7, ip
  4084cc:	ddd3      	ble.n	408476 <_strtoull_r+0x96>
  4084ce:	f04f 33ff 	mov.w	r3, #4294967295
  4084d2:	e7db      	b.n	40848c <_strtoull_r+0xac>
  4084d4:	2f30      	cmp	r7, #48	; 0x30
  4084d6:	d021      	beq.n	40851c <_strtoull_r+0x13c>
  4084d8:	f1b9 0f00 	cmp.w	r9, #0
  4084dc:	d1a4      	bne.n	408428 <_strtoull_r+0x48>
  4084de:	f04f 0c05 	mov.w	ip, #5
  4084e2:	f04f 3499 	mov.w	r4, #2576980377	; 0x99999999
  4084e6:	4d21      	ldr	r5, [pc, #132]	; (40856c <_strtoull_r+0x18c>)
  4084e8:	f04f 0a0a 	mov.w	sl, #10
  4084ec:	f04f 0b00 	mov.w	fp, #0
  4084f0:	f04f 090a 	mov.w	r9, #10
  4084f4:	e7ae      	b.n	408454 <_strtoull_r+0x74>
  4084f6:	3e01      	subs	r6, #1
  4084f8:	e7e2      	b.n	4084c0 <_strtoull_r+0xe0>
  4084fa:	4240      	negs	r0, r0
  4084fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408500:	e7da      	b.n	4084b8 <_strtoull_r+0xd8>
  408502:	9903      	ldr	r1, [sp, #12]
  408504:	2222      	movs	r2, #34	; 0x22
  408506:	600a      	str	r2, [r1, #0]
  408508:	f04f 30ff 	mov.w	r0, #4294967295
  40850c:	f04f 31ff 	mov.w	r1, #4294967295
  408510:	e7d2      	b.n	4084b8 <_strtoull_r+0xd8>
  408512:	2101      	movs	r1, #1
  408514:	1c96      	adds	r6, r2, #2
  408516:	7857      	ldrb	r7, [r2, #1]
  408518:	9102      	str	r1, [sp, #8]
  40851a:	e782      	b.n	408422 <_strtoull_r+0x42>
  40851c:	7833      	ldrb	r3, [r6, #0]
  40851e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
  408522:	2b58      	cmp	r3, #88	; 0x58
  408524:	d010      	beq.n	408548 <_strtoull_r+0x168>
  408526:	f1b9 0f00 	cmp.w	r9, #0
  40852a:	f47f af7d 	bne.w	408428 <_strtoull_r+0x48>
  40852e:	f04f 0c07 	mov.w	ip, #7
  408532:	f04f 34ff 	mov.w	r4, #4294967295
  408536:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
  40853a:	f04f 0a08 	mov.w	sl, #8
  40853e:	f04f 0b00 	mov.w	fp, #0
  408542:	f04f 0908 	mov.w	r9, #8
  408546:	e785      	b.n	408454 <_strtoull_r+0x74>
  408548:	7877      	ldrb	r7, [r6, #1]
  40854a:	f04f 0c0f 	mov.w	ip, #15
  40854e:	3602      	adds	r6, #2
  408550:	f04f 34ff 	mov.w	r4, #4294967295
  408554:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  408558:	f04f 0a10 	mov.w	sl, #16
  40855c:	f04f 0b00 	mov.w	fp, #0
  408560:	f04f 0910 	mov.w	r9, #16
  408564:	e776      	b.n	408454 <_strtoull_r+0x74>
  408566:	bf00      	nop
  408568:	2000051c 	.word	0x2000051c
  40856c:	19999999 	.word	0x19999999

00408570 <_sungetc_r>:
  408570:	b538      	push	{r3, r4, r5, lr}
  408572:	1c4b      	adds	r3, r1, #1
  408574:	4614      	mov	r4, r2
  408576:	d019      	beq.n	4085ac <_sungetc_r+0x3c>
  408578:	8992      	ldrh	r2, [r2, #12]
  40857a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40857c:	f022 0220 	bic.w	r2, r2, #32
  408580:	b2cd      	uxtb	r5, r1
  408582:	81a2      	strh	r2, [r4, #12]
  408584:	b1ab      	cbz	r3, 4085b2 <_sungetc_r+0x42>
  408586:	6862      	ldr	r2, [r4, #4]
  408588:	6b63      	ldr	r3, [r4, #52]	; 0x34
  40858a:	429a      	cmp	r2, r3
  40858c:	da09      	bge.n	4085a2 <_sungetc_r+0x32>
  40858e:	6823      	ldr	r3, [r4, #0]
  408590:	1e5a      	subs	r2, r3, #1
  408592:	6022      	str	r2, [r4, #0]
  408594:	f803 5c01 	strb.w	r5, [r3, #-1]
  408598:	6863      	ldr	r3, [r4, #4]
  40859a:	3301      	adds	r3, #1
  40859c:	4628      	mov	r0, r5
  40859e:	6063      	str	r3, [r4, #4]
  4085a0:	bd38      	pop	{r3, r4, r5, pc}
  4085a2:	4621      	mov	r1, r4
  4085a4:	f001 fafe 	bl	409ba4 <__submore>
  4085a8:	2800      	cmp	r0, #0
  4085aa:	d0f0      	beq.n	40858e <_sungetc_r+0x1e>
  4085ac:	f04f 30ff 	mov.w	r0, #4294967295
  4085b0:	bd38      	pop	{r3, r4, r5, pc}
  4085b2:	6923      	ldr	r3, [r4, #16]
  4085b4:	6822      	ldr	r2, [r4, #0]
  4085b6:	b12b      	cbz	r3, 4085c4 <_sungetc_r+0x54>
  4085b8:	4293      	cmp	r3, r2
  4085ba:	d203      	bcs.n	4085c4 <_sungetc_r+0x54>
  4085bc:	f812 0c01 	ldrb.w	r0, [r2, #-1]
  4085c0:	42a8      	cmp	r0, r5
  4085c2:	d00f      	beq.n	4085e4 <_sungetc_r+0x74>
  4085c4:	4623      	mov	r3, r4
  4085c6:	6861      	ldr	r1, [r4, #4]
  4085c8:	63a2      	str	r2, [r4, #56]	; 0x38
  4085ca:	f104 0040 	add.w	r0, r4, #64	; 0x40
  4085ce:	2203      	movs	r2, #3
  4085d0:	6320      	str	r0, [r4, #48]	; 0x30
  4085d2:	6362      	str	r2, [r4, #52]	; 0x34
  4085d4:	63e1      	str	r1, [r4, #60]	; 0x3c
  4085d6:	f803 5f42 	strb.w	r5, [r3, #66]!
  4085da:	2201      	movs	r2, #1
  4085dc:	6023      	str	r3, [r4, #0]
  4085de:	4628      	mov	r0, r5
  4085e0:	6062      	str	r2, [r4, #4]
  4085e2:	bd38      	pop	{r3, r4, r5, pc}
  4085e4:	6863      	ldr	r3, [r4, #4]
  4085e6:	3a01      	subs	r2, #1
  4085e8:	3301      	adds	r3, #1
  4085ea:	e884 000c 	stmia.w	r4, {r2, r3}
  4085ee:	bd38      	pop	{r3, r4, r5, pc}

004085f0 <__ssrefill_r>:
  4085f0:	b510      	push	{r4, lr}
  4085f2:	460c      	mov	r4, r1
  4085f4:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4085f6:	b169      	cbz	r1, 408614 <__ssrefill_r+0x24>
  4085f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4085fc:	4299      	cmp	r1, r3
  4085fe:	d001      	beq.n	408604 <__ssrefill_r+0x14>
  408600:	f7fd fbfc 	bl	405dfc <_free_r>
  408604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  408606:	6063      	str	r3, [r4, #4]
  408608:	2000      	movs	r0, #0
  40860a:	6320      	str	r0, [r4, #48]	; 0x30
  40860c:	b113      	cbz	r3, 408614 <__ssrefill_r+0x24>
  40860e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  408610:	6023      	str	r3, [r4, #0]
  408612:	bd10      	pop	{r4, pc}
  408614:	89a2      	ldrh	r2, [r4, #12]
  408616:	6923      	ldr	r3, [r4, #16]
  408618:	6023      	str	r3, [r4, #0]
  40861a:	f042 0220 	orr.w	r2, r2, #32
  40861e:	2300      	movs	r3, #0
  408620:	81a2      	strh	r2, [r4, #12]
  408622:	6063      	str	r3, [r4, #4]
  408624:	f04f 30ff 	mov.w	r0, #4294967295
  408628:	bd10      	pop	{r4, pc}
  40862a:	bf00      	nop

0040862c <_sfread_r>:
  40862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408630:	b083      	sub	sp, #12
  408632:	fb02 f903 	mul.w	r9, r2, r3
  408636:	9201      	str	r2, [sp, #4]
  408638:	469a      	mov	sl, r3
  40863a:	4607      	mov	r7, r0
  40863c:	460e      	mov	r6, r1
  40863e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408640:	f1b9 0f00 	cmp.w	r9, #0
  408644:	d026      	beq.n	408694 <_sfread_r+0x68>
  408646:	464d      	mov	r5, r9
  408648:	f04f 0800 	mov.w	r8, #0
  40864c:	e00e      	b.n	40866c <_sfread_r+0x40>
  40864e:	f7fa ffe1 	bl	403614 <memcpy>
  408652:	6822      	ldr	r2, [r4, #0]
  408654:	f8c4 8004 	str.w	r8, [r4, #4]
  408658:	445a      	add	r2, fp
  40865a:	6022      	str	r2, [r4, #0]
  40865c:	4638      	mov	r0, r7
  40865e:	4621      	mov	r1, r4
  408660:	445e      	add	r6, fp
  408662:	ebcb 0505 	rsb	r5, fp, r5
  408666:	f7ff ffc3 	bl	4085f0 <__ssrefill_r>
  40866a:	b9b8      	cbnz	r0, 40869c <_sfread_r+0x70>
  40866c:	f8d4 b004 	ldr.w	fp, [r4, #4]
  408670:	6821      	ldr	r1, [r4, #0]
  408672:	455d      	cmp	r5, fp
  408674:	4630      	mov	r0, r6
  408676:	465a      	mov	r2, fp
  408678:	d8e9      	bhi.n	40864e <_sfread_r+0x22>
  40867a:	462a      	mov	r2, r5
  40867c:	f7fa ffca 	bl	403614 <memcpy>
  408680:	6862      	ldr	r2, [r4, #4]
  408682:	6823      	ldr	r3, [r4, #0]
  408684:	1b52      	subs	r2, r2, r5
  408686:	442b      	add	r3, r5
  408688:	4650      	mov	r0, sl
  40868a:	6062      	str	r2, [r4, #4]
  40868c:	6023      	str	r3, [r4, #0]
  40868e:	b003      	add	sp, #12
  408690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408694:	4648      	mov	r0, r9
  408696:	b003      	add	sp, #12
  408698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40869c:	9b01      	ldr	r3, [sp, #4]
  40869e:	ebc5 0909 	rsb	r9, r5, r9
  4086a2:	fbb9 f0f3 	udiv	r0, r9, r3
  4086a6:	b003      	add	sp, #12
  4086a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004086ac <_svfprintf_r>:
  4086ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086b0:	b0c9      	sub	sp, #292	; 0x124
  4086b2:	4691      	mov	r9, r2
  4086b4:	9310      	str	r3, [sp, #64]	; 0x40
  4086b6:	910c      	str	r1, [sp, #48]	; 0x30
  4086b8:	900d      	str	r0, [sp, #52]	; 0x34
  4086ba:	f7fd fe37 	bl	40632c <_localeconv_r>
  4086be:	6800      	ldr	r0, [r0, #0]
  4086c0:	9015      	str	r0, [sp, #84]	; 0x54
  4086c2:	f7fb fa91 	bl	403be8 <strlen>
  4086c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4086c8:	9018      	str	r0, [sp, #96]	; 0x60
  4086ca:	89a3      	ldrh	r3, [r4, #12]
  4086cc:	061a      	lsls	r2, r3, #24
  4086ce:	d503      	bpl.n	4086d8 <_svfprintf_r+0x2c>
  4086d0:	6923      	ldr	r3, [r4, #16]
  4086d2:	2b00      	cmp	r3, #0
  4086d4:	f001 808d 	beq.w	4097f2 <_svfprintf_r+0x1146>
  4086d8:	ac38      	add	r4, sp, #224	; 0xe0
  4086da:	46a4      	mov	ip, r4
  4086dc:	9408      	str	r4, [sp, #32]
  4086de:	942b      	str	r4, [sp, #172]	; 0xac
  4086e0:	2500      	movs	r5, #0
  4086e2:	2400      	movs	r4, #0
  4086e4:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4086e8:	2300      	movs	r3, #0
  4086ea:	9311      	str	r3, [sp, #68]	; 0x44
  4086ec:	932d      	str	r3, [sp, #180]	; 0xb4
  4086ee:	932c      	str	r3, [sp, #176]	; 0xb0
  4086f0:	931a      	str	r3, [sp, #104]	; 0x68
  4086f2:	9319      	str	r3, [sp, #100]	; 0x64
  4086f4:	930e      	str	r3, [sp, #56]	; 0x38
  4086f6:	4666      	mov	r6, ip
  4086f8:	f899 3000 	ldrb.w	r3, [r9]
  4086fc:	2b00      	cmp	r3, #0
  4086fe:	f000 80f8 	beq.w	4088f2 <_svfprintf_r+0x246>
  408702:	2b25      	cmp	r3, #37	; 0x25
  408704:	f000 80f5 	beq.w	4088f2 <_svfprintf_r+0x246>
  408708:	f109 0201 	add.w	r2, r9, #1
  40870c:	e001      	b.n	408712 <_svfprintf_r+0x66>
  40870e:	2b25      	cmp	r3, #37	; 0x25
  408710:	d004      	beq.n	40871c <_svfprintf_r+0x70>
  408712:	4614      	mov	r4, r2
  408714:	3201      	adds	r2, #1
  408716:	7823      	ldrb	r3, [r4, #0]
  408718:	2b00      	cmp	r3, #0
  40871a:	d1f8      	bne.n	40870e <_svfprintf_r+0x62>
  40871c:	ebc9 0504 	rsb	r5, r9, r4
  408720:	b17d      	cbz	r5, 408742 <_svfprintf_r+0x96>
  408722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408724:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  408726:	f8c6 9000 	str.w	r9, [r6]
  40872a:	3301      	adds	r3, #1
  40872c:	442a      	add	r2, r5
  40872e:	2b07      	cmp	r3, #7
  408730:	6075      	str	r5, [r6, #4]
  408732:	922d      	str	r2, [sp, #180]	; 0xb4
  408734:	932c      	str	r3, [sp, #176]	; 0xb0
  408736:	f300 80c2 	bgt.w	4088be <_svfprintf_r+0x212>
  40873a:	3608      	adds	r6, #8
  40873c:	980e      	ldr	r0, [sp, #56]	; 0x38
  40873e:	4428      	add	r0, r5
  408740:	900e      	str	r0, [sp, #56]	; 0x38
  408742:	7823      	ldrb	r3, [r4, #0]
  408744:	2b00      	cmp	r3, #0
  408746:	f000 80c2 	beq.w	4088ce <_svfprintf_r+0x222>
  40874a:	2300      	movs	r3, #0
  40874c:	f894 8001 	ldrb.w	r8, [r4, #1]
  408750:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408754:	461a      	mov	r2, r3
  408756:	930f      	str	r3, [sp, #60]	; 0x3c
  408758:	9309      	str	r3, [sp, #36]	; 0x24
  40875a:	f104 0901 	add.w	r9, r4, #1
  40875e:	f04f 34ff 	mov.w	r4, #4294967295
  408762:	940a      	str	r4, [sp, #40]	; 0x28
  408764:	f109 0901 	add.w	r9, r9, #1
  408768:	f1a8 0320 	sub.w	r3, r8, #32
  40876c:	2b58      	cmp	r3, #88	; 0x58
  40876e:	f200 83c7 	bhi.w	408f00 <_svfprintf_r+0x854>
  408772:	e8df f013 	tbh	[pc, r3, lsl #1]
  408776:	026a      	.short	0x026a
  408778:	03c503c5 	.word	0x03c503c5
  40877c:	03c50271 	.word	0x03c50271
  408780:	03c503c5 	.word	0x03c503c5
  408784:	03c503c5 	.word	0x03c503c5
  408788:	031403c5 	.word	0x031403c5
  40878c:	03c50364 	.word	0x03c50364
  408790:	00c0009d 	.word	0x00c0009d
  408794:	027803c5 	.word	0x027803c5
  408798:	027f027f 	.word	0x027f027f
  40879c:	027f027f 	.word	0x027f027f
  4087a0:	027f027f 	.word	0x027f027f
  4087a4:	027f027f 	.word	0x027f027f
  4087a8:	03c5027f 	.word	0x03c5027f
  4087ac:	03c503c5 	.word	0x03c503c5
  4087b0:	03c503c5 	.word	0x03c503c5
  4087b4:	03c503c5 	.word	0x03c503c5
  4087b8:	03c503c5 	.word	0x03c503c5
  4087bc:	029003c5 	.word	0x029003c5
  4087c0:	03c5036f 	.word	0x03c5036f
  4087c4:	03c5036f 	.word	0x03c5036f
  4087c8:	03c503c5 	.word	0x03c503c5
  4087cc:	036803c5 	.word	0x036803c5
  4087d0:	03c503c5 	.word	0x03c503c5
  4087d4:	03c50078 	.word	0x03c50078
  4087d8:	03c503c5 	.word	0x03c503c5
  4087dc:	03c503c5 	.word	0x03c503c5
  4087e0:	03c50059 	.word	0x03c50059
  4087e4:	02af03c5 	.word	0x02af03c5
  4087e8:	03c503c5 	.word	0x03c503c5
  4087ec:	03c503c5 	.word	0x03c503c5
  4087f0:	03c503c5 	.word	0x03c503c5
  4087f4:	03c503c5 	.word	0x03c503c5
  4087f8:	03c503c5 	.word	0x03c503c5
  4087fc:	03480337 	.word	0x03480337
  408800:	036f036f 	.word	0x036f036f
  408804:	02ff036f 	.word	0x02ff036f
  408808:	03c50348 	.word	0x03c50348
  40880c:	030803c5 	.word	0x030803c5
  408810:	02c503c5 	.word	0x02c503c5
  408814:	0321007c 	.word	0x0321007c
  408818:	03c503a5 	.word	0x03c503a5
  40881c:	03c502d9 	.word	0x03c502d9
  408820:	03c5005f 	.word	0x03c5005f
  408824:	00de03c5 	.word	0x00de03c5
  408828:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40882c:	f04c 0c10 	orr.w	ip, ip, #16
  408830:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408834:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408836:	06a2      	lsls	r2, r4, #26
  408838:	f100 8356 	bmi.w	408ee8 <_svfprintf_r+0x83c>
  40883c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40883e:	06e3      	lsls	r3, r4, #27
  408840:	f100 85e0 	bmi.w	409404 <_svfprintf_r+0xd58>
  408844:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408848:	f01c 0f40 	tst.w	ip, #64	; 0x40
  40884c:	f000 85da 	beq.w	409404 <_svfprintf_r+0xd58>
  408850:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408854:	f8bc 4000 	ldrh.w	r4, [ip]
  408858:	f10c 0c04 	add.w	ip, ip, #4
  40885c:	2500      	movs	r5, #0
  40885e:	2301      	movs	r3, #1
  408860:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408864:	e08c      	b.n	408980 <_svfprintf_r+0x2d4>
  408866:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408868:	f045 0510 	orr.w	r5, r5, #16
  40886c:	9509      	str	r5, [sp, #36]	; 0x24
  40886e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408872:	f01c 0320 	ands.w	r3, ip, #32
  408876:	f040 832c 	bne.w	408ed2 <_svfprintf_r+0x826>
  40887a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40887e:	f01c 0210 	ands.w	r2, ip, #16
  408882:	f040 85b8 	bne.w	4093f6 <_svfprintf_r+0xd4a>
  408886:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40888a:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  40888e:	f000 85b2 	beq.w	4093f6 <_svfprintf_r+0xd4a>
  408892:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408896:	f8bc 4000 	ldrh.w	r4, [ip]
  40889a:	f10c 0c04 	add.w	ip, ip, #4
  40889e:	4613      	mov	r3, r2
  4088a0:	2500      	movs	r5, #0
  4088a2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4088a6:	e06b      	b.n	408980 <_svfprintf_r+0x2d4>
  4088a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4088aa:	9310      	str	r3, [sp, #64]	; 0x40
  4088ac:	4264      	negs	r4, r4
  4088ae:	940f      	str	r4, [sp, #60]	; 0x3c
  4088b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4088b2:	f045 0504 	orr.w	r5, r5, #4
  4088b6:	9509      	str	r5, [sp, #36]	; 0x24
  4088b8:	f899 8000 	ldrb.w	r8, [r9]
  4088bc:	e752      	b.n	408764 <_svfprintf_r+0xb8>
  4088be:	980d      	ldr	r0, [sp, #52]	; 0x34
  4088c0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4088c2:	aa2b      	add	r2, sp, #172	; 0xac
  4088c4:	f003 faa8 	bl	40be18 <__ssprint_r>
  4088c8:	b940      	cbnz	r0, 4088dc <_svfprintf_r+0x230>
  4088ca:	ae38      	add	r6, sp, #224	; 0xe0
  4088cc:	e736      	b.n	40873c <_svfprintf_r+0x90>
  4088ce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4088d0:	b123      	cbz	r3, 4088dc <_svfprintf_r+0x230>
  4088d2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4088d4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4088d6:	aa2b      	add	r2, sp, #172	; 0xac
  4088d8:	f003 fa9e 	bl	40be18 <__ssprint_r>
  4088dc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4088de:	980e      	ldr	r0, [sp, #56]	; 0x38
  4088e0:	89a3      	ldrh	r3, [r4, #12]
  4088e2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4088e6:	bf18      	it	ne
  4088e8:	f04f 30ff 	movne.w	r0, #4294967295
  4088ec:	b049      	add	sp, #292	; 0x124
  4088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4088f2:	464c      	mov	r4, r9
  4088f4:	e725      	b.n	408742 <_svfprintf_r+0x96>
  4088f6:	f899 8000 	ldrb.w	r8, [r9]
  4088fa:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  4088fe:	f109 0001 	add.w	r0, r9, #1
  408902:	f001 8118 	beq.w	409b36 <_svfprintf_r+0x148a>
  408906:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  40890a:	2b09      	cmp	r3, #9
  40890c:	bf98      	it	ls
  40890e:	2100      	movls	r1, #0
  408910:	f201 8077 	bhi.w	409a02 <_svfprintf_r+0x1356>
  408914:	f810 8b01 	ldrb.w	r8, [r0], #1
  408918:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40891c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  408920:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  408924:	2b09      	cmp	r3, #9
  408926:	d9f5      	bls.n	408914 <_svfprintf_r+0x268>
  408928:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  40892c:	910a      	str	r1, [sp, #40]	; 0x28
  40892e:	4681      	mov	r9, r0
  408930:	e71a      	b.n	408768 <_svfprintf_r+0xbc>
  408932:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408934:	4ca1      	ldr	r4, [pc, #644]	; (408bbc <_svfprintf_r+0x510>)
  408936:	941a      	str	r4, [sp, #104]	; 0x68
  408938:	06af      	lsls	r7, r5, #26
  40893a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  40893e:	f140 81d1 	bpl.w	408ce4 <_svfprintf_r+0x638>
  408942:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408946:	f10c 0307 	add.w	r3, ip, #7
  40894a:	f023 0307 	bic.w	r3, r3, #7
  40894e:	f103 0408 	add.w	r4, r3, #8
  408952:	9410      	str	r4, [sp, #64]	; 0x40
  408954:	e9d3 4500 	ldrd	r4, r5, [r3]
  408958:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40895c:	f01c 0f01 	tst.w	ip, #1
  408960:	f000 8464 	beq.w	40922c <_svfprintf_r+0xb80>
  408964:	ea54 0005 	orrs.w	r0, r4, r5
  408968:	f000 8460 	beq.w	40922c <_svfprintf_r+0xb80>
  40896c:	2330      	movs	r3, #48	; 0x30
  40896e:	f04c 0c02 	orr.w	ip, ip, #2
  408972:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  408976:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  40897a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40897e:	2302      	movs	r3, #2
  408980:	f04f 0a00 	mov.w	sl, #0
  408984:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  408988:	990a      	ldr	r1, [sp, #40]	; 0x28
  40898a:	2900      	cmp	r1, #0
  40898c:	db05      	blt.n	40899a <_svfprintf_r+0x2ee>
  40898e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408992:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  408996:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  40899a:	ea54 0005 	orrs.w	r0, r4, r5
  40899e:	f040 82c7 	bne.w	408f30 <_svfprintf_r+0x884>
  4089a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4089a4:	2900      	cmp	r1, #0
  4089a6:	f040 82c3 	bne.w	408f30 <_svfprintf_r+0x884>
  4089aa:	2b00      	cmp	r3, #0
  4089ac:	f040 843a 	bne.w	409224 <_svfprintf_r+0xb78>
  4089b0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4089b4:	f01c 0f01 	tst.w	ip, #1
  4089b8:	f000 8434 	beq.w	409224 <_svfprintf_r+0xb78>
  4089bc:	af48      	add	r7, sp, #288	; 0x120
  4089be:	2330      	movs	r3, #48	; 0x30
  4089c0:	f807 3d41 	strb.w	r3, [r7, #-65]!
  4089c4:	9d08      	ldr	r5, [sp, #32]
  4089c6:	1bec      	subs	r4, r5, r7
  4089c8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  4089cc:	2500      	movs	r5, #0
  4089ce:	4564      	cmp	r4, ip
  4089d0:	bfa8      	it	ge
  4089d2:	46a4      	movge	ip, r4
  4089d4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4089d8:	9514      	str	r5, [sp, #80]	; 0x50
  4089da:	f1ba 0f00 	cmp.w	sl, #0
  4089de:	d002      	beq.n	4089e6 <_svfprintf_r+0x33a>
  4089e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4089e2:	3501      	adds	r5, #1
  4089e4:	950b      	str	r5, [sp, #44]	; 0x2c
  4089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4089e8:	f013 0302 	ands.w	r3, r3, #2
  4089ec:	9312      	str	r3, [sp, #72]	; 0x48
  4089ee:	d002      	beq.n	4089f6 <_svfprintf_r+0x34a>
  4089f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4089f2:	3502      	adds	r5, #2
  4089f4:	950b      	str	r5, [sp, #44]	; 0x2c
  4089f6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4089fa:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  4089fe:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  408a02:	f040 8292 	bne.w	408f2a <_svfprintf_r+0x87e>
  408a06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408a08:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  408a0c:	ebcc 0b05 	rsb	fp, ip, r5
  408a10:	f1bb 0f00 	cmp.w	fp, #0
  408a14:	f340 8289 	ble.w	408f2a <_svfprintf_r+0x87e>
  408a18:	f1bb 0f10 	cmp.w	fp, #16
  408a1c:	992d      	ldr	r1, [sp, #180]	; 0xb4
  408a1e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  408a20:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 408bc4 <_svfprintf_r+0x518>
  408a24:	dd2c      	ble.n	408a80 <_svfprintf_r+0x3d4>
  408a26:	971b      	str	r7, [sp, #108]	; 0x6c
  408a28:	4630      	mov	r0, r6
  408a2a:	4657      	mov	r7, sl
  408a2c:	2510      	movs	r5, #16
  408a2e:	46ca      	mov	sl, r9
  408a30:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  408a32:	46a1      	mov	r9, r4
  408a34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408a36:	e006      	b.n	408a46 <_svfprintf_r+0x39a>
  408a38:	f1ab 0b10 	sub.w	fp, fp, #16
  408a3c:	f1bb 0f10 	cmp.w	fp, #16
  408a40:	f100 0008 	add.w	r0, r0, #8
  408a44:	dd17      	ble.n	408a76 <_svfprintf_r+0x3ca>
  408a46:	3201      	adds	r2, #1
  408a48:	3110      	adds	r1, #16
  408a4a:	2a07      	cmp	r2, #7
  408a4c:	912d      	str	r1, [sp, #180]	; 0xb4
  408a4e:	922c      	str	r2, [sp, #176]	; 0xb0
  408a50:	6007      	str	r7, [r0, #0]
  408a52:	6045      	str	r5, [r0, #4]
  408a54:	ddf0      	ble.n	408a38 <_svfprintf_r+0x38c>
  408a56:	4620      	mov	r0, r4
  408a58:	4631      	mov	r1, r6
  408a5a:	aa2b      	add	r2, sp, #172	; 0xac
  408a5c:	f003 f9dc 	bl	40be18 <__ssprint_r>
  408a60:	2800      	cmp	r0, #0
  408a62:	f47f af3b 	bne.w	4088dc <_svfprintf_r+0x230>
  408a66:	f1ab 0b10 	sub.w	fp, fp, #16
  408a6a:	f1bb 0f10 	cmp.w	fp, #16
  408a6e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  408a70:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  408a72:	a838      	add	r0, sp, #224	; 0xe0
  408a74:	dce7      	bgt.n	408a46 <_svfprintf_r+0x39a>
  408a76:	464c      	mov	r4, r9
  408a78:	46d1      	mov	r9, sl
  408a7a:	46ba      	mov	sl, r7
  408a7c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  408a7e:	4606      	mov	r6, r0
  408a80:	3201      	adds	r2, #1
  408a82:	eb0b 0c01 	add.w	ip, fp, r1
  408a86:	2a07      	cmp	r2, #7
  408a88:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408a8c:	922c      	str	r2, [sp, #176]	; 0xb0
  408a8e:	e886 0c00 	stmia.w	r6, {sl, fp}
  408a92:	f300 841c 	bgt.w	4092ce <_svfprintf_r+0xc22>
  408a96:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408a9a:	3608      	adds	r6, #8
  408a9c:	f1ba 0f00 	cmp.w	sl, #0
  408aa0:	d00f      	beq.n	408ac2 <_svfprintf_r+0x416>
  408aa2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408aa4:	3301      	adds	r3, #1
  408aa6:	f10c 0c01 	add.w	ip, ip, #1
  408aaa:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  408aae:	2201      	movs	r2, #1
  408ab0:	2b07      	cmp	r3, #7
  408ab2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408ab6:	932c      	str	r3, [sp, #176]	; 0xb0
  408ab8:	e886 0006 	stmia.w	r6, {r1, r2}
  408abc:	f300 839a 	bgt.w	4091f4 <_svfprintf_r+0xb48>
  408ac0:	3608      	adds	r6, #8
  408ac2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  408ac4:	b173      	cbz	r3, 408ae4 <_svfprintf_r+0x438>
  408ac6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408ac8:	3301      	adds	r3, #1
  408aca:	f10c 0c02 	add.w	ip, ip, #2
  408ace:	a924      	add	r1, sp, #144	; 0x90
  408ad0:	2202      	movs	r2, #2
  408ad2:	2b07      	cmp	r3, #7
  408ad4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408ad8:	932c      	str	r3, [sp, #176]	; 0xb0
  408ada:	e886 0006 	stmia.w	r6, {r1, r2}
  408ade:	f300 8395 	bgt.w	40920c <_svfprintf_r+0xb60>
  408ae2:	3608      	adds	r6, #8
  408ae4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  408ae6:	2d80      	cmp	r5, #128	; 0x80
  408ae8:	f000 82cc 	beq.w	409084 <_svfprintf_r+0x9d8>
  408aec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  408aee:	ebc4 0a05 	rsb	sl, r4, r5
  408af2:	f1ba 0f00 	cmp.w	sl, #0
  408af6:	dd3b      	ble.n	408b70 <_svfprintf_r+0x4c4>
  408af8:	f1ba 0f10 	cmp.w	sl, #16
  408afc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408afe:	4d30      	ldr	r5, [pc, #192]	; (408bc0 <_svfprintf_r+0x514>)
  408b00:	dd2b      	ble.n	408b5a <_svfprintf_r+0x4ae>
  408b02:	940a      	str	r4, [sp, #40]	; 0x28
  408b04:	4632      	mov	r2, r6
  408b06:	f04f 0b10 	mov.w	fp, #16
  408b0a:	462e      	mov	r6, r5
  408b0c:	4661      	mov	r1, ip
  408b0e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  408b10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  408b12:	e006      	b.n	408b22 <_svfprintf_r+0x476>
  408b14:	f1aa 0a10 	sub.w	sl, sl, #16
  408b18:	f1ba 0f10 	cmp.w	sl, #16
  408b1c:	f102 0208 	add.w	r2, r2, #8
  408b20:	dd17      	ble.n	408b52 <_svfprintf_r+0x4a6>
  408b22:	3301      	adds	r3, #1
  408b24:	3110      	adds	r1, #16
  408b26:	2b07      	cmp	r3, #7
  408b28:	912d      	str	r1, [sp, #180]	; 0xb4
  408b2a:	932c      	str	r3, [sp, #176]	; 0xb0
  408b2c:	e882 0840 	stmia.w	r2, {r6, fp}
  408b30:	ddf0      	ble.n	408b14 <_svfprintf_r+0x468>
  408b32:	4620      	mov	r0, r4
  408b34:	4629      	mov	r1, r5
  408b36:	aa2b      	add	r2, sp, #172	; 0xac
  408b38:	f003 f96e 	bl	40be18 <__ssprint_r>
  408b3c:	2800      	cmp	r0, #0
  408b3e:	f47f aecd 	bne.w	4088dc <_svfprintf_r+0x230>
  408b42:	f1aa 0a10 	sub.w	sl, sl, #16
  408b46:	f1ba 0f10 	cmp.w	sl, #16
  408b4a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  408b4c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408b4e:	aa38      	add	r2, sp, #224	; 0xe0
  408b50:	dce7      	bgt.n	408b22 <_svfprintf_r+0x476>
  408b52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408b54:	4635      	mov	r5, r6
  408b56:	468c      	mov	ip, r1
  408b58:	4616      	mov	r6, r2
  408b5a:	3301      	adds	r3, #1
  408b5c:	44d4      	add	ip, sl
  408b5e:	2b07      	cmp	r3, #7
  408b60:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408b64:	932c      	str	r3, [sp, #176]	; 0xb0
  408b66:	e886 0420 	stmia.w	r6, {r5, sl}
  408b6a:	f300 8337 	bgt.w	4091dc <_svfprintf_r+0xb30>
  408b6e:	3608      	adds	r6, #8
  408b70:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408b72:	05ed      	lsls	r5, r5, #23
  408b74:	f100 8226 	bmi.w	408fc4 <_svfprintf_r+0x918>
  408b78:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408b7a:	6037      	str	r7, [r6, #0]
  408b7c:	3301      	adds	r3, #1
  408b7e:	44a4      	add	ip, r4
  408b80:	2b07      	cmp	r3, #7
  408b82:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408b86:	6074      	str	r4, [r6, #4]
  408b88:	932c      	str	r3, [sp, #176]	; 0xb0
  408b8a:	f300 8311 	bgt.w	4091b0 <_svfprintf_r+0xb04>
  408b8e:	3608      	adds	r6, #8
  408b90:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408b92:	0763      	lsls	r3, r4, #29
  408b94:	d549      	bpl.n	408c2a <_svfprintf_r+0x57e>
  408b96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408b98:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408b9a:	1a2c      	subs	r4, r5, r0
  408b9c:	2c00      	cmp	r4, #0
  408b9e:	dd44      	ble.n	408c2a <_svfprintf_r+0x57e>
  408ba0:	2c10      	cmp	r4, #16
  408ba2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408ba4:	f8df a01c 	ldr.w	sl, [pc, #28]	; 408bc4 <_svfprintf_r+0x518>
  408ba8:	dd2b      	ble.n	408c02 <_svfprintf_r+0x556>
  408baa:	4657      	mov	r7, sl
  408bac:	2510      	movs	r5, #16
  408bae:	4662      	mov	r2, ip
  408bb0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  408bb4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  408bb8:	e00b      	b.n	408bd2 <_svfprintf_r+0x526>
  408bba:	bf00      	nop
  408bbc:	0040d110 	.word	0x0040d110
  408bc0:	0040d2c0 	.word	0x0040d2c0
  408bc4:	0040d2e4 	.word	0x0040d2e4
  408bc8:	3c10      	subs	r4, #16
  408bca:	2c10      	cmp	r4, #16
  408bcc:	f106 0608 	add.w	r6, r6, #8
  408bd0:	dd15      	ble.n	408bfe <_svfprintf_r+0x552>
  408bd2:	3301      	adds	r3, #1
  408bd4:	3210      	adds	r2, #16
  408bd6:	2b07      	cmp	r3, #7
  408bd8:	922d      	str	r2, [sp, #180]	; 0xb4
  408bda:	932c      	str	r3, [sp, #176]	; 0xb0
  408bdc:	6037      	str	r7, [r6, #0]
  408bde:	6075      	str	r5, [r6, #4]
  408be0:	ddf2      	ble.n	408bc8 <_svfprintf_r+0x51c>
  408be2:	4650      	mov	r0, sl
  408be4:	4641      	mov	r1, r8
  408be6:	aa2b      	add	r2, sp, #172	; 0xac
  408be8:	f003 f916 	bl	40be18 <__ssprint_r>
  408bec:	2800      	cmp	r0, #0
  408bee:	f47f ae75 	bne.w	4088dc <_svfprintf_r+0x230>
  408bf2:	3c10      	subs	r4, #16
  408bf4:	2c10      	cmp	r4, #16
  408bf6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  408bf8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408bfa:	ae38      	add	r6, sp, #224	; 0xe0
  408bfc:	dce9      	bgt.n	408bd2 <_svfprintf_r+0x526>
  408bfe:	4694      	mov	ip, r2
  408c00:	46ba      	mov	sl, r7
  408c02:	3301      	adds	r3, #1
  408c04:	44a4      	add	ip, r4
  408c06:	2b07      	cmp	r3, #7
  408c08:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408c0c:	932c      	str	r3, [sp, #176]	; 0xb0
  408c0e:	f8c6 a000 	str.w	sl, [r6]
  408c12:	6074      	str	r4, [r6, #4]
  408c14:	dd09      	ble.n	408c2a <_svfprintf_r+0x57e>
  408c16:	980d      	ldr	r0, [sp, #52]	; 0x34
  408c18:	990c      	ldr	r1, [sp, #48]	; 0x30
  408c1a:	aa2b      	add	r2, sp, #172	; 0xac
  408c1c:	f003 f8fc 	bl	40be18 <__ssprint_r>
  408c20:	2800      	cmp	r0, #0
  408c22:	f47f ae5b 	bne.w	4088dc <_svfprintf_r+0x230>
  408c26:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  408c2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408c2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
  408c2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  408c30:	42a8      	cmp	r0, r5
  408c32:	bfac      	ite	ge
  408c34:	1824      	addge	r4, r4, r0
  408c36:	1964      	addlt	r4, r4, r5
  408c38:	940e      	str	r4, [sp, #56]	; 0x38
  408c3a:	f1bc 0f00 	cmp.w	ip, #0
  408c3e:	f040 82c3 	bne.w	4091c8 <_svfprintf_r+0xb1c>
  408c42:	2300      	movs	r3, #0
  408c44:	932c      	str	r3, [sp, #176]	; 0xb0
  408c46:	ae38      	add	r6, sp, #224	; 0xe0
  408c48:	e556      	b.n	4086f8 <_svfprintf_r+0x4c>
  408c4a:	f899 8000 	ldrb.w	r8, [r9]
  408c4e:	2a00      	cmp	r2, #0
  408c50:	f47f ad88 	bne.w	408764 <_svfprintf_r+0xb8>
  408c54:	2220      	movs	r2, #32
  408c56:	e585      	b.n	408764 <_svfprintf_r+0xb8>
  408c58:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408c5a:	f045 0501 	orr.w	r5, r5, #1
  408c5e:	9509      	str	r5, [sp, #36]	; 0x24
  408c60:	f899 8000 	ldrb.w	r8, [r9]
  408c64:	e57e      	b.n	408764 <_svfprintf_r+0xb8>
  408c66:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408c68:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  408c6c:	9509      	str	r5, [sp, #36]	; 0x24
  408c6e:	f899 8000 	ldrb.w	r8, [r9]
  408c72:	e577      	b.n	408764 <_svfprintf_r+0xb8>
  408c74:	2400      	movs	r4, #0
  408c76:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  408c7a:	940f      	str	r4, [sp, #60]	; 0x3c
  408c7c:	4621      	mov	r1, r4
  408c7e:	f819 8b01 	ldrb.w	r8, [r9], #1
  408c82:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  408c86:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  408c8a:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  408c8e:	2b09      	cmp	r3, #9
  408c90:	d9f5      	bls.n	408c7e <_svfprintf_r+0x5d2>
  408c92:	910f      	str	r1, [sp, #60]	; 0x3c
  408c94:	e568      	b.n	408768 <_svfprintf_r+0xbc>
  408c96:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408c9a:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408c9e:	f04c 0c10 	orr.w	ip, ip, #16
  408ca2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408ca6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408ca8:	06a3      	lsls	r3, r4, #26
  408caa:	f140 80b2 	bpl.w	408e12 <_svfprintf_r+0x766>
  408cae:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408cb0:	1de9      	adds	r1, r5, #7
  408cb2:	f021 0107 	bic.w	r1, r1, #7
  408cb6:	e9d1 2300 	ldrd	r2, r3, [r1]
  408cba:	3108      	adds	r1, #8
  408cbc:	9110      	str	r1, [sp, #64]	; 0x40
  408cbe:	4614      	mov	r4, r2
  408cc0:	461d      	mov	r5, r3
  408cc2:	2a00      	cmp	r2, #0
  408cc4:	f173 0000 	sbcs.w	r0, r3, #0
  408cc8:	f2c0 838b 	blt.w	4093e2 <_svfprintf_r+0xd36>
  408ccc:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408cd0:	2301      	movs	r3, #1
  408cd2:	e659      	b.n	408988 <_svfprintf_r+0x2dc>
  408cd4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408cd6:	4cb7      	ldr	r4, [pc, #732]	; (408fb4 <_svfprintf_r+0x908>)
  408cd8:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408cdc:	06af      	lsls	r7, r5, #26
  408cde:	941a      	str	r4, [sp, #104]	; 0x68
  408ce0:	f53f ae2f 	bmi.w	408942 <_svfprintf_r+0x296>
  408ce4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408ce6:	06ed      	lsls	r5, r5, #27
  408ce8:	f140 845d 	bpl.w	4095a6 <_svfprintf_r+0xefa>
  408cec:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408cf0:	f8dc 4000 	ldr.w	r4, [ip]
  408cf4:	f10c 0c04 	add.w	ip, ip, #4
  408cf8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408cfc:	2500      	movs	r5, #0
  408cfe:	e62b      	b.n	408958 <_svfprintf_r+0x2ac>
  408d00:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408d04:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408d08:	f01c 0f20 	tst.w	ip, #32
  408d0c:	f000 843d 	beq.w	40958a <_svfprintf_r+0xede>
  408d10:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408d12:	6821      	ldr	r1, [r4, #0]
  408d14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  408d16:	17e5      	asrs	r5, r4, #31
  408d18:	462b      	mov	r3, r5
  408d1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408d1c:	4622      	mov	r2, r4
  408d1e:	3504      	adds	r5, #4
  408d20:	9510      	str	r5, [sp, #64]	; 0x40
  408d22:	e9c1 2300 	strd	r2, r3, [r1]
  408d26:	e4e7      	b.n	4086f8 <_svfprintf_r+0x4c>
  408d28:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408d2a:	6827      	ldr	r7, [r4, #0]
  408d2c:	f04f 0a00 	mov.w	sl, #0
  408d30:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  408d34:	1d25      	adds	r5, r4, #4
  408d36:	2f00      	cmp	r7, #0
  408d38:	f000 85f5 	beq.w	409926 <_svfprintf_r+0x127a>
  408d3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408d3e:	2c00      	cmp	r4, #0
  408d40:	4638      	mov	r0, r7
  408d42:	f2c0 85a7 	blt.w	409894 <_svfprintf_r+0x11e8>
  408d46:	4651      	mov	r1, sl
  408d48:	4622      	mov	r2, r4
  408d4a:	f7fd fe5f 	bl	406a0c <memchr>
  408d4e:	2800      	cmp	r0, #0
  408d50:	f000 861f 	beq.w	409992 <_svfprintf_r+0x12e6>
  408d54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  408d56:	9510      	str	r5, [sp, #64]	; 0x40
  408d58:	1bc0      	subs	r0, r0, r7
  408d5a:	42a0      	cmp	r0, r4
  408d5c:	bfb8      	it	lt
  408d5e:	4604      	movlt	r4, r0
  408d60:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  408d64:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  408d68:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  408d6c:	950b      	str	r5, [sp, #44]	; 0x2c
  408d6e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408d72:	e632      	b.n	4089da <_svfprintf_r+0x32e>
  408d74:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408d78:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  408d7c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408d80:	f899 8000 	ldrb.w	r8, [r9]
  408d84:	e4ee      	b.n	408764 <_svfprintf_r+0xb8>
  408d86:	f899 8000 	ldrb.w	r8, [r9]
  408d8a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  408d8e:	464b      	mov	r3, r9
  408d90:	f000 848b 	beq.w	4096aa <_svfprintf_r+0xffe>
  408d94:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408d96:	f045 0510 	orr.w	r5, r5, #16
  408d9a:	9509      	str	r5, [sp, #36]	; 0x24
  408d9c:	e4e2      	b.n	408764 <_svfprintf_r+0xb8>
  408d9e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408da0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408da2:	6824      	ldr	r4, [r4, #0]
  408da4:	940f      	str	r4, [sp, #60]	; 0x3c
  408da6:	2c00      	cmp	r4, #0
  408da8:	f105 0304 	add.w	r3, r5, #4
  408dac:	f6ff ad7c 	blt.w	4088a8 <_svfprintf_r+0x1fc>
  408db0:	9310      	str	r3, [sp, #64]	; 0x40
  408db2:	f899 8000 	ldrb.w	r8, [r9]
  408db6:	e4d5      	b.n	408764 <_svfprintf_r+0xb8>
  408db8:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408dba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408dbe:	487e      	ldr	r0, [pc, #504]	; (408fb8 <_svfprintf_r+0x90c>)
  408dc0:	6814      	ldr	r4, [r2, #0]
  408dc2:	901a      	str	r0, [sp, #104]	; 0x68
  408dc4:	2330      	movs	r3, #48	; 0x30
  408dc6:	1d15      	adds	r5, r2, #4
  408dc8:	f04f 0878 	mov.w	r8, #120	; 0x78
  408dcc:	f04c 0c02 	orr.w	ip, ip, #2
  408dd0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  408dd4:	9510      	str	r5, [sp, #64]	; 0x40
  408dd6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408dda:	2500      	movs	r5, #0
  408ddc:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  408de0:	2302      	movs	r3, #2
  408de2:	e5cd      	b.n	408980 <_svfprintf_r+0x2d4>
  408de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  408de6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408de8:	6812      	ldr	r2, [r2, #0]
  408dea:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  408dee:	2300      	movs	r3, #0
  408df0:	2401      	movs	r4, #1
  408df2:	3504      	adds	r5, #4
  408df4:	469a      	mov	sl, r3
  408df6:	940b      	str	r4, [sp, #44]	; 0x2c
  408df8:	9510      	str	r5, [sp, #64]	; 0x40
  408dfa:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408dfe:	930a      	str	r3, [sp, #40]	; 0x28
  408e00:	9314      	str	r3, [sp, #80]	; 0x50
  408e02:	af2e      	add	r7, sp, #184	; 0xb8
  408e04:	e5ef      	b.n	4089e6 <_svfprintf_r+0x33a>
  408e06:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408e08:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408e0c:	06a3      	lsls	r3, r4, #26
  408e0e:	f53f af4e 	bmi.w	408cae <_svfprintf_r+0x602>
  408e12:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408e16:	f01c 0f10 	tst.w	ip, #16
  408e1a:	f040 82d2 	bne.w	4093c2 <_svfprintf_r+0xd16>
  408e1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408e20:	0667      	lsls	r7, r4, #25
  408e22:	f140 82ce 	bpl.w	4093c2 <_svfprintf_r+0xd16>
  408e26:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  408e2a:	f9bc 4000 	ldrsh.w	r4, [ip]
  408e2e:	f10c 0c04 	add.w	ip, ip, #4
  408e32:	17e5      	asrs	r5, r4, #31
  408e34:	4622      	mov	r2, r4
  408e36:	462b      	mov	r3, r5
  408e38:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408e3c:	e741      	b.n	408cc2 <_svfprintf_r+0x616>
  408e3e:	f899 8000 	ldrb.w	r8, [r9]
  408e42:	222b      	movs	r2, #43	; 0x2b
  408e44:	e48e      	b.n	408764 <_svfprintf_r+0xb8>
  408e46:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408e48:	f045 0508 	orr.w	r5, r5, #8
  408e4c:	9509      	str	r5, [sp, #36]	; 0x24
  408e4e:	f899 8000 	ldrb.w	r8, [r9]
  408e52:	e487      	b.n	408764 <_svfprintf_r+0xb8>
  408e54:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408e56:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408e58:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408e5c:	1deb      	adds	r3, r5, #7
  408e5e:	0725      	lsls	r5, r4, #28
  408e60:	f023 0307 	bic.w	r3, r3, #7
  408e64:	f140 838a 	bpl.w	40957c <_svfprintf_r+0xed0>
  408e68:	e9d3 4500 	ldrd	r4, r5, [r3]
  408e6c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  408e70:	f103 0c08 	add.w	ip, r3, #8
  408e74:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408e78:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e7c:	f7fe f86c 	bl	406f58 <__fpclassifyd>
  408e80:	2801      	cmp	r0, #1
  408e82:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408e86:	f040 835f 	bne.w	409548 <_svfprintf_r+0xe9c>
  408e8a:	2200      	movs	r2, #0
  408e8c:	2300      	movs	r3, #0
  408e8e:	f003 fc9d 	bl	40c7cc <__aeabi_dcmplt>
  408e92:	2800      	cmp	r0, #0
  408e94:	f040 856d 	bne.w	409972 <_svfprintf_r+0x12c6>
  408e98:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  408e9c:	2503      	movs	r5, #3
  408e9e:	950b      	str	r5, [sp, #44]	; 0x2c
  408ea0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  408ea2:	4f46      	ldr	r7, [pc, #280]	; (408fbc <_svfprintf_r+0x910>)
  408ea4:	4b46      	ldr	r3, [pc, #280]	; (408fc0 <_svfprintf_r+0x914>)
  408ea6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  408eaa:	2400      	movs	r4, #0
  408eac:	9509      	str	r5, [sp, #36]	; 0x24
  408eae:	2500      	movs	r5, #0
  408eb0:	940a      	str	r4, [sp, #40]	; 0x28
  408eb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  408eb6:	bfd8      	it	le
  408eb8:	461f      	movle	r7, r3
  408eba:	2403      	movs	r4, #3
  408ebc:	9514      	str	r5, [sp, #80]	; 0x50
  408ebe:	e58c      	b.n	4089da <_svfprintf_r+0x32e>
  408ec0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  408ec4:	f04c 0c20 	orr.w	ip, ip, #32
  408ec8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  408ecc:	f899 8000 	ldrb.w	r8, [r9]
  408ed0:	e448      	b.n	408764 <_svfprintf_r+0xb8>
  408ed2:	9c10      	ldr	r4, [sp, #64]	; 0x40
  408ed4:	1de3      	adds	r3, r4, #7
  408ed6:	f023 0307 	bic.w	r3, r3, #7
  408eda:	f103 0508 	add.w	r5, r3, #8
  408ede:	9510      	str	r5, [sp, #64]	; 0x40
  408ee0:	e9d3 4500 	ldrd	r4, r5, [r3]
  408ee4:	2300      	movs	r3, #0
  408ee6:	e54b      	b.n	408980 <_svfprintf_r+0x2d4>
  408ee8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408eea:	1deb      	adds	r3, r5, #7
  408eec:	f023 0307 	bic.w	r3, r3, #7
  408ef0:	f103 0c08 	add.w	ip, r3, #8
  408ef4:	e9d3 4500 	ldrd	r4, r5, [r3]
  408ef8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  408efc:	2301      	movs	r3, #1
  408efe:	e53f      	b.n	408980 <_svfprintf_r+0x2d4>
  408f00:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  408f04:	f1b8 0f00 	cmp.w	r8, #0
  408f08:	f43f ace1 	beq.w	4088ce <_svfprintf_r+0x222>
  408f0c:	2300      	movs	r3, #0
  408f0e:	f04f 0c01 	mov.w	ip, #1
  408f12:	469a      	mov	sl, r3
  408f14:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  408f18:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  408f1c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  408f20:	930a      	str	r3, [sp, #40]	; 0x28
  408f22:	9314      	str	r3, [sp, #80]	; 0x50
  408f24:	4664      	mov	r4, ip
  408f26:	af2e      	add	r7, sp, #184	; 0xb8
  408f28:	e55d      	b.n	4089e6 <_svfprintf_r+0x33a>
  408f2a:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  408f2e:	e5b5      	b.n	408a9c <_svfprintf_r+0x3f0>
  408f30:	2b01      	cmp	r3, #1
  408f32:	f000 80ec 	beq.w	40910e <_svfprintf_r+0xa62>
  408f36:	2b02      	cmp	r3, #2
  408f38:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  408f3c:	d118      	bne.n	408f70 <_svfprintf_r+0x8c4>
  408f3e:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  408f42:	4619      	mov	r1, r3
  408f44:	f004 000f 	and.w	r0, r4, #15
  408f48:	0922      	lsrs	r2, r4, #4
  408f4a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  408f4e:	460f      	mov	r7, r1
  408f50:	092b      	lsrs	r3, r5, #4
  408f52:	f81c 1000 	ldrb.w	r1, [ip, r0]
  408f56:	7039      	strb	r1, [r7, #0]
  408f58:	ea52 0003 	orrs.w	r0, r2, r3
  408f5c:	4614      	mov	r4, r2
  408f5e:	461d      	mov	r5, r3
  408f60:	f107 31ff 	add.w	r1, r7, #4294967295
  408f64:	d1ee      	bne.n	408f44 <_svfprintf_r+0x898>
  408f66:	9d08      	ldr	r5, [sp, #32]
  408f68:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  408f6c:	1bec      	subs	r4, r5, r7
  408f6e:	e52b      	b.n	4089c8 <_svfprintf_r+0x31c>
  408f70:	08e0      	lsrs	r0, r4, #3
  408f72:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  408f76:	f004 0207 	and.w	r2, r4, #7
  408f7a:	08e9      	lsrs	r1, r5, #3
  408f7c:	3230      	adds	r2, #48	; 0x30
  408f7e:	ea50 0c01 	orrs.w	ip, r0, r1
  408f82:	461f      	mov	r7, r3
  408f84:	701a      	strb	r2, [r3, #0]
  408f86:	4604      	mov	r4, r0
  408f88:	460d      	mov	r5, r1
  408f8a:	f103 33ff 	add.w	r3, r3, #4294967295
  408f8e:	d1ef      	bne.n	408f70 <_svfprintf_r+0x8c4>
  408f90:	9c09      	ldr	r4, [sp, #36]	; 0x24
  408f92:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  408f96:	07e0      	lsls	r0, r4, #31
  408f98:	4639      	mov	r1, r7
  408f9a:	f140 80c1 	bpl.w	409120 <_svfprintf_r+0xa74>
  408f9e:	2a30      	cmp	r2, #48	; 0x30
  408fa0:	f000 80be 	beq.w	409120 <_svfprintf_r+0xa74>
  408fa4:	9d08      	ldr	r5, [sp, #32]
  408fa6:	461f      	mov	r7, r3
  408fa8:	2330      	movs	r3, #48	; 0x30
  408faa:	1bec      	subs	r4, r5, r7
  408fac:	f801 3c01 	strb.w	r3, [r1, #-1]
  408fb0:	e50a      	b.n	4089c8 <_svfprintf_r+0x31c>
  408fb2:	bf00      	nop
  408fb4:	0040d0fc 	.word	0x0040d0fc
  408fb8:	0040d110 	.word	0x0040d110
  408fbc:	0040d2d4 	.word	0x0040d2d4
  408fc0:	0040d2d0 	.word	0x0040d2d0
  408fc4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  408fc8:	f340 80ad 	ble.w	409126 <_svfprintf_r+0xa7a>
  408fcc:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  408fd0:	2200      	movs	r2, #0
  408fd2:	2300      	movs	r3, #0
  408fd4:	f8cd c01c 	str.w	ip, [sp, #28]
  408fd8:	f003 fbee 	bl	40c7b8 <__aeabi_dcmpeq>
  408fdc:	f8dd c01c 	ldr.w	ip, [sp, #28]
  408fe0:	2800      	cmp	r0, #0
  408fe2:	f000 8126 	beq.w	409232 <_svfprintf_r+0xb86>
  408fe6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  408fe8:	4aaa      	ldr	r2, [pc, #680]	; (409294 <_svfprintf_r+0xbe8>)
  408fea:	6032      	str	r2, [r6, #0]
  408fec:	3301      	adds	r3, #1
  408fee:	f10c 0c01 	add.w	ip, ip, #1
  408ff2:	2201      	movs	r2, #1
  408ff4:	2b07      	cmp	r3, #7
  408ff6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  408ffa:	932c      	str	r3, [sp, #176]	; 0xb0
  408ffc:	6072      	str	r2, [r6, #4]
  408ffe:	f300 82f7 	bgt.w	4095f0 <_svfprintf_r+0xf44>
  409002:	3608      	adds	r6, #8
  409004:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409006:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409008:	42a3      	cmp	r3, r4
  40900a:	db03      	blt.n	409014 <_svfprintf_r+0x968>
  40900c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40900e:	07ec      	lsls	r4, r5, #31
  409010:	f57f adbe 	bpl.w	408b90 <_svfprintf_r+0x4e4>
  409014:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409016:	9d18      	ldr	r5, [sp, #96]	; 0x60
  409018:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40901a:	6034      	str	r4, [r6, #0]
  40901c:	3301      	adds	r3, #1
  40901e:	44ac      	add	ip, r5
  409020:	2b07      	cmp	r3, #7
  409022:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409026:	6075      	str	r5, [r6, #4]
  409028:	932c      	str	r3, [sp, #176]	; 0xb0
  40902a:	f300 8348 	bgt.w	4096be <_svfprintf_r+0x1012>
  40902e:	3608      	adds	r6, #8
  409030:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409032:	1e6c      	subs	r4, r5, #1
  409034:	2c00      	cmp	r4, #0
  409036:	f77f adab 	ble.w	408b90 <_svfprintf_r+0x4e4>
  40903a:	2c10      	cmp	r4, #16
  40903c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40903e:	4d96      	ldr	r5, [pc, #600]	; (409298 <_svfprintf_r+0xbec>)
  409040:	f340 8197 	ble.w	409372 <_svfprintf_r+0xcc6>
  409044:	2710      	movs	r7, #16
  409046:	4662      	mov	r2, ip
  409048:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40904c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  409050:	e004      	b.n	40905c <_svfprintf_r+0x9b0>
  409052:	3608      	adds	r6, #8
  409054:	3c10      	subs	r4, #16
  409056:	2c10      	cmp	r4, #16
  409058:	f340 818a 	ble.w	409370 <_svfprintf_r+0xcc4>
  40905c:	3301      	adds	r3, #1
  40905e:	3210      	adds	r2, #16
  409060:	2b07      	cmp	r3, #7
  409062:	922d      	str	r2, [sp, #180]	; 0xb4
  409064:	932c      	str	r3, [sp, #176]	; 0xb0
  409066:	e886 00a0 	stmia.w	r6, {r5, r7}
  40906a:	ddf2      	ble.n	409052 <_svfprintf_r+0x9a6>
  40906c:	4640      	mov	r0, r8
  40906e:	4651      	mov	r1, sl
  409070:	aa2b      	add	r2, sp, #172	; 0xac
  409072:	f002 fed1 	bl	40be18 <__ssprint_r>
  409076:	2800      	cmp	r0, #0
  409078:	f47f ac30 	bne.w	4088dc <_svfprintf_r+0x230>
  40907c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40907e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409080:	ae38      	add	r6, sp, #224	; 0xe0
  409082:	e7e7      	b.n	409054 <_svfprintf_r+0x9a8>
  409084:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  409086:	980b      	ldr	r0, [sp, #44]	; 0x2c
  409088:	ebc0 0a05 	rsb	sl, r0, r5
  40908c:	f1ba 0f00 	cmp.w	sl, #0
  409090:	f77f ad2c 	ble.w	408aec <_svfprintf_r+0x440>
  409094:	f1ba 0f10 	cmp.w	sl, #16
  409098:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40909a:	4d7f      	ldr	r5, [pc, #508]	; (409298 <_svfprintf_r+0xbec>)
  40909c:	dd2b      	ble.n	4090f6 <_svfprintf_r+0xa4a>
  40909e:	9412      	str	r4, [sp, #72]	; 0x48
  4090a0:	4632      	mov	r2, r6
  4090a2:	f04f 0b10 	mov.w	fp, #16
  4090a6:	462e      	mov	r6, r5
  4090a8:	4661      	mov	r1, ip
  4090aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  4090ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4090ae:	e006      	b.n	4090be <_svfprintf_r+0xa12>
  4090b0:	f1aa 0a10 	sub.w	sl, sl, #16
  4090b4:	f1ba 0f10 	cmp.w	sl, #16
  4090b8:	f102 0208 	add.w	r2, r2, #8
  4090bc:	dd17      	ble.n	4090ee <_svfprintf_r+0xa42>
  4090be:	3301      	adds	r3, #1
  4090c0:	3110      	adds	r1, #16
  4090c2:	2b07      	cmp	r3, #7
  4090c4:	912d      	str	r1, [sp, #180]	; 0xb4
  4090c6:	932c      	str	r3, [sp, #176]	; 0xb0
  4090c8:	e882 0840 	stmia.w	r2, {r6, fp}
  4090cc:	ddf0      	ble.n	4090b0 <_svfprintf_r+0xa04>
  4090ce:	4620      	mov	r0, r4
  4090d0:	4629      	mov	r1, r5
  4090d2:	aa2b      	add	r2, sp, #172	; 0xac
  4090d4:	f002 fea0 	bl	40be18 <__ssprint_r>
  4090d8:	2800      	cmp	r0, #0
  4090da:	f47f abff 	bne.w	4088dc <_svfprintf_r+0x230>
  4090de:	f1aa 0a10 	sub.w	sl, sl, #16
  4090e2:	f1ba 0f10 	cmp.w	sl, #16
  4090e6:	992d      	ldr	r1, [sp, #180]	; 0xb4
  4090e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4090ea:	aa38      	add	r2, sp, #224	; 0xe0
  4090ec:	dce7      	bgt.n	4090be <_svfprintf_r+0xa12>
  4090ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4090f0:	4635      	mov	r5, r6
  4090f2:	468c      	mov	ip, r1
  4090f4:	4616      	mov	r6, r2
  4090f6:	3301      	adds	r3, #1
  4090f8:	44d4      	add	ip, sl
  4090fa:	2b07      	cmp	r3, #7
  4090fc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409100:	932c      	str	r3, [sp, #176]	; 0xb0
  409102:	e886 0420 	stmia.w	r6, {r5, sl}
  409106:	f300 8212 	bgt.w	40952e <_svfprintf_r+0xe82>
  40910a:	3608      	adds	r6, #8
  40910c:	e4ee      	b.n	408aec <_svfprintf_r+0x440>
  40910e:	2d00      	cmp	r5, #0
  409110:	bf08      	it	eq
  409112:	2c0a      	cmpeq	r4, #10
  409114:	f080 8138 	bcs.w	409388 <_svfprintf_r+0xcdc>
  409118:	af48      	add	r7, sp, #288	; 0x120
  40911a:	3430      	adds	r4, #48	; 0x30
  40911c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  409120:	9d08      	ldr	r5, [sp, #32]
  409122:	1bec      	subs	r4, r5, r7
  409124:	e450      	b.n	4089c8 <_svfprintf_r+0x31c>
  409126:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409128:	2c01      	cmp	r4, #1
  40912a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40912c:	f340 81d5 	ble.w	4094da <_svfprintf_r+0xe2e>
  409130:	3401      	adds	r4, #1
  409132:	f10c 0301 	add.w	r3, ip, #1
  409136:	2201      	movs	r2, #1
  409138:	2c07      	cmp	r4, #7
  40913a:	6037      	str	r7, [r6, #0]
  40913c:	932d      	str	r3, [sp, #180]	; 0xb4
  40913e:	942c      	str	r4, [sp, #176]	; 0xb0
  409140:	6072      	str	r2, [r6, #4]
  409142:	f300 81db 	bgt.w	4094fc <_svfprintf_r+0xe50>
  409146:	3608      	adds	r6, #8
  409148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40914c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40914e:	6035      	str	r5, [r6, #0]
  409150:	3401      	adds	r4, #1
  409152:	4498      	add	r8, r3
  409154:	9d18      	ldr	r5, [sp, #96]	; 0x60
  409156:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40915a:	2c07      	cmp	r4, #7
  40915c:	942c      	str	r4, [sp, #176]	; 0xb0
  40915e:	6075      	str	r5, [r6, #4]
  409160:	f300 81d8 	bgt.w	409514 <_svfprintf_r+0xe68>
  409164:	3608      	adds	r6, #8
  409166:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40916a:	2200      	movs	r2, #0
  40916c:	2300      	movs	r3, #0
  40916e:	f003 fb23 	bl	40c7b8 <__aeabi_dcmpeq>
  409172:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409174:	2800      	cmp	r0, #0
  409176:	f040 80b9 	bne.w	4092ec <_svfprintf_r+0xc40>
  40917a:	1e6b      	subs	r3, r5, #1
  40917c:	3401      	adds	r4, #1
  40917e:	3701      	adds	r7, #1
  409180:	4498      	add	r8, r3
  409182:	2c07      	cmp	r4, #7
  409184:	942c      	str	r4, [sp, #176]	; 0xb0
  409186:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40918a:	6037      	str	r7, [r6, #0]
  40918c:	6073      	str	r3, [r6, #4]
  40918e:	f300 80e2 	bgt.w	409356 <_svfprintf_r+0xcaa>
  409192:	3608      	adds	r6, #8
  409194:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  409198:	9d19      	ldr	r5, [sp, #100]	; 0x64
  40919a:	3401      	adds	r4, #1
  40919c:	44c4      	add	ip, r8
  40919e:	ab27      	add	r3, sp, #156	; 0x9c
  4091a0:	2c07      	cmp	r4, #7
  4091a2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4091a6:	942c      	str	r4, [sp, #176]	; 0xb0
  4091a8:	e886 0028 	stmia.w	r6, {r3, r5}
  4091ac:	f77f acef 	ble.w	408b8e <_svfprintf_r+0x4e2>
  4091b0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091b2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4091b4:	aa2b      	add	r2, sp, #172	; 0xac
  4091b6:	f002 fe2f 	bl	40be18 <__ssprint_r>
  4091ba:	2800      	cmp	r0, #0
  4091bc:	f47f ab8e 	bne.w	4088dc <_svfprintf_r+0x230>
  4091c0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4091c4:	ae38      	add	r6, sp, #224	; 0xe0
  4091c6:	e4e3      	b.n	408b90 <_svfprintf_r+0x4e4>
  4091c8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091ca:	990c      	ldr	r1, [sp, #48]	; 0x30
  4091cc:	aa2b      	add	r2, sp, #172	; 0xac
  4091ce:	f002 fe23 	bl	40be18 <__ssprint_r>
  4091d2:	2800      	cmp	r0, #0
  4091d4:	f43f ad35 	beq.w	408c42 <_svfprintf_r+0x596>
  4091d8:	f7ff bb80 	b.w	4088dc <_svfprintf_r+0x230>
  4091dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091de:	990c      	ldr	r1, [sp, #48]	; 0x30
  4091e0:	aa2b      	add	r2, sp, #172	; 0xac
  4091e2:	f002 fe19 	bl	40be18 <__ssprint_r>
  4091e6:	2800      	cmp	r0, #0
  4091e8:	f47f ab78 	bne.w	4088dc <_svfprintf_r+0x230>
  4091ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4091f0:	ae38      	add	r6, sp, #224	; 0xe0
  4091f2:	e4bd      	b.n	408b70 <_svfprintf_r+0x4c4>
  4091f4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4091f6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4091f8:	aa2b      	add	r2, sp, #172	; 0xac
  4091fa:	f002 fe0d 	bl	40be18 <__ssprint_r>
  4091fe:	2800      	cmp	r0, #0
  409200:	f47f ab6c 	bne.w	4088dc <_svfprintf_r+0x230>
  409204:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409208:	ae38      	add	r6, sp, #224	; 0xe0
  40920a:	e45a      	b.n	408ac2 <_svfprintf_r+0x416>
  40920c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40920e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409210:	aa2b      	add	r2, sp, #172	; 0xac
  409212:	f002 fe01 	bl	40be18 <__ssprint_r>
  409216:	2800      	cmp	r0, #0
  409218:	f47f ab60 	bne.w	4088dc <_svfprintf_r+0x230>
  40921c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409220:	ae38      	add	r6, sp, #224	; 0xe0
  409222:	e45f      	b.n	408ae4 <_svfprintf_r+0x438>
  409224:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  409226:	af38      	add	r7, sp, #224	; 0xe0
  409228:	f7ff bbce 	b.w	4089c8 <_svfprintf_r+0x31c>
  40922c:	2302      	movs	r3, #2
  40922e:	f7ff bba7 	b.w	408980 <_svfprintf_r+0x2d4>
  409232:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409234:	2b00      	cmp	r3, #0
  409236:	f340 81e7 	ble.w	409608 <_svfprintf_r+0xf5c>
  40923a:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40923c:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40923e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  409242:	42ac      	cmp	r4, r5
  409244:	bfa8      	it	ge
  409246:	462c      	movge	r4, r5
  409248:	2c00      	cmp	r4, #0
  40924a:	44ba      	add	sl, r7
  40924c:	dd0b      	ble.n	409266 <_svfprintf_r+0xbba>
  40924e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409250:	6037      	str	r7, [r6, #0]
  409252:	3301      	adds	r3, #1
  409254:	44a4      	add	ip, r4
  409256:	2b07      	cmp	r3, #7
  409258:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40925c:	6074      	str	r4, [r6, #4]
  40925e:	932c      	str	r3, [sp, #176]	; 0xb0
  409260:	f300 8328 	bgt.w	4098b4 <_svfprintf_r+0x1208>
  409264:	3608      	adds	r6, #8
  409266:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409268:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  40926c:	1b2c      	subs	r4, r5, r4
  40926e:	2c00      	cmp	r4, #0
  409270:	f340 80db 	ble.w	40942a <_svfprintf_r+0xd7e>
  409274:	2c10      	cmp	r4, #16
  409276:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409278:	4d07      	ldr	r5, [pc, #28]	; (409298 <_svfprintf_r+0xbec>)
  40927a:	f340 81ad 	ble.w	4095d8 <_svfprintf_r+0xf2c>
  40927e:	970a      	str	r7, [sp, #40]	; 0x28
  409280:	f04f 0810 	mov.w	r8, #16
  409284:	462f      	mov	r7, r5
  409286:	4662      	mov	r2, ip
  409288:	4625      	mov	r5, r4
  40928a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  40928e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  409290:	e009      	b.n	4092a6 <_svfprintf_r+0xbfa>
  409292:	bf00      	nop
  409294:	0040d2e0 	.word	0x0040d2e0
  409298:	0040d2c0 	.word	0x0040d2c0
  40929c:	3608      	adds	r6, #8
  40929e:	3d10      	subs	r5, #16
  4092a0:	2d10      	cmp	r5, #16
  4092a2:	f340 8195 	ble.w	4095d0 <_svfprintf_r+0xf24>
  4092a6:	3301      	adds	r3, #1
  4092a8:	3210      	adds	r2, #16
  4092aa:	2b07      	cmp	r3, #7
  4092ac:	922d      	str	r2, [sp, #180]	; 0xb4
  4092ae:	932c      	str	r3, [sp, #176]	; 0xb0
  4092b0:	e886 0180 	stmia.w	r6, {r7, r8}
  4092b4:	ddf2      	ble.n	40929c <_svfprintf_r+0xbf0>
  4092b6:	4658      	mov	r0, fp
  4092b8:	4621      	mov	r1, r4
  4092ba:	aa2b      	add	r2, sp, #172	; 0xac
  4092bc:	f002 fdac 	bl	40be18 <__ssprint_r>
  4092c0:	2800      	cmp	r0, #0
  4092c2:	f47f ab0b 	bne.w	4088dc <_svfprintf_r+0x230>
  4092c6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4092c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4092ca:	ae38      	add	r6, sp, #224	; 0xe0
  4092cc:	e7e7      	b.n	40929e <_svfprintf_r+0xbf2>
  4092ce:	980d      	ldr	r0, [sp, #52]	; 0x34
  4092d0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4092d2:	aa2b      	add	r2, sp, #172	; 0xac
  4092d4:	f002 fda0 	bl	40be18 <__ssprint_r>
  4092d8:	2800      	cmp	r0, #0
  4092da:	f47f aaff 	bne.w	4088dc <_svfprintf_r+0x230>
  4092de:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4092e2:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4092e6:	ae38      	add	r6, sp, #224	; 0xe0
  4092e8:	f7ff bbd8 	b.w	408a9c <_svfprintf_r+0x3f0>
  4092ec:	1e6f      	subs	r7, r5, #1
  4092ee:	2f00      	cmp	r7, #0
  4092f0:	f77f af50 	ble.w	409194 <_svfprintf_r+0xae8>
  4092f4:	2f10      	cmp	r7, #16
  4092f6:	4db3      	ldr	r5, [pc, #716]	; (4095c4 <_svfprintf_r+0xf18>)
  4092f8:	dd23      	ble.n	409342 <_svfprintf_r+0xc96>
  4092fa:	4643      	mov	r3, r8
  4092fc:	f04f 0a10 	mov.w	sl, #16
  409300:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  409304:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  409308:	e004      	b.n	409314 <_svfprintf_r+0xc68>
  40930a:	3f10      	subs	r7, #16
  40930c:	2f10      	cmp	r7, #16
  40930e:	f106 0608 	add.w	r6, r6, #8
  409312:	dd15      	ble.n	409340 <_svfprintf_r+0xc94>
  409314:	3401      	adds	r4, #1
  409316:	3310      	adds	r3, #16
  409318:	2c07      	cmp	r4, #7
  40931a:	932d      	str	r3, [sp, #180]	; 0xb4
  40931c:	942c      	str	r4, [sp, #176]	; 0xb0
  40931e:	e886 0420 	stmia.w	r6, {r5, sl}
  409322:	ddf2      	ble.n	40930a <_svfprintf_r+0xc5e>
  409324:	4640      	mov	r0, r8
  409326:	4659      	mov	r1, fp
  409328:	aa2b      	add	r2, sp, #172	; 0xac
  40932a:	f002 fd75 	bl	40be18 <__ssprint_r>
  40932e:	2800      	cmp	r0, #0
  409330:	f47f aad4 	bne.w	4088dc <_svfprintf_r+0x230>
  409334:	3f10      	subs	r7, #16
  409336:	2f10      	cmp	r7, #16
  409338:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40933a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40933c:	ae38      	add	r6, sp, #224	; 0xe0
  40933e:	dce9      	bgt.n	409314 <_svfprintf_r+0xc68>
  409340:	4698      	mov	r8, r3
  409342:	3401      	adds	r4, #1
  409344:	44b8      	add	r8, r7
  409346:	2c07      	cmp	r4, #7
  409348:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40934c:	942c      	str	r4, [sp, #176]	; 0xb0
  40934e:	e886 00a0 	stmia.w	r6, {r5, r7}
  409352:	f77f af1e 	ble.w	409192 <_svfprintf_r+0xae6>
  409356:	980d      	ldr	r0, [sp, #52]	; 0x34
  409358:	990c      	ldr	r1, [sp, #48]	; 0x30
  40935a:	aa2b      	add	r2, sp, #172	; 0xac
  40935c:	f002 fd5c 	bl	40be18 <__ssprint_r>
  409360:	2800      	cmp	r0, #0
  409362:	f47f aabb 	bne.w	4088dc <_svfprintf_r+0x230>
  409366:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40936a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40936c:	ae38      	add	r6, sp, #224	; 0xe0
  40936e:	e711      	b.n	409194 <_svfprintf_r+0xae8>
  409370:	4694      	mov	ip, r2
  409372:	3301      	adds	r3, #1
  409374:	44a4      	add	ip, r4
  409376:	2b07      	cmp	r3, #7
  409378:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40937c:	932c      	str	r3, [sp, #176]	; 0xb0
  40937e:	6035      	str	r5, [r6, #0]
  409380:	6074      	str	r4, [r6, #4]
  409382:	f77f ac04 	ble.w	408b8e <_svfprintf_r+0x4e2>
  409386:	e713      	b.n	4091b0 <_svfprintf_r+0xb04>
  409388:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  40938c:	4620      	mov	r0, r4
  40938e:	4629      	mov	r1, r5
  409390:	220a      	movs	r2, #10
  409392:	2300      	movs	r3, #0
  409394:	f003 fada 	bl	40c94c <__aeabi_uldivmod>
  409398:	3230      	adds	r2, #48	; 0x30
  40939a:	f88b 2000 	strb.w	r2, [fp]
  40939e:	4620      	mov	r0, r4
  4093a0:	4629      	mov	r1, r5
  4093a2:	220a      	movs	r2, #10
  4093a4:	2300      	movs	r3, #0
  4093a6:	f003 fad1 	bl	40c94c <__aeabi_uldivmod>
  4093aa:	4604      	mov	r4, r0
  4093ac:	460d      	mov	r5, r1
  4093ae:	ea54 0c05 	orrs.w	ip, r4, r5
  4093b2:	465f      	mov	r7, fp
  4093b4:	f10b 3bff 	add.w	fp, fp, #4294967295
  4093b8:	d1e8      	bne.n	40938c <_svfprintf_r+0xce0>
  4093ba:	9d08      	ldr	r5, [sp, #32]
  4093bc:	1bec      	subs	r4, r5, r7
  4093be:	f7ff bb03 	b.w	4089c8 <_svfprintf_r+0x31c>
  4093c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4093c4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4093c8:	682c      	ldr	r4, [r5, #0]
  4093ca:	17e5      	asrs	r5, r4, #31
  4093cc:	4622      	mov	r2, r4
  4093ce:	462b      	mov	r3, r5
  4093d0:	f10c 0c04 	add.w	ip, ip, #4
  4093d4:	2a00      	cmp	r2, #0
  4093d6:	f173 0000 	sbcs.w	r0, r3, #0
  4093da:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4093de:	f6bf ac75 	bge.w	408ccc <_svfprintf_r+0x620>
  4093e2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4093e6:	4264      	negs	r4, r4
  4093e8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4093ec:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4093f0:	2301      	movs	r3, #1
  4093f2:	f7ff bac9 	b.w	408988 <_svfprintf_r+0x2dc>
  4093f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4093f8:	682c      	ldr	r4, [r5, #0]
  4093fa:	3504      	adds	r5, #4
  4093fc:	9510      	str	r5, [sp, #64]	; 0x40
  4093fe:	2500      	movs	r5, #0
  409400:	f7ff babe 	b.w	408980 <_svfprintf_r+0x2d4>
  409404:	9d10      	ldr	r5, [sp, #64]	; 0x40
  409406:	682c      	ldr	r4, [r5, #0]
  409408:	3504      	adds	r5, #4
  40940a:	9510      	str	r5, [sp, #64]	; 0x40
  40940c:	2301      	movs	r3, #1
  40940e:	2500      	movs	r5, #0
  409410:	f7ff bab6 	b.w	408980 <_svfprintf_r+0x2d4>
  409414:	980d      	ldr	r0, [sp, #52]	; 0x34
  409416:	990c      	ldr	r1, [sp, #48]	; 0x30
  409418:	aa2b      	add	r2, sp, #172	; 0xac
  40941a:	f002 fcfd 	bl	40be18 <__ssprint_r>
  40941e:	2800      	cmp	r0, #0
  409420:	f47f aa5c 	bne.w	4088dc <_svfprintf_r+0x230>
  409424:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409428:	ae38      	add	r6, sp, #224	; 0xe0
  40942a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40942c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40942e:	442f      	add	r7, r5
  409430:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409432:	42ac      	cmp	r4, r5
  409434:	db42      	blt.n	4094bc <_svfprintf_r+0xe10>
  409436:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409438:	07e9      	lsls	r1, r5, #31
  40943a:	d43f      	bmi.n	4094bc <_svfprintf_r+0xe10>
  40943c:	9811      	ldr	r0, [sp, #68]	; 0x44
  40943e:	ebc7 050a 	rsb	r5, r7, sl
  409442:	1b04      	subs	r4, r0, r4
  409444:	42ac      	cmp	r4, r5
  409446:	bfb8      	it	lt
  409448:	4625      	movlt	r5, r4
  40944a:	2d00      	cmp	r5, #0
  40944c:	dd0b      	ble.n	409466 <_svfprintf_r+0xdba>
  40944e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409450:	6037      	str	r7, [r6, #0]
  409452:	3301      	adds	r3, #1
  409454:	44ac      	add	ip, r5
  409456:	2b07      	cmp	r3, #7
  409458:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40945c:	6075      	str	r5, [r6, #4]
  40945e:	932c      	str	r3, [sp, #176]	; 0xb0
  409460:	f300 8252 	bgt.w	409908 <_svfprintf_r+0x125c>
  409464:	3608      	adds	r6, #8
  409466:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40946a:	1b64      	subs	r4, r4, r5
  40946c:	2c00      	cmp	r4, #0
  40946e:	f77f ab8f 	ble.w	408b90 <_svfprintf_r+0x4e4>
  409472:	2c10      	cmp	r4, #16
  409474:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409476:	4d53      	ldr	r5, [pc, #332]	; (4095c4 <_svfprintf_r+0xf18>)
  409478:	f77f af7b 	ble.w	409372 <_svfprintf_r+0xcc6>
  40947c:	2710      	movs	r7, #16
  40947e:	4662      	mov	r2, ip
  409480:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  409484:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  409488:	e004      	b.n	409494 <_svfprintf_r+0xde8>
  40948a:	3608      	adds	r6, #8
  40948c:	3c10      	subs	r4, #16
  40948e:	2c10      	cmp	r4, #16
  409490:	f77f af6e 	ble.w	409370 <_svfprintf_r+0xcc4>
  409494:	3301      	adds	r3, #1
  409496:	3210      	adds	r2, #16
  409498:	2b07      	cmp	r3, #7
  40949a:	922d      	str	r2, [sp, #180]	; 0xb4
  40949c:	932c      	str	r3, [sp, #176]	; 0xb0
  40949e:	e886 00a0 	stmia.w	r6, {r5, r7}
  4094a2:	ddf2      	ble.n	40948a <_svfprintf_r+0xdde>
  4094a4:	4640      	mov	r0, r8
  4094a6:	4651      	mov	r1, sl
  4094a8:	aa2b      	add	r2, sp, #172	; 0xac
  4094aa:	f002 fcb5 	bl	40be18 <__ssprint_r>
  4094ae:	2800      	cmp	r0, #0
  4094b0:	f47f aa14 	bne.w	4088dc <_svfprintf_r+0x230>
  4094b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4094b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4094b8:	ae38      	add	r6, sp, #224	; 0xe0
  4094ba:	e7e7      	b.n	40948c <_svfprintf_r+0xde0>
  4094bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4094be:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4094c0:	6035      	str	r5, [r6, #0]
  4094c2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4094c4:	6075      	str	r5, [r6, #4]
  4094c6:	3301      	adds	r3, #1
  4094c8:	44ac      	add	ip, r5
  4094ca:	2b07      	cmp	r3, #7
  4094cc:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4094d0:	932c      	str	r3, [sp, #176]	; 0xb0
  4094d2:	f300 81fb 	bgt.w	4098cc <_svfprintf_r+0x1220>
  4094d6:	3608      	adds	r6, #8
  4094d8:	e7b0      	b.n	40943c <_svfprintf_r+0xd90>
  4094da:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4094dc:	07ea      	lsls	r2, r5, #31
  4094de:	f53f ae27 	bmi.w	409130 <_svfprintf_r+0xa84>
  4094e2:	3401      	adds	r4, #1
  4094e4:	f10c 0801 	add.w	r8, ip, #1
  4094e8:	2301      	movs	r3, #1
  4094ea:	2c07      	cmp	r4, #7
  4094ec:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  4094f0:	942c      	str	r4, [sp, #176]	; 0xb0
  4094f2:	6037      	str	r7, [r6, #0]
  4094f4:	6073      	str	r3, [r6, #4]
  4094f6:	f77f ae4c 	ble.w	409192 <_svfprintf_r+0xae6>
  4094fa:	e72c      	b.n	409356 <_svfprintf_r+0xcaa>
  4094fc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4094fe:	990c      	ldr	r1, [sp, #48]	; 0x30
  409500:	aa2b      	add	r2, sp, #172	; 0xac
  409502:	f002 fc89 	bl	40be18 <__ssprint_r>
  409506:	2800      	cmp	r0, #0
  409508:	f47f a9e8 	bne.w	4088dc <_svfprintf_r+0x230>
  40950c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40950e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  409510:	ae38      	add	r6, sp, #224	; 0xe0
  409512:	e619      	b.n	409148 <_svfprintf_r+0xa9c>
  409514:	980d      	ldr	r0, [sp, #52]	; 0x34
  409516:	990c      	ldr	r1, [sp, #48]	; 0x30
  409518:	aa2b      	add	r2, sp, #172	; 0xac
  40951a:	f002 fc7d 	bl	40be18 <__ssprint_r>
  40951e:	2800      	cmp	r0, #0
  409520:	f47f a9dc 	bne.w	4088dc <_svfprintf_r+0x230>
  409524:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  409528:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  40952a:	ae38      	add	r6, sp, #224	; 0xe0
  40952c:	e61b      	b.n	409166 <_svfprintf_r+0xaba>
  40952e:	980d      	ldr	r0, [sp, #52]	; 0x34
  409530:	990c      	ldr	r1, [sp, #48]	; 0x30
  409532:	aa2b      	add	r2, sp, #172	; 0xac
  409534:	f002 fc70 	bl	40be18 <__ssprint_r>
  409538:	2800      	cmp	r0, #0
  40953a:	f47f a9cf 	bne.w	4088dc <_svfprintf_r+0x230>
  40953e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409542:	ae38      	add	r6, sp, #224	; 0xe0
  409544:	f7ff bad2 	b.w	408aec <_svfprintf_r+0x440>
  409548:	f7fd fd06 	bl	406f58 <__fpclassifyd>
  40954c:	2800      	cmp	r0, #0
  40954e:	f040 80c2 	bne.w	4096d6 <_svfprintf_r+0x102a>
  409552:	9c09      	ldr	r4, [sp, #36]	; 0x24
  409554:	4f1c      	ldr	r7, [pc, #112]	; (4095c8 <_svfprintf_r+0xf1c>)
  409556:	4b1d      	ldr	r3, [pc, #116]	; (4095cc <_svfprintf_r+0xf20>)
  409558:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40955c:	900a      	str	r0, [sp, #40]	; 0x28
  40955e:	f04f 0c03 	mov.w	ip, #3
  409562:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  409566:	9409      	str	r4, [sp, #36]	; 0x24
  409568:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40956c:	9014      	str	r0, [sp, #80]	; 0x50
  40956e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  409572:	bfd8      	it	le
  409574:	461f      	movle	r7, r3
  409576:	4664      	mov	r4, ip
  409578:	f7ff ba2f 	b.w	4089da <_svfprintf_r+0x32e>
  40957c:	e9d3 4500 	ldrd	r4, r5, [r3]
  409580:	3308      	adds	r3, #8
  409582:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  409586:	9310      	str	r3, [sp, #64]	; 0x40
  409588:	e476      	b.n	408e78 <_svfprintf_r+0x7cc>
  40958a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40958e:	f01c 0f10 	tst.w	ip, #16
  409592:	f000 8155 	beq.w	409840 <_svfprintf_r+0x1194>
  409596:	9c10      	ldr	r4, [sp, #64]	; 0x40
  409598:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40959a:	6823      	ldr	r3, [r4, #0]
  40959c:	3404      	adds	r4, #4
  40959e:	9410      	str	r4, [sp, #64]	; 0x40
  4095a0:	601d      	str	r5, [r3, #0]
  4095a2:	f7ff b8a9 	b.w	4086f8 <_svfprintf_r+0x4c>
  4095a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4095a8:	0664      	lsls	r4, r4, #25
  4095aa:	f140 8142 	bpl.w	409832 <_svfprintf_r+0x1186>
  4095ae:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4095b2:	f8bc 4000 	ldrh.w	r4, [ip]
  4095b6:	f10c 0c04 	add.w	ip, ip, #4
  4095ba:	2500      	movs	r5, #0
  4095bc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  4095c0:	f7ff b9ca 	b.w	408958 <_svfprintf_r+0x2ac>
  4095c4:	0040d2c0 	.word	0x0040d2c0
  4095c8:	0040d2dc 	.word	0x0040d2dc
  4095cc:	0040d2d8 	.word	0x0040d2d8
  4095d0:	462c      	mov	r4, r5
  4095d2:	463d      	mov	r5, r7
  4095d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4095d6:	4694      	mov	ip, r2
  4095d8:	3301      	adds	r3, #1
  4095da:	44a4      	add	ip, r4
  4095dc:	2b07      	cmp	r3, #7
  4095de:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4095e2:	932c      	str	r3, [sp, #176]	; 0xb0
  4095e4:	6035      	str	r5, [r6, #0]
  4095e6:	6074      	str	r4, [r6, #4]
  4095e8:	f73f af14 	bgt.w	409414 <_svfprintf_r+0xd68>
  4095ec:	3608      	adds	r6, #8
  4095ee:	e71c      	b.n	40942a <_svfprintf_r+0xd7e>
  4095f0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4095f2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4095f4:	aa2b      	add	r2, sp, #172	; 0xac
  4095f6:	f002 fc0f 	bl	40be18 <__ssprint_r>
  4095fa:	2800      	cmp	r0, #0
  4095fc:	f47f a96e 	bne.w	4088dc <_svfprintf_r+0x230>
  409600:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409604:	ae38      	add	r6, sp, #224	; 0xe0
  409606:	e4fd      	b.n	409004 <_svfprintf_r+0x958>
  409608:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40960a:	49b7      	ldr	r1, [pc, #732]	; (4098e8 <_svfprintf_r+0x123c>)
  40960c:	6031      	str	r1, [r6, #0]
  40960e:	3201      	adds	r2, #1
  409610:	f10c 0c01 	add.w	ip, ip, #1
  409614:	2101      	movs	r1, #1
  409616:	2a07      	cmp	r2, #7
  409618:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40961c:	922c      	str	r2, [sp, #176]	; 0xb0
  40961e:	6071      	str	r1, [r6, #4]
  409620:	f300 80f7 	bgt.w	409812 <_svfprintf_r+0x1166>
  409624:	3608      	adds	r6, #8
  409626:	461c      	mov	r4, r3
  409628:	b92c      	cbnz	r4, 409636 <_svfprintf_r+0xf8a>
  40962a:	9d11      	ldr	r5, [sp, #68]	; 0x44
  40962c:	b91d      	cbnz	r5, 409636 <_svfprintf_r+0xf8a>
  40962e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409630:	07e8      	lsls	r0, r5, #31
  409632:	f57f aaad 	bpl.w	408b90 <_svfprintf_r+0x4e4>
  409636:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409638:	9918      	ldr	r1, [sp, #96]	; 0x60
  40963a:	9d15      	ldr	r5, [sp, #84]	; 0x54
  40963c:	6035      	str	r5, [r6, #0]
  40963e:	3301      	adds	r3, #1
  409640:	4461      	add	r1, ip
  409642:	9d18      	ldr	r5, [sp, #96]	; 0x60
  409644:	912d      	str	r1, [sp, #180]	; 0xb4
  409646:	2b07      	cmp	r3, #7
  409648:	6075      	str	r5, [r6, #4]
  40964a:	932c      	str	r3, [sp, #176]	; 0xb0
  40964c:	f300 81de 	bgt.w	409a0c <_svfprintf_r+0x1360>
  409650:	f106 0208 	add.w	r2, r6, #8
  409654:	4264      	negs	r4, r4
  409656:	2c00      	cmp	r4, #0
  409658:	f340 810b 	ble.w	409872 <_svfprintf_r+0x11c6>
  40965c:	2c10      	cmp	r4, #16
  40965e:	4da3      	ldr	r5, [pc, #652]	; (4098ec <_svfprintf_r+0x1240>)
  409660:	f340 8148 	ble.w	4098f4 <_svfprintf_r+0x1248>
  409664:	46a3      	mov	fp, r4
  409666:	2610      	movs	r6, #16
  409668:	460c      	mov	r4, r1
  40966a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40966e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  409672:	e006      	b.n	409682 <_svfprintf_r+0xfd6>
  409674:	3208      	adds	r2, #8
  409676:	f1ab 0b10 	sub.w	fp, fp, #16
  40967a:	f1bb 0f10 	cmp.w	fp, #16
  40967e:	f340 8137 	ble.w	4098f0 <_svfprintf_r+0x1244>
  409682:	3301      	adds	r3, #1
  409684:	3410      	adds	r4, #16
  409686:	2b07      	cmp	r3, #7
  409688:	942d      	str	r4, [sp, #180]	; 0xb4
  40968a:	932c      	str	r3, [sp, #176]	; 0xb0
  40968c:	e882 0060 	stmia.w	r2, {r5, r6}
  409690:	ddf0      	ble.n	409674 <_svfprintf_r+0xfc8>
  409692:	4640      	mov	r0, r8
  409694:	4651      	mov	r1, sl
  409696:	aa2b      	add	r2, sp, #172	; 0xac
  409698:	f002 fbbe 	bl	40be18 <__ssprint_r>
  40969c:	2800      	cmp	r0, #0
  40969e:	f47f a91d 	bne.w	4088dc <_svfprintf_r+0x230>
  4096a2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  4096a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4096a6:	aa38      	add	r2, sp, #224	; 0xe0
  4096a8:	e7e5      	b.n	409676 <_svfprintf_r+0xfca>
  4096aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4096ac:	f893 8001 	ldrb.w	r8, [r3, #1]
  4096b0:	f044 0420 	orr.w	r4, r4, #32
  4096b4:	f109 0901 	add.w	r9, r9, #1
  4096b8:	9409      	str	r4, [sp, #36]	; 0x24
  4096ba:	f7ff b853 	b.w	408764 <_svfprintf_r+0xb8>
  4096be:	980d      	ldr	r0, [sp, #52]	; 0x34
  4096c0:	990c      	ldr	r1, [sp, #48]	; 0x30
  4096c2:	aa2b      	add	r2, sp, #172	; 0xac
  4096c4:	f002 fba8 	bl	40be18 <__ssprint_r>
  4096c8:	2800      	cmp	r0, #0
  4096ca:	f47f a907 	bne.w	4088dc <_svfprintf_r+0x230>
  4096ce:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4096d2:	ae38      	add	r6, sp, #224	; 0xe0
  4096d4:	e4ac      	b.n	409030 <_svfprintf_r+0x984>
  4096d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4096d8:	3501      	adds	r5, #1
  4096da:	f028 0a20 	bic.w	sl, r8, #32
  4096de:	f000 80a5 	beq.w	40982c <_svfprintf_r+0x1180>
  4096e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4096e6:	d104      	bne.n	4096f2 <_svfprintf_r+0x1046>
  4096e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4096ea:	2d00      	cmp	r5, #0
  4096ec:	bf08      	it	eq
  4096ee:	2501      	moveq	r5, #1
  4096f0:	950a      	str	r5, [sp, #40]	; 0x28
  4096f2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4096f6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4096fa:	2b00      	cmp	r3, #0
  4096fc:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  409700:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  409704:	f2c0 819c 	blt.w	409a40 <_svfprintf_r+0x1394>
  409708:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  40970c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  409710:	f04f 0b00 	mov.w	fp, #0
  409714:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  409718:	f000 819b 	beq.w	409a52 <_svfprintf_r+0x13a6>
  40971c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  409720:	f000 81a9 	beq.w	409a76 <_svfprintf_r+0x13ca>
  409724:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  409728:	bf0a      	itet	eq
  40972a:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  40972c:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40972e:	1c65      	addeq	r5, r4, #1
  409730:	2002      	movs	r0, #2
  409732:	a925      	add	r1, sp, #148	; 0x94
  409734:	aa26      	add	r2, sp, #152	; 0x98
  409736:	ab29      	add	r3, sp, #164	; 0xa4
  409738:	e88d 0021 	stmia.w	sp, {r0, r5}
  40973c:	9203      	str	r2, [sp, #12]
  40973e:	9304      	str	r3, [sp, #16]
  409740:	9102      	str	r1, [sp, #8]
  409742:	980d      	ldr	r0, [sp, #52]	; 0x34
  409744:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  409748:	f000 fbde 	bl	409f08 <_dtoa_r>
  40974c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  409750:	4607      	mov	r7, r0
  409752:	d002      	beq.n	40975a <_svfprintf_r+0x10ae>
  409754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  409758:	d105      	bne.n	409766 <_svfprintf_r+0x10ba>
  40975a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40975e:	f01c 0f01 	tst.w	ip, #1
  409762:	f000 819c 	beq.w	409a9e <_svfprintf_r+0x13f2>
  409766:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40976a:	eb07 0405 	add.w	r4, r7, r5
  40976e:	f000 811c 	beq.w	4099aa <_svfprintf_r+0x12fe>
  409772:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  409776:	2200      	movs	r2, #0
  409778:	2300      	movs	r3, #0
  40977a:	f003 f81d 	bl	40c7b8 <__aeabi_dcmpeq>
  40977e:	2800      	cmp	r0, #0
  409780:	f040 8105 	bne.w	40998e <_svfprintf_r+0x12e2>
  409784:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  409786:	429c      	cmp	r4, r3
  409788:	d906      	bls.n	409798 <_svfprintf_r+0x10ec>
  40978a:	2130      	movs	r1, #48	; 0x30
  40978c:	1c5a      	adds	r2, r3, #1
  40978e:	9229      	str	r2, [sp, #164]	; 0xa4
  409790:	7019      	strb	r1, [r3, #0]
  409792:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  409794:	429c      	cmp	r4, r3
  409796:	d8f9      	bhi.n	40978c <_svfprintf_r+0x10e0>
  409798:	1bdb      	subs	r3, r3, r7
  40979a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40979e:	9311      	str	r3, [sp, #68]	; 0x44
  4097a0:	f000 80ed 	beq.w	40997e <_svfprintf_r+0x12d2>
  4097a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  4097a8:	f340 81f2 	ble.w	409b90 <_svfprintf_r+0x14e4>
  4097ac:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4097b0:	f000 8168 	beq.w	409a84 <_svfprintf_r+0x13d8>
  4097b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4097b6:	9414      	str	r4, [sp, #80]	; 0x50
  4097b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4097ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4097bc:	42ac      	cmp	r4, r5
  4097be:	f300 8132 	bgt.w	409a26 <_svfprintf_r+0x137a>
  4097c2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4097c6:	f01c 0f01 	tst.w	ip, #1
  4097ca:	f040 81ad 	bne.w	409b28 <_svfprintf_r+0x147c>
  4097ce:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  4097d2:	462c      	mov	r4, r5
  4097d4:	f04f 0867 	mov.w	r8, #103	; 0x67
  4097d8:	f1bb 0f00 	cmp.w	fp, #0
  4097dc:	f040 80b2 	bne.w	409944 <_svfprintf_r+0x1298>
  4097e0:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4097e2:	930b      	str	r3, [sp, #44]	; 0x2c
  4097e4:	9509      	str	r5, [sp, #36]	; 0x24
  4097e6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  4097ea:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4097ee:	f7ff b8f4 	b.w	4089da <_svfprintf_r+0x32e>
  4097f2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4097f4:	2140      	movs	r1, #64	; 0x40
  4097f6:	f7fc fe29 	bl	40644c <_malloc_r>
  4097fa:	6020      	str	r0, [r4, #0]
  4097fc:	6120      	str	r0, [r4, #16]
  4097fe:	2800      	cmp	r0, #0
  409800:	f000 81bf 	beq.w	409b82 <_svfprintf_r+0x14d6>
  409804:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  409808:	2340      	movs	r3, #64	; 0x40
  40980a:	f8cc 3014 	str.w	r3, [ip, #20]
  40980e:	f7fe bf63 	b.w	4086d8 <_svfprintf_r+0x2c>
  409812:	980d      	ldr	r0, [sp, #52]	; 0x34
  409814:	990c      	ldr	r1, [sp, #48]	; 0x30
  409816:	aa2b      	add	r2, sp, #172	; 0xac
  409818:	f002 fafe 	bl	40be18 <__ssprint_r>
  40981c:	2800      	cmp	r0, #0
  40981e:	f47f a85d 	bne.w	4088dc <_svfprintf_r+0x230>
  409822:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409824:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409828:	ae38      	add	r6, sp, #224	; 0xe0
  40982a:	e6fd      	b.n	409628 <_svfprintf_r+0xf7c>
  40982c:	2406      	movs	r4, #6
  40982e:	940a      	str	r4, [sp, #40]	; 0x28
  409830:	e75f      	b.n	4096f2 <_svfprintf_r+0x1046>
  409832:	9d10      	ldr	r5, [sp, #64]	; 0x40
  409834:	682c      	ldr	r4, [r5, #0]
  409836:	3504      	adds	r5, #4
  409838:	9510      	str	r5, [sp, #64]	; 0x40
  40983a:	2500      	movs	r5, #0
  40983c:	f7ff b88c 	b.w	408958 <_svfprintf_r+0x2ac>
  409840:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409844:	f01c 0f40 	tst.w	ip, #64	; 0x40
  409848:	f000 8087 	beq.w	40995a <_svfprintf_r+0x12ae>
  40984c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40984e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  409850:	6823      	ldr	r3, [r4, #0]
  409852:	3404      	adds	r4, #4
  409854:	9410      	str	r4, [sp, #64]	; 0x40
  409856:	801d      	strh	r5, [r3, #0]
  409858:	f7fe bf4e 	b.w	4086f8 <_svfprintf_r+0x4c>
  40985c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40985e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409860:	aa2b      	add	r2, sp, #172	; 0xac
  409862:	f002 fad9 	bl	40be18 <__ssprint_r>
  409866:	2800      	cmp	r0, #0
  409868:	f47f a838 	bne.w	4088dc <_svfprintf_r+0x230>
  40986c:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40986e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409870:	aa38      	add	r2, sp, #224	; 0xe0
  409872:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  409876:	9c11      	ldr	r4, [sp, #68]	; 0x44
  409878:	6017      	str	r7, [r2, #0]
  40987a:	3301      	adds	r3, #1
  40987c:	448c      	add	ip, r1
  40987e:	2b07      	cmp	r3, #7
  409880:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  409884:	932c      	str	r3, [sp, #176]	; 0xb0
  409886:	6054      	str	r4, [r2, #4]
  409888:	f73f ac92 	bgt.w	4091b0 <_svfprintf_r+0xb04>
  40988c:	f102 0608 	add.w	r6, r2, #8
  409890:	f7ff b97e 	b.w	408b90 <_svfprintf_r+0x4e4>
  409894:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  409898:	f7fa f9a6 	bl	403be8 <strlen>
  40989c:	9510      	str	r5, [sp, #64]	; 0x40
  40989e:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  4098a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4098a4:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4098a8:	4604      	mov	r4, r0
  4098aa:	9514      	str	r5, [sp, #80]	; 0x50
  4098ac:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4098b0:	f7ff b893 	b.w	4089da <_svfprintf_r+0x32e>
  4098b4:	980d      	ldr	r0, [sp, #52]	; 0x34
  4098b6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4098b8:	aa2b      	add	r2, sp, #172	; 0xac
  4098ba:	f002 faad 	bl	40be18 <__ssprint_r>
  4098be:	2800      	cmp	r0, #0
  4098c0:	f47f a80c 	bne.w	4088dc <_svfprintf_r+0x230>
  4098c4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4098c8:	ae38      	add	r6, sp, #224	; 0xe0
  4098ca:	e4cc      	b.n	409266 <_svfprintf_r+0xbba>
  4098cc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4098ce:	990c      	ldr	r1, [sp, #48]	; 0x30
  4098d0:	aa2b      	add	r2, sp, #172	; 0xac
  4098d2:	f002 faa1 	bl	40be18 <__ssprint_r>
  4098d6:	2800      	cmp	r0, #0
  4098d8:	f47f a800 	bne.w	4088dc <_svfprintf_r+0x230>
  4098dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4098de:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4098e2:	ae38      	add	r6, sp, #224	; 0xe0
  4098e4:	e5aa      	b.n	40943c <_svfprintf_r+0xd90>
  4098e6:	bf00      	nop
  4098e8:	0040d2e0 	.word	0x0040d2e0
  4098ec:	0040d2c0 	.word	0x0040d2c0
  4098f0:	4621      	mov	r1, r4
  4098f2:	465c      	mov	r4, fp
  4098f4:	3301      	adds	r3, #1
  4098f6:	4421      	add	r1, r4
  4098f8:	2b07      	cmp	r3, #7
  4098fa:	912d      	str	r1, [sp, #180]	; 0xb4
  4098fc:	932c      	str	r3, [sp, #176]	; 0xb0
  4098fe:	6015      	str	r5, [r2, #0]
  409900:	6054      	str	r4, [r2, #4]
  409902:	dcab      	bgt.n	40985c <_svfprintf_r+0x11b0>
  409904:	3208      	adds	r2, #8
  409906:	e7b4      	b.n	409872 <_svfprintf_r+0x11c6>
  409908:	980d      	ldr	r0, [sp, #52]	; 0x34
  40990a:	990c      	ldr	r1, [sp, #48]	; 0x30
  40990c:	aa2b      	add	r2, sp, #172	; 0xac
  40990e:	f002 fa83 	bl	40be18 <__ssprint_r>
  409912:	2800      	cmp	r0, #0
  409914:	f47e afe2 	bne.w	4088dc <_svfprintf_r+0x230>
  409918:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40991a:	9911      	ldr	r1, [sp, #68]	; 0x44
  40991c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  409920:	1b0c      	subs	r4, r1, r4
  409922:	ae38      	add	r6, sp, #224	; 0xe0
  409924:	e59f      	b.n	409466 <_svfprintf_r+0xdba>
  409926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  409928:	9714      	str	r7, [sp, #80]	; 0x50
  40992a:	2c06      	cmp	r4, #6
  40992c:	bf28      	it	cs
  40992e:	2406      	movcs	r4, #6
  409930:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409934:	46ba      	mov	sl, r7
  409936:	970a      	str	r7, [sp, #40]	; 0x28
  409938:	9510      	str	r5, [sp, #64]	; 0x40
  40993a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40993e:	4f97      	ldr	r7, [pc, #604]	; (409b9c <_svfprintf_r+0x14f0>)
  409940:	f7ff b84b 	b.w	4089da <_svfprintf_r+0x32e>
  409944:	9d12      	ldr	r5, [sp, #72]	; 0x48
  409946:	9509      	str	r5, [sp, #36]	; 0x24
  409948:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  40994c:	2500      	movs	r5, #0
  40994e:	930b      	str	r3, [sp, #44]	; 0x2c
  409950:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  409954:	950a      	str	r5, [sp, #40]	; 0x28
  409956:	f7ff b843 	b.w	4089e0 <_svfprintf_r+0x334>
  40995a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40995e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  409960:	f8dc 3000 	ldr.w	r3, [ip]
  409964:	f10c 0c04 	add.w	ip, ip, #4
  409968:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40996c:	601c      	str	r4, [r3, #0]
  40996e:	f7fe bec3 	b.w	4086f8 <_svfprintf_r+0x4c>
  409972:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  409976:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  40997a:	f7ff ba8f 	b.w	408e9c <_svfprintf_r+0x7f0>
  40997e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409980:	1cdc      	adds	r4, r3, #3
  409982:	db19      	blt.n	4099b8 <_svfprintf_r+0x130c>
  409984:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  409986:	429c      	cmp	r4, r3
  409988:	db16      	blt.n	4099b8 <_svfprintf_r+0x130c>
  40998a:	9314      	str	r3, [sp, #80]	; 0x50
  40998c:	e714      	b.n	4097b8 <_svfprintf_r+0x110c>
  40998e:	4623      	mov	r3, r4
  409990:	e702      	b.n	409798 <_svfprintf_r+0x10ec>
  409992:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  409996:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40999a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40999c:	9510      	str	r5, [sp, #64]	; 0x40
  40999e:	900a      	str	r0, [sp, #40]	; 0x28
  4099a0:	9014      	str	r0, [sp, #80]	; 0x50
  4099a2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  4099a6:	f7ff b818 	b.w	4089da <_svfprintf_r+0x32e>
  4099aa:	783b      	ldrb	r3, [r7, #0]
  4099ac:	2b30      	cmp	r3, #48	; 0x30
  4099ae:	f000 80ad 	beq.w	409b0c <_svfprintf_r+0x1460>
  4099b2:	9d25      	ldr	r5, [sp, #148]	; 0x94
  4099b4:	442c      	add	r4, r5
  4099b6:	e6dc      	b.n	409772 <_svfprintf_r+0x10c6>
  4099b8:	f1a8 0802 	sub.w	r8, r8, #2
  4099bc:	3b01      	subs	r3, #1
  4099be:	2b00      	cmp	r3, #0
  4099c0:	9325      	str	r3, [sp, #148]	; 0x94
  4099c2:	bfba      	itte	lt
  4099c4:	425b      	neglt	r3, r3
  4099c6:	222d      	movlt	r2, #45	; 0x2d
  4099c8:	222b      	movge	r2, #43	; 0x2b
  4099ca:	2b09      	cmp	r3, #9
  4099cc:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  4099d0:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  4099d4:	dc65      	bgt.n	409aa2 <_svfprintf_r+0x13f6>
  4099d6:	3330      	adds	r3, #48	; 0x30
  4099d8:	2230      	movs	r2, #48	; 0x30
  4099da:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
  4099de:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  4099e2:	ab28      	add	r3, sp, #160	; 0xa0
  4099e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4099e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4099e8:	aa27      	add	r2, sp, #156	; 0x9c
  4099ea:	1a9a      	subs	r2, r3, r2
  4099ec:	2d01      	cmp	r5, #1
  4099ee:	9219      	str	r2, [sp, #100]	; 0x64
  4099f0:	4414      	add	r4, r2
  4099f2:	f340 80b7 	ble.w	409b64 <_svfprintf_r+0x14b8>
  4099f6:	3401      	adds	r4, #1
  4099f8:	2500      	movs	r5, #0
  4099fa:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  4099fe:	9514      	str	r5, [sp, #80]	; 0x50
  409a00:	e6ea      	b.n	4097d8 <_svfprintf_r+0x112c>
  409a02:	2400      	movs	r4, #0
  409a04:	4681      	mov	r9, r0
  409a06:	940a      	str	r4, [sp, #40]	; 0x28
  409a08:	f7fe beae 	b.w	408768 <_svfprintf_r+0xbc>
  409a0c:	980d      	ldr	r0, [sp, #52]	; 0x34
  409a0e:	990c      	ldr	r1, [sp, #48]	; 0x30
  409a10:	aa2b      	add	r2, sp, #172	; 0xac
  409a12:	f002 fa01 	bl	40be18 <__ssprint_r>
  409a16:	2800      	cmp	r0, #0
  409a18:	f47e af60 	bne.w	4088dc <_svfprintf_r+0x230>
  409a1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  409a1e:	992d      	ldr	r1, [sp, #180]	; 0xb4
  409a20:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  409a22:	aa38      	add	r2, sp, #224	; 0xe0
  409a24:	e616      	b.n	409654 <_svfprintf_r+0xfa8>
  409a26:	9c14      	ldr	r4, [sp, #80]	; 0x50
  409a28:	9d11      	ldr	r5, [sp, #68]	; 0x44
  409a2a:	2c00      	cmp	r4, #0
  409a2c:	bfd4      	ite	le
  409a2e:	f1c4 0402 	rsble	r4, r4, #2
  409a32:	2401      	movgt	r4, #1
  409a34:	442c      	add	r4, r5
  409a36:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409a3a:	f04f 0867 	mov.w	r8, #103	; 0x67
  409a3e:	e6cb      	b.n	4097d8 <_svfprintf_r+0x112c>
  409a40:	9917      	ldr	r1, [sp, #92]	; 0x5c
  409a42:	9816      	ldr	r0, [sp, #88]	; 0x58
  409a44:	9020      	str	r0, [sp, #128]	; 0x80
  409a46:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  409a4a:	9121      	str	r1, [sp, #132]	; 0x84
  409a4c:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  409a50:	e660      	b.n	409714 <_svfprintf_r+0x1068>
  409a52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409a54:	9501      	str	r5, [sp, #4]
  409a56:	2003      	movs	r0, #3
  409a58:	a925      	add	r1, sp, #148	; 0x94
  409a5a:	aa26      	add	r2, sp, #152	; 0x98
  409a5c:	ab29      	add	r3, sp, #164	; 0xa4
  409a5e:	9000      	str	r0, [sp, #0]
  409a60:	9203      	str	r2, [sp, #12]
  409a62:	9304      	str	r3, [sp, #16]
  409a64:	9102      	str	r1, [sp, #8]
  409a66:	980d      	ldr	r0, [sp, #52]	; 0x34
  409a68:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  409a6c:	f000 fa4c 	bl	409f08 <_dtoa_r>
  409a70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409a72:	4607      	mov	r7, r0
  409a74:	e677      	b.n	409766 <_svfprintf_r+0x10ba>
  409a76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  409a78:	9401      	str	r4, [sp, #4]
  409a7a:	2003      	movs	r0, #3
  409a7c:	a925      	add	r1, sp, #148	; 0x94
  409a7e:	aa26      	add	r2, sp, #152	; 0x98
  409a80:	ab29      	add	r3, sp, #164	; 0xa4
  409a82:	e7ec      	b.n	409a5e <_svfprintf_r+0x13b2>
  409a84:	9d25      	ldr	r5, [sp, #148]	; 0x94
  409a86:	9514      	str	r5, [sp, #80]	; 0x50
  409a88:	2d00      	cmp	r5, #0
  409a8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  409a8c:	dd63      	ble.n	409b56 <_svfprintf_r+0x14aa>
  409a8e:	bbb4      	cbnz	r4, 409afe <_svfprintf_r+0x1452>
  409a90:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409a92:	07e8      	lsls	r0, r5, #31
  409a94:	d433      	bmi.n	409afe <_svfprintf_r+0x1452>
  409a96:	9c14      	ldr	r4, [sp, #80]	; 0x50
  409a98:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409a9c:	e69c      	b.n	4097d8 <_svfprintf_r+0x112c>
  409a9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  409aa0:	e67a      	b.n	409798 <_svfprintf_r+0x10ec>
  409aa2:	f10d 00aa 	add.w	r0, sp, #170	; 0xaa
  409aa6:	4d3e      	ldr	r5, [pc, #248]	; (409ba0 <_svfprintf_r+0x14f4>)
  409aa8:	17da      	asrs	r2, r3, #31
  409aaa:	fb85 5103 	smull	r5, r1, r5, r3
  409aae:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
  409ab2:	eb01 0481 	add.w	r4, r1, r1, lsl #2
  409ab6:	4602      	mov	r2, r0
  409ab8:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  409abc:	f103 0030 	add.w	r0, r3, #48	; 0x30
  409ac0:	2909      	cmp	r1, #9
  409ac2:	7010      	strb	r0, [r2, #0]
  409ac4:	460b      	mov	r3, r1
  409ac6:	f102 30ff 	add.w	r0, r2, #4294967295
  409aca:	dcec      	bgt.n	409aa6 <_svfprintf_r+0x13fa>
  409acc:	f101 0330 	add.w	r3, r1, #48	; 0x30
  409ad0:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  409ad4:	b2d9      	uxtb	r1, r3
  409ad6:	4284      	cmp	r4, r0
  409ad8:	f802 1c01 	strb.w	r1, [r2, #-1]
  409adc:	d95a      	bls.n	409b94 <_svfprintf_r+0x14e8>
  409ade:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  409ae2:	4613      	mov	r3, r2
  409ae4:	e001      	b.n	409aea <_svfprintf_r+0x143e>
  409ae6:	f813 1b01 	ldrb.w	r1, [r3], #1
  409aea:	42a3      	cmp	r3, r4
  409aec:	f800 1f01 	strb.w	r1, [r0, #1]!
  409af0:	d1f9      	bne.n	409ae6 <_svfprintf_r+0x143a>
  409af2:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  409af6:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
  409afa:	3bf6      	subs	r3, #246	; 0xf6
  409afc:	e772      	b.n	4099e4 <_svfprintf_r+0x1338>
  409afe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409b00:	1c6c      	adds	r4, r5, #1
  409b02:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409b04:	442c      	add	r4, r5
  409b06:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b0a:	e665      	b.n	4097d8 <_svfprintf_r+0x112c>
  409b0c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  409b10:	2200      	movs	r2, #0
  409b12:	2300      	movs	r3, #0
  409b14:	f002 fe50 	bl	40c7b8 <__aeabi_dcmpeq>
  409b18:	2800      	cmp	r0, #0
  409b1a:	f47f af4a 	bne.w	4099b2 <_svfprintf_r+0x1306>
  409b1e:	f1c5 0501 	rsb	r5, r5, #1
  409b22:	9525      	str	r5, [sp, #148]	; 0x94
  409b24:	442c      	add	r4, r5
  409b26:	e624      	b.n	409772 <_svfprintf_r+0x10c6>
  409b28:	9d14      	ldr	r5, [sp, #80]	; 0x50
  409b2a:	1c6c      	adds	r4, r5, #1
  409b2c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b30:	f04f 0867 	mov.w	r8, #103	; 0x67
  409b34:	e650      	b.n	4097d8 <_svfprintf_r+0x112c>
  409b36:	9d10      	ldr	r5, [sp, #64]	; 0x40
  409b38:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  409b3c:	682d      	ldr	r5, [r5, #0]
  409b3e:	f899 8001 	ldrb.w	r8, [r9, #1]
  409b42:	950a      	str	r5, [sp, #40]	; 0x28
  409b44:	f10c 0304 	add.w	r3, ip, #4
  409b48:	2d00      	cmp	r5, #0
  409b4a:	9310      	str	r3, [sp, #64]	; 0x40
  409b4c:	4681      	mov	r9, r0
  409b4e:	f6be ae09 	bge.w	408764 <_svfprintf_r+0xb8>
  409b52:	f7fe be04 	b.w	40875e <_svfprintf_r+0xb2>
  409b56:	b97c      	cbnz	r4, 409b78 <_svfprintf_r+0x14cc>
  409b58:	9d09      	ldr	r5, [sp, #36]	; 0x24
  409b5a:	07e9      	lsls	r1, r5, #31
  409b5c:	d40c      	bmi.n	409b78 <_svfprintf_r+0x14cc>
  409b5e:	2301      	movs	r3, #1
  409b60:	461c      	mov	r4, r3
  409b62:	e639      	b.n	4097d8 <_svfprintf_r+0x112c>
  409b64:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  409b68:	f01c 0301 	ands.w	r3, ip, #1
  409b6c:	f47f af43 	bne.w	4099f6 <_svfprintf_r+0x134a>
  409b70:	9314      	str	r3, [sp, #80]	; 0x50
  409b72:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b76:	e62f      	b.n	4097d8 <_svfprintf_r+0x112c>
  409b78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  409b7a:	1cac      	adds	r4, r5, #2
  409b7c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  409b80:	e62a      	b.n	4097d8 <_svfprintf_r+0x112c>
  409b82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  409b84:	230c      	movs	r3, #12
  409b86:	602b      	str	r3, [r5, #0]
  409b88:	f04f 30ff 	mov.w	r0, #4294967295
  409b8c:	f7fe beae 	b.w	4088ec <_svfprintf_r+0x240>
  409b90:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409b92:	e713      	b.n	4099bc <_svfprintf_r+0x1310>
  409b94:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  409b98:	e724      	b.n	4099e4 <_svfprintf_r+0x1338>
  409b9a:	bf00      	nop
  409b9c:	0040d124 	.word	0x0040d124
  409ba0:	66666667 	.word	0x66666667

00409ba4 <__submore>:
  409ba4:	f101 0340 	add.w	r3, r1, #64	; 0x40
  409ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409bac:	460c      	mov	r4, r1
  409bae:	6b09      	ldr	r1, [r1, #48]	; 0x30
  409bb0:	4299      	cmp	r1, r3
  409bb2:	d014      	beq.n	409bde <__submore+0x3a>
  409bb4:	6b66      	ldr	r6, [r4, #52]	; 0x34
  409bb6:	0077      	lsls	r7, r6, #1
  409bb8:	463a      	mov	r2, r7
  409bba:	f7fc ffe7 	bl	406b8c <_realloc_r>
  409bbe:	4605      	mov	r5, r0
  409bc0:	b340      	cbz	r0, 409c14 <__submore+0x70>
  409bc2:	eb00 0806 	add.w	r8, r0, r6
  409bc6:	4632      	mov	r2, r6
  409bc8:	4640      	mov	r0, r8
  409bca:	4629      	mov	r1, r5
  409bcc:	f7f9 fd22 	bl	403614 <memcpy>
  409bd0:	f8c4 8000 	str.w	r8, [r4]
  409bd4:	6325      	str	r5, [r4, #48]	; 0x30
  409bd6:	6367      	str	r7, [r4, #52]	; 0x34
  409bd8:	2000      	movs	r0, #0
  409bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
  409be2:	f7fc fc33 	bl	40644c <_malloc_r>
  409be6:	b1a8      	cbz	r0, 409c14 <__submore+0x70>
  409be8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  409bec:	6320      	str	r0, [r4, #48]	; 0x30
  409bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
  409bf2:	6362      	str	r2, [r4, #52]	; 0x34
  409bf4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
  409bf8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  409bfc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
  409c00:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  409c04:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
  409c08:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
  409c0c:	6020      	str	r0, [r4, #0]
  409c0e:	2000      	movs	r0, #0
  409c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c14:	f04f 30ff 	mov.w	r0, #4294967295
  409c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00409c1c <__swbuf_r>:
  409c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409c1e:	460d      	mov	r5, r1
  409c20:	4614      	mov	r4, r2
  409c22:	4607      	mov	r7, r0
  409c24:	b110      	cbz	r0, 409c2c <__swbuf_r+0x10>
  409c26:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409c28:	2b00      	cmp	r3, #0
  409c2a:	d048      	beq.n	409cbe <__swbuf_r+0xa2>
  409c2c:	89a2      	ldrh	r2, [r4, #12]
  409c2e:	69a3      	ldr	r3, [r4, #24]
  409c30:	60a3      	str	r3, [r4, #8]
  409c32:	b293      	uxth	r3, r2
  409c34:	0718      	lsls	r0, r3, #28
  409c36:	d538      	bpl.n	409caa <__swbuf_r+0x8e>
  409c38:	6926      	ldr	r6, [r4, #16]
  409c3a:	2e00      	cmp	r6, #0
  409c3c:	d035      	beq.n	409caa <__swbuf_r+0x8e>
  409c3e:	0499      	lsls	r1, r3, #18
  409c40:	b2ed      	uxtb	r5, r5
  409c42:	d515      	bpl.n	409c70 <__swbuf_r+0x54>
  409c44:	6823      	ldr	r3, [r4, #0]
  409c46:	6962      	ldr	r2, [r4, #20]
  409c48:	1b9e      	subs	r6, r3, r6
  409c4a:	4296      	cmp	r6, r2
  409c4c:	da1c      	bge.n	409c88 <__swbuf_r+0x6c>
  409c4e:	3601      	adds	r6, #1
  409c50:	68a2      	ldr	r2, [r4, #8]
  409c52:	1c59      	adds	r1, r3, #1
  409c54:	3a01      	subs	r2, #1
  409c56:	60a2      	str	r2, [r4, #8]
  409c58:	6021      	str	r1, [r4, #0]
  409c5a:	701d      	strb	r5, [r3, #0]
  409c5c:	6963      	ldr	r3, [r4, #20]
  409c5e:	42b3      	cmp	r3, r6
  409c60:	d01a      	beq.n	409c98 <__swbuf_r+0x7c>
  409c62:	89a3      	ldrh	r3, [r4, #12]
  409c64:	07db      	lsls	r3, r3, #31
  409c66:	d501      	bpl.n	409c6c <__swbuf_r+0x50>
  409c68:	2d0a      	cmp	r5, #10
  409c6a:	d015      	beq.n	409c98 <__swbuf_r+0x7c>
  409c6c:	4628      	mov	r0, r5
  409c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  409c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409c7a:	6663      	str	r3, [r4, #100]	; 0x64
  409c7c:	6823      	ldr	r3, [r4, #0]
  409c7e:	81a2      	strh	r2, [r4, #12]
  409c80:	6962      	ldr	r2, [r4, #20]
  409c82:	1b9e      	subs	r6, r3, r6
  409c84:	4296      	cmp	r6, r2
  409c86:	dbe2      	blt.n	409c4e <__swbuf_r+0x32>
  409c88:	4638      	mov	r0, r7
  409c8a:	4621      	mov	r1, r4
  409c8c:	f7fb ff58 	bl	405b40 <_fflush_r>
  409c90:	b940      	cbnz	r0, 409ca4 <__swbuf_r+0x88>
  409c92:	6823      	ldr	r3, [r4, #0]
  409c94:	2601      	movs	r6, #1
  409c96:	e7db      	b.n	409c50 <__swbuf_r+0x34>
  409c98:	4638      	mov	r0, r7
  409c9a:	4621      	mov	r1, r4
  409c9c:	f7fb ff50 	bl	405b40 <_fflush_r>
  409ca0:	2800      	cmp	r0, #0
  409ca2:	d0e3      	beq.n	409c6c <__swbuf_r+0x50>
  409ca4:	f04f 30ff 	mov.w	r0, #4294967295
  409ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409caa:	4638      	mov	r0, r7
  409cac:	4621      	mov	r1, r4
  409cae:	f7fb fe19 	bl	4058e4 <__swsetup_r>
  409cb2:	2800      	cmp	r0, #0
  409cb4:	d1f6      	bne.n	409ca4 <__swbuf_r+0x88>
  409cb6:	89a2      	ldrh	r2, [r4, #12]
  409cb8:	6926      	ldr	r6, [r4, #16]
  409cba:	b293      	uxth	r3, r2
  409cbc:	e7bf      	b.n	409c3e <__swbuf_r+0x22>
  409cbe:	f7fb ff5b 	bl	405b78 <__sinit>
  409cc2:	e7b3      	b.n	409c2c <__swbuf_r+0x10>

00409cc4 <_wcrtomb_r>:
  409cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409cc8:	461e      	mov	r6, r3
  409cca:	b086      	sub	sp, #24
  409ccc:	460c      	mov	r4, r1
  409cce:	4605      	mov	r5, r0
  409cd0:	4617      	mov	r7, r2
  409cd2:	4b0f      	ldr	r3, [pc, #60]	; (409d10 <_wcrtomb_r+0x4c>)
  409cd4:	b191      	cbz	r1, 409cfc <_wcrtomb_r+0x38>
  409cd6:	f8d3 8000 	ldr.w	r8, [r3]
  409cda:	f7fc fb1d 	bl	406318 <__locale_charset>
  409cde:	9600      	str	r6, [sp, #0]
  409ce0:	4603      	mov	r3, r0
  409ce2:	4621      	mov	r1, r4
  409ce4:	463a      	mov	r2, r7
  409ce6:	4628      	mov	r0, r5
  409ce8:	47c0      	blx	r8
  409cea:	1c43      	adds	r3, r0, #1
  409cec:	d103      	bne.n	409cf6 <_wcrtomb_r+0x32>
  409cee:	2200      	movs	r2, #0
  409cf0:	238a      	movs	r3, #138	; 0x8a
  409cf2:	6032      	str	r2, [r6, #0]
  409cf4:	602b      	str	r3, [r5, #0]
  409cf6:	b006      	add	sp, #24
  409cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409cfc:	681f      	ldr	r7, [r3, #0]
  409cfe:	f7fc fb0b 	bl	406318 <__locale_charset>
  409d02:	9600      	str	r6, [sp, #0]
  409d04:	4603      	mov	r3, r0
  409d06:	4622      	mov	r2, r4
  409d08:	4628      	mov	r0, r5
  409d0a:	a903      	add	r1, sp, #12
  409d0c:	47b8      	blx	r7
  409d0e:	e7ec      	b.n	409cea <_wcrtomb_r+0x26>
  409d10:	20000990 	.word	0x20000990

00409d14 <__ascii_wctomb>:
  409d14:	b121      	cbz	r1, 409d20 <__ascii_wctomb+0xc>
  409d16:	2aff      	cmp	r2, #255	; 0xff
  409d18:	d804      	bhi.n	409d24 <__ascii_wctomb+0x10>
  409d1a:	700a      	strb	r2, [r1, #0]
  409d1c:	2001      	movs	r0, #1
  409d1e:	4770      	bx	lr
  409d20:	4608      	mov	r0, r1
  409d22:	4770      	bx	lr
  409d24:	238a      	movs	r3, #138	; 0x8a
  409d26:	6003      	str	r3, [r0, #0]
  409d28:	f04f 30ff 	mov.w	r0, #4294967295
  409d2c:	4770      	bx	lr
  409d2e:	bf00      	nop

00409d30 <__register_exitproc>:
  409d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  409d32:	4c27      	ldr	r4, [pc, #156]	; (409dd0 <__register_exitproc+0xa0>)
  409d34:	6826      	ldr	r6, [r4, #0]
  409d36:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  409d3a:	b085      	sub	sp, #20
  409d3c:	4607      	mov	r7, r0
  409d3e:	2c00      	cmp	r4, #0
  409d40:	d041      	beq.n	409dc6 <__register_exitproc+0x96>
  409d42:	6865      	ldr	r5, [r4, #4]
  409d44:	2d1f      	cmp	r5, #31
  409d46:	dd1e      	ble.n	409d86 <__register_exitproc+0x56>
  409d48:	4822      	ldr	r0, [pc, #136]	; (409dd4 <__register_exitproc+0xa4>)
  409d4a:	b918      	cbnz	r0, 409d54 <__register_exitproc+0x24>
  409d4c:	f04f 30ff 	mov.w	r0, #4294967295
  409d50:	b005      	add	sp, #20
  409d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d54:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409d58:	9103      	str	r1, [sp, #12]
  409d5a:	9202      	str	r2, [sp, #8]
  409d5c:	9301      	str	r3, [sp, #4]
  409d5e:	f7fc fb6d 	bl	40643c <malloc>
  409d62:	9903      	ldr	r1, [sp, #12]
  409d64:	9a02      	ldr	r2, [sp, #8]
  409d66:	9b01      	ldr	r3, [sp, #4]
  409d68:	4604      	mov	r4, r0
  409d6a:	2800      	cmp	r0, #0
  409d6c:	d0ee      	beq.n	409d4c <__register_exitproc+0x1c>
  409d6e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  409d72:	6025      	str	r5, [r4, #0]
  409d74:	2000      	movs	r0, #0
  409d76:	6060      	str	r0, [r4, #4]
  409d78:	4605      	mov	r5, r0
  409d7a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  409d7e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  409d82:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  409d86:	b93f      	cbnz	r7, 409d98 <__register_exitproc+0x68>
  409d88:	1cab      	adds	r3, r5, #2
  409d8a:	2000      	movs	r0, #0
  409d8c:	3501      	adds	r5, #1
  409d8e:	6065      	str	r5, [r4, #4]
  409d90:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  409d94:	b005      	add	sp, #20
  409d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d98:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  409d9c:	f04f 0c01 	mov.w	ip, #1
  409da0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  409da4:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  409da8:	fa0c f205 	lsl.w	r2, ip, r5
  409dac:	4316      	orrs	r6, r2
  409dae:	2f02      	cmp	r7, #2
  409db0:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  409db4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  409db8:	d1e6      	bne.n	409d88 <__register_exitproc+0x58>
  409dba:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  409dbe:	431a      	orrs	r2, r3
  409dc0:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  409dc4:	e7e0      	b.n	409d88 <__register_exitproc+0x58>
  409dc6:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  409dca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  409dce:	e7b8      	b.n	409d42 <__register_exitproc+0x12>
  409dd0:	0040d0cc 	.word	0x0040d0cc
  409dd4:	0040643d 	.word	0x0040643d

00409dd8 <quorem>:
  409dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409ddc:	6903      	ldr	r3, [r0, #16]
  409dde:	690d      	ldr	r5, [r1, #16]
  409de0:	429d      	cmp	r5, r3
  409de2:	b083      	sub	sp, #12
  409de4:	4683      	mov	fp, r0
  409de6:	f300 808b 	bgt.w	409f00 <quorem+0x128>
  409dea:	3d01      	subs	r5, #1
  409dec:	f101 0414 	add.w	r4, r1, #20
  409df0:	f100 0a14 	add.w	sl, r0, #20
  409df4:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  409df8:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  409dfc:	3201      	adds	r2, #1
  409dfe:	fbb3 f8f2 	udiv	r8, r3, r2
  409e02:	00aa      	lsls	r2, r5, #2
  409e04:	4691      	mov	r9, r2
  409e06:	9200      	str	r2, [sp, #0]
  409e08:	4452      	add	r2, sl
  409e0a:	44a1      	add	r9, r4
  409e0c:	9201      	str	r2, [sp, #4]
  409e0e:	f1b8 0f00 	cmp.w	r8, #0
  409e12:	d03d      	beq.n	409e90 <quorem+0xb8>
  409e14:	f04f 0e00 	mov.w	lr, #0
  409e18:	4670      	mov	r0, lr
  409e1a:	4622      	mov	r2, r4
  409e1c:	4653      	mov	r3, sl
  409e1e:	468c      	mov	ip, r1
  409e20:	f852 6b04 	ldr.w	r6, [r2], #4
  409e24:	6819      	ldr	r1, [r3, #0]
  409e26:	b2b7      	uxth	r7, r6
  409e28:	0c36      	lsrs	r6, r6, #16
  409e2a:	fb07 ee08 	mla	lr, r7, r8, lr
  409e2e:	fb06 f608 	mul.w	r6, r6, r8
  409e32:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  409e36:	fa1f f78e 	uxth.w	r7, lr
  409e3a:	1bc7      	subs	r7, r0, r7
  409e3c:	b2b0      	uxth	r0, r6
  409e3e:	fa17 f781 	uxtah	r7, r7, r1
  409e42:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  409e46:	eb00 4027 	add.w	r0, r0, r7, asr #16
  409e4a:	b2bf      	uxth	r7, r7
  409e4c:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  409e50:	4591      	cmp	r9, r2
  409e52:	f843 7b04 	str.w	r7, [r3], #4
  409e56:	ea4f 4020 	mov.w	r0, r0, asr #16
  409e5a:	ea4f 4e16 	mov.w	lr, r6, lsr #16
  409e5e:	d2df      	bcs.n	409e20 <quorem+0x48>
  409e60:	9a00      	ldr	r2, [sp, #0]
  409e62:	f85a 3002 	ldr.w	r3, [sl, r2]
  409e66:	4661      	mov	r1, ip
  409e68:	b993      	cbnz	r3, 409e90 <quorem+0xb8>
  409e6a:	9a01      	ldr	r2, [sp, #4]
  409e6c:	1f13      	subs	r3, r2, #4
  409e6e:	459a      	cmp	sl, r3
  409e70:	d20c      	bcs.n	409e8c <quorem+0xb4>
  409e72:	f852 3c04 	ldr.w	r3, [r2, #-4]
  409e76:	b94b      	cbnz	r3, 409e8c <quorem+0xb4>
  409e78:	f1a2 0308 	sub.w	r3, r2, #8
  409e7c:	e002      	b.n	409e84 <quorem+0xac>
  409e7e:	681a      	ldr	r2, [r3, #0]
  409e80:	3b04      	subs	r3, #4
  409e82:	b91a      	cbnz	r2, 409e8c <quorem+0xb4>
  409e84:	459a      	cmp	sl, r3
  409e86:	f105 35ff 	add.w	r5, r5, #4294967295
  409e8a:	d3f8      	bcc.n	409e7e <quorem+0xa6>
  409e8c:	f8cb 5010 	str.w	r5, [fp, #16]
  409e90:	4658      	mov	r0, fp
  409e92:	f001 fddf 	bl	40ba54 <__mcmp>
  409e96:	2800      	cmp	r0, #0
  409e98:	db2e      	blt.n	409ef8 <quorem+0x120>
  409e9a:	f108 0801 	add.w	r8, r8, #1
  409e9e:	4653      	mov	r3, sl
  409ea0:	2200      	movs	r2, #0
  409ea2:	f854 6b04 	ldr.w	r6, [r4], #4
  409ea6:	6818      	ldr	r0, [r3, #0]
  409ea8:	b2b1      	uxth	r1, r6
  409eaa:	1a52      	subs	r2, r2, r1
  409eac:	0c36      	lsrs	r6, r6, #16
  409eae:	fa12 f180 	uxtah	r1, r2, r0
  409eb2:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
  409eb6:	eb02 4221 	add.w	r2, r2, r1, asr #16
  409eba:	b289      	uxth	r1, r1
  409ebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  409ec0:	45a1      	cmp	r9, r4
  409ec2:	f843 1b04 	str.w	r1, [r3], #4
  409ec6:	ea4f 4222 	mov.w	r2, r2, asr #16
  409eca:	d2ea      	bcs.n	409ea2 <quorem+0xca>
  409ecc:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  409ed0:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  409ed4:	b982      	cbnz	r2, 409ef8 <quorem+0x120>
  409ed6:	1f1a      	subs	r2, r3, #4
  409ed8:	4592      	cmp	sl, r2
  409eda:	d20b      	bcs.n	409ef4 <quorem+0x11c>
  409edc:	f853 2c04 	ldr.w	r2, [r3, #-4]
  409ee0:	b942      	cbnz	r2, 409ef4 <quorem+0x11c>
  409ee2:	3b08      	subs	r3, #8
  409ee4:	e002      	b.n	409eec <quorem+0x114>
  409ee6:	681a      	ldr	r2, [r3, #0]
  409ee8:	3b04      	subs	r3, #4
  409eea:	b91a      	cbnz	r2, 409ef4 <quorem+0x11c>
  409eec:	459a      	cmp	sl, r3
  409eee:	f105 35ff 	add.w	r5, r5, #4294967295
  409ef2:	d3f8      	bcc.n	409ee6 <quorem+0x10e>
  409ef4:	f8cb 5010 	str.w	r5, [fp, #16]
  409ef8:	4640      	mov	r0, r8
  409efa:	b003      	add	sp, #12
  409efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f00:	2000      	movs	r0, #0
  409f02:	b003      	add	sp, #12
  409f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00409f08 <_dtoa_r>:
  409f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409f0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  409f0e:	b09b      	sub	sp, #108	; 0x6c
  409f10:	4604      	mov	r4, r0
  409f12:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  409f14:	4692      	mov	sl, r2
  409f16:	469b      	mov	fp, r3
  409f18:	b149      	cbz	r1, 409f2e <_dtoa_r+0x26>
  409f1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
  409f1c:	604b      	str	r3, [r1, #4]
  409f1e:	2201      	movs	r2, #1
  409f20:	fa02 f303 	lsl.w	r3, r2, r3
  409f24:	608b      	str	r3, [r1, #8]
  409f26:	f001 fb51 	bl	40b5cc <_Bfree>
  409f2a:	2300      	movs	r3, #0
  409f2c:	6423      	str	r3, [r4, #64]	; 0x40
  409f2e:	f1bb 0f00 	cmp.w	fp, #0
  409f32:	46d9      	mov	r9, fp
  409f34:	db33      	blt.n	409f9e <_dtoa_r+0x96>
  409f36:	2300      	movs	r3, #0
  409f38:	602b      	str	r3, [r5, #0]
  409f3a:	4ba5      	ldr	r3, [pc, #660]	; (40a1d0 <_dtoa_r+0x2c8>)
  409f3c:	461a      	mov	r2, r3
  409f3e:	ea09 0303 	and.w	r3, r9, r3
  409f42:	4293      	cmp	r3, r2
  409f44:	d014      	beq.n	409f70 <_dtoa_r+0x68>
  409f46:	4650      	mov	r0, sl
  409f48:	4659      	mov	r1, fp
  409f4a:	2200      	movs	r2, #0
  409f4c:	2300      	movs	r3, #0
  409f4e:	f002 fc33 	bl	40c7b8 <__aeabi_dcmpeq>
  409f52:	4680      	mov	r8, r0
  409f54:	b348      	cbz	r0, 409faa <_dtoa_r+0xa2>
  409f56:	9e26      	ldr	r6, [sp, #152]	; 0x98
  409f58:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  409f5a:	2301      	movs	r3, #1
  409f5c:	6033      	str	r3, [r6, #0]
  409f5e:	2d00      	cmp	r5, #0
  409f60:	f000 80c9 	beq.w	40a0f6 <_dtoa_r+0x1ee>
  409f64:	489b      	ldr	r0, [pc, #620]	; (40a1d4 <_dtoa_r+0x2cc>)
  409f66:	6028      	str	r0, [r5, #0]
  409f68:	3801      	subs	r0, #1
  409f6a:	b01b      	add	sp, #108	; 0x6c
  409f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f70:	9d26      	ldr	r5, [sp, #152]	; 0x98
  409f72:	f242 730f 	movw	r3, #9999	; 0x270f
  409f76:	602b      	str	r3, [r5, #0]
  409f78:	f1ba 0f00 	cmp.w	sl, #0
  409f7c:	f000 80a4 	beq.w	40a0c8 <_dtoa_r+0x1c0>
  409f80:	4895      	ldr	r0, [pc, #596]	; (40a1d8 <_dtoa_r+0x2d0>)
  409f82:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  409f84:	2e00      	cmp	r6, #0
  409f86:	d0f0      	beq.n	409f6a <_dtoa_r+0x62>
  409f88:	78c3      	ldrb	r3, [r0, #3]
  409f8a:	2b00      	cmp	r3, #0
  409f8c:	f000 80b5 	beq.w	40a0fa <_dtoa_r+0x1f2>
  409f90:	f100 0308 	add.w	r3, r0, #8
  409f94:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  409f96:	602b      	str	r3, [r5, #0]
  409f98:	b01b      	add	sp, #108	; 0x6c
  409f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409f9e:	2301      	movs	r3, #1
  409fa0:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  409fa4:	602b      	str	r3, [r5, #0]
  409fa6:	46cb      	mov	fp, r9
  409fa8:	e7c7      	b.n	409f3a <_dtoa_r+0x32>
  409faa:	aa19      	add	r2, sp, #100	; 0x64
  409fac:	ab18      	add	r3, sp, #96	; 0x60
  409fae:	e88d 000c 	stmia.w	sp, {r2, r3}
  409fb2:	4620      	mov	r0, r4
  409fb4:	4652      	mov	r2, sl
  409fb6:	465b      	mov	r3, fp
  409fb8:	f001 fe54 	bl	40bc64 <__d2b>
  409fbc:	ea5f 5519 	movs.w	r5, r9, lsr #20
  409fc0:	900a      	str	r0, [sp, #40]	; 0x28
  409fc2:	f040 808a 	bne.w	40a0da <_dtoa_r+0x1d2>
  409fc6:	9f18      	ldr	r7, [sp, #96]	; 0x60
  409fc8:	9d19      	ldr	r5, [sp, #100]	; 0x64
  409fca:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  409fce:	443d      	add	r5, r7
  409fd0:	429d      	cmp	r5, r3
  409fd2:	f2c0 8294 	blt.w	40a4fe <_dtoa_r+0x5f6>
  409fd6:	331f      	adds	r3, #31
  409fd8:	f205 4212 	addw	r2, r5, #1042	; 0x412
  409fdc:	1b5b      	subs	r3, r3, r5
  409fde:	fa09 f303 	lsl.w	r3, r9, r3
  409fe2:	fa2a f202 	lsr.w	r2, sl, r2
  409fe6:	ea43 0002 	orr.w	r0, r3, r2
  409fea:	f002 f907 	bl	40c1fc <__aeabi_ui2d>
  409fee:	2601      	movs	r6, #1
  409ff0:	3d01      	subs	r5, #1
  409ff2:	46b8      	mov	r8, r7
  409ff4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  409ff8:	9616      	str	r6, [sp, #88]	; 0x58
  409ffa:	2200      	movs	r2, #0
  409ffc:	4b77      	ldr	r3, [pc, #476]	; (40a1dc <_dtoa_r+0x2d4>)
  409ffe:	f001 ffbf 	bl	40bf80 <__aeabi_dsub>
  40a002:	a36d      	add	r3, pc, #436	; (adr r3, 40a1b8 <_dtoa_r+0x2b0>)
  40a004:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a008:	f002 f96e 	bl	40c2e8 <__aeabi_dmul>
  40a00c:	a36c      	add	r3, pc, #432	; (adr r3, 40a1c0 <_dtoa_r+0x2b8>)
  40a00e:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a012:	f001 ffb7 	bl	40bf84 <__adddf3>
  40a016:	4606      	mov	r6, r0
  40a018:	4628      	mov	r0, r5
  40a01a:	460f      	mov	r7, r1
  40a01c:	f002 f8fe 	bl	40c21c <__aeabi_i2d>
  40a020:	a369      	add	r3, pc, #420	; (adr r3, 40a1c8 <_dtoa_r+0x2c0>)
  40a022:	e9d3 2300 	ldrd	r2, r3, [r3]
  40a026:	f002 f95f 	bl	40c2e8 <__aeabi_dmul>
  40a02a:	4602      	mov	r2, r0
  40a02c:	460b      	mov	r3, r1
  40a02e:	4630      	mov	r0, r6
  40a030:	4639      	mov	r1, r7
  40a032:	f001 ffa7 	bl	40bf84 <__adddf3>
  40a036:	4606      	mov	r6, r0
  40a038:	460f      	mov	r7, r1
  40a03a:	f002 fbef 	bl	40c81c <__aeabi_d2iz>
  40a03e:	4639      	mov	r1, r7
  40a040:	9007      	str	r0, [sp, #28]
  40a042:	2200      	movs	r2, #0
  40a044:	4630      	mov	r0, r6
  40a046:	2300      	movs	r3, #0
  40a048:	f002 fbc0 	bl	40c7cc <__aeabi_dcmplt>
  40a04c:	2800      	cmp	r0, #0
  40a04e:	f040 8228 	bne.w	40a4a2 <_dtoa_r+0x59a>
  40a052:	9e07      	ldr	r6, [sp, #28]
  40a054:	2e16      	cmp	r6, #22
  40a056:	f200 8221 	bhi.w	40a49c <_dtoa_r+0x594>
  40a05a:	4b61      	ldr	r3, [pc, #388]	; (40a1e0 <_dtoa_r+0x2d8>)
  40a05c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a060:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a064:	4652      	mov	r2, sl
  40a066:	465b      	mov	r3, fp
  40a068:	f002 fbce 	bl	40c808 <__aeabi_dcmpgt>
  40a06c:	2800      	cmp	r0, #0
  40a06e:	f000 824b 	beq.w	40a508 <_dtoa_r+0x600>
  40a072:	3e01      	subs	r6, #1
  40a074:	9607      	str	r6, [sp, #28]
  40a076:	2600      	movs	r6, #0
  40a078:	960e      	str	r6, [sp, #56]	; 0x38
  40a07a:	ebc5 0508 	rsb	r5, r5, r8
  40a07e:	3d01      	subs	r5, #1
  40a080:	9506      	str	r5, [sp, #24]
  40a082:	f100 8225 	bmi.w	40a4d0 <_dtoa_r+0x5c8>
  40a086:	2500      	movs	r5, #0
  40a088:	9508      	str	r5, [sp, #32]
  40a08a:	9e07      	ldr	r6, [sp, #28]
  40a08c:	2e00      	cmp	r6, #0
  40a08e:	f2c0 8216 	blt.w	40a4be <_dtoa_r+0x5b6>
  40a092:	9d06      	ldr	r5, [sp, #24]
  40a094:	960d      	str	r6, [sp, #52]	; 0x34
  40a096:	4435      	add	r5, r6
  40a098:	2600      	movs	r6, #0
  40a09a:	9506      	str	r5, [sp, #24]
  40a09c:	960c      	str	r6, [sp, #48]	; 0x30
  40a09e:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40a0a0:	2d09      	cmp	r5, #9
  40a0a2:	d82c      	bhi.n	40a0fe <_dtoa_r+0x1f6>
  40a0a4:	2d05      	cmp	r5, #5
  40a0a6:	bfc4      	itt	gt
  40a0a8:	3d04      	subgt	r5, #4
  40a0aa:	9524      	strgt	r5, [sp, #144]	; 0x90
  40a0ac:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a0ae:	f1a6 0302 	sub.w	r3, r6, #2
  40a0b2:	bfcc      	ite	gt
  40a0b4:	2500      	movgt	r5, #0
  40a0b6:	2501      	movle	r5, #1
  40a0b8:	2b03      	cmp	r3, #3
  40a0ba:	d822      	bhi.n	40a102 <_dtoa_r+0x1fa>
  40a0bc:	e8df f013 	tbh	[pc, r3, lsl #1]
  40a0c0:	029e03b7 	.word	0x029e03b7
  40a0c4:	049a03c0 	.word	0x049a03c0
  40a0c8:	4a46      	ldr	r2, [pc, #280]	; (40a1e4 <_dtoa_r+0x2dc>)
  40a0ca:	4b43      	ldr	r3, [pc, #268]	; (40a1d8 <_dtoa_r+0x2d0>)
  40a0cc:	f3c9 0013 	ubfx	r0, r9, #0, #20
  40a0d0:	2800      	cmp	r0, #0
  40a0d2:	bf0c      	ite	eq
  40a0d4:	4610      	moveq	r0, r2
  40a0d6:	4618      	movne	r0, r3
  40a0d8:	e753      	b.n	409f82 <_dtoa_r+0x7a>
  40a0da:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a0de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40a0e2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  40a0e6:	4650      	mov	r0, sl
  40a0e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  40a0ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40a0f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  40a0f4:	e781      	b.n	409ffa <_dtoa_r+0xf2>
  40a0f6:	483c      	ldr	r0, [pc, #240]	; (40a1e8 <_dtoa_r+0x2e0>)
  40a0f8:	e737      	b.n	409f6a <_dtoa_r+0x62>
  40a0fa:	1cc3      	adds	r3, r0, #3
  40a0fc:	e74a      	b.n	409f94 <_dtoa_r+0x8c>
  40a0fe:	2500      	movs	r5, #0
  40a100:	9524      	str	r5, [sp, #144]	; 0x90
  40a102:	2500      	movs	r5, #0
  40a104:	6465      	str	r5, [r4, #68]	; 0x44
  40a106:	4629      	mov	r1, r5
  40a108:	4620      	mov	r0, r4
  40a10a:	f001 fa39 	bl	40b580 <_Balloc>
  40a10e:	f04f 39ff 	mov.w	r9, #4294967295
  40a112:	2601      	movs	r6, #1
  40a114:	9009      	str	r0, [sp, #36]	; 0x24
  40a116:	9525      	str	r5, [sp, #148]	; 0x94
  40a118:	6420      	str	r0, [r4, #64]	; 0x40
  40a11a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40a11e:	960b      	str	r6, [sp, #44]	; 0x2c
  40a120:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40a122:	2b00      	cmp	r3, #0
  40a124:	f2c0 80d2 	blt.w	40a2cc <_dtoa_r+0x3c4>
  40a128:	9e07      	ldr	r6, [sp, #28]
  40a12a:	2e0e      	cmp	r6, #14
  40a12c:	f300 80ce 	bgt.w	40a2cc <_dtoa_r+0x3c4>
  40a130:	4b2b      	ldr	r3, [pc, #172]	; (40a1e0 <_dtoa_r+0x2d8>)
  40a132:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40a136:	e9d3 0100 	ldrd	r0, r1, [r3]
  40a13a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40a13e:	9925      	ldr	r1, [sp, #148]	; 0x94
  40a140:	2900      	cmp	r1, #0
  40a142:	f2c0 8380 	blt.w	40a846 <_dtoa_r+0x93e>
  40a146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40a14a:	4659      	mov	r1, fp
  40a14c:	4650      	mov	r0, sl
  40a14e:	f002 f9f5 	bl	40c53c <__aeabi_ddiv>
  40a152:	f002 fb63 	bl	40c81c <__aeabi_d2iz>
  40a156:	4605      	mov	r5, r0
  40a158:	f002 f860 	bl	40c21c <__aeabi_i2d>
  40a15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40a160:	f002 f8c2 	bl	40c2e8 <__aeabi_dmul>
  40a164:	4602      	mov	r2, r0
  40a166:	460b      	mov	r3, r1
  40a168:	4650      	mov	r0, sl
  40a16a:	4659      	mov	r1, fp
  40a16c:	f001 ff08 	bl	40bf80 <__aeabi_dsub>
  40a170:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a172:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40a176:	f1b9 0f01 	cmp.w	r9, #1
  40a17a:	4606      	mov	r6, r0
  40a17c:	460f      	mov	r7, r1
  40a17e:	7013      	strb	r3, [r2, #0]
  40a180:	f102 0b01 	add.w	fp, r2, #1
  40a184:	d064      	beq.n	40a250 <_dtoa_r+0x348>
  40a186:	2200      	movs	r2, #0
  40a188:	4b18      	ldr	r3, [pc, #96]	; (40a1ec <_dtoa_r+0x2e4>)
  40a18a:	f002 f8ad 	bl	40c2e8 <__aeabi_dmul>
  40a18e:	2200      	movs	r2, #0
  40a190:	2300      	movs	r3, #0
  40a192:	4606      	mov	r6, r0
  40a194:	460f      	mov	r7, r1
  40a196:	f002 fb0f 	bl	40c7b8 <__aeabi_dcmpeq>
  40a19a:	2800      	cmp	r0, #0
  40a19c:	f040 8081 	bne.w	40a2a2 <_dtoa_r+0x39a>
  40a1a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  40a1a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a1a6:	9403      	str	r4, [sp, #12]
  40a1a8:	44c8      	add	r8, r9
  40a1aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40a1ae:	f105 0902 	add.w	r9, r5, #2
  40a1b2:	e028      	b.n	40a206 <_dtoa_r+0x2fe>
  40a1b4:	f3af 8000 	nop.w
  40a1b8:	636f4361 	.word	0x636f4361
  40a1bc:	3fd287a7 	.word	0x3fd287a7
  40a1c0:	8b60c8b3 	.word	0x8b60c8b3
  40a1c4:	3fc68a28 	.word	0x3fc68a28
  40a1c8:	509f79fb 	.word	0x509f79fb
  40a1cc:	3fd34413 	.word	0x3fd34413
  40a1d0:	7ff00000 	.word	0x7ff00000
  40a1d4:	0040d2e1 	.word	0x0040d2e1
  40a1d8:	0040d300 	.word	0x0040d300
  40a1dc:	3ff80000 	.word	0x3ff80000
  40a1e0:	0040d408 	.word	0x0040d408
  40a1e4:	0040d2f4 	.word	0x0040d2f4
  40a1e8:	0040d2e0 	.word	0x0040d2e0
  40a1ec:	40240000 	.word	0x40240000
  40a1f0:	f002 f87a 	bl	40c2e8 <__aeabi_dmul>
  40a1f4:	2200      	movs	r2, #0
  40a1f6:	2300      	movs	r3, #0
  40a1f8:	4606      	mov	r6, r0
  40a1fa:	460f      	mov	r7, r1
  40a1fc:	f002 fadc 	bl	40c7b8 <__aeabi_dcmpeq>
  40a200:	2800      	cmp	r0, #0
  40a202:	f040 83c1 	bne.w	40a988 <_dtoa_r+0xa80>
  40a206:	4652      	mov	r2, sl
  40a208:	465b      	mov	r3, fp
  40a20a:	4630      	mov	r0, r6
  40a20c:	4639      	mov	r1, r7
  40a20e:	f002 f995 	bl	40c53c <__aeabi_ddiv>
  40a212:	f002 fb03 	bl	40c81c <__aeabi_d2iz>
  40a216:	4605      	mov	r5, r0
  40a218:	f002 f800 	bl	40c21c <__aeabi_i2d>
  40a21c:	4652      	mov	r2, sl
  40a21e:	465b      	mov	r3, fp
  40a220:	f002 f862 	bl	40c2e8 <__aeabi_dmul>
  40a224:	4602      	mov	r2, r0
  40a226:	460b      	mov	r3, r1
  40a228:	4630      	mov	r0, r6
  40a22a:	4639      	mov	r1, r7
  40a22c:	f001 fea8 	bl	40bf80 <__aeabi_dsub>
  40a230:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  40a234:	45c1      	cmp	r9, r8
  40a236:	f809 ec01 	strb.w	lr, [r9, #-1]
  40a23a:	464c      	mov	r4, r9
  40a23c:	4606      	mov	r6, r0
  40a23e:	460f      	mov	r7, r1
  40a240:	f04f 0200 	mov.w	r2, #0
  40a244:	4ba7      	ldr	r3, [pc, #668]	; (40a4e4 <_dtoa_r+0x5dc>)
  40a246:	f109 0901 	add.w	r9, r9, #1
  40a24a:	d1d1      	bne.n	40a1f0 <_dtoa_r+0x2e8>
  40a24c:	46a3      	mov	fp, r4
  40a24e:	9c03      	ldr	r4, [sp, #12]
  40a250:	4632      	mov	r2, r6
  40a252:	463b      	mov	r3, r7
  40a254:	4630      	mov	r0, r6
  40a256:	4639      	mov	r1, r7
  40a258:	f001 fe94 	bl	40bf84 <__adddf3>
  40a25c:	4606      	mov	r6, r0
  40a25e:	460f      	mov	r7, r1
  40a260:	4632      	mov	r2, r6
  40a262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a266:	463b      	mov	r3, r7
  40a268:	f002 fab0 	bl	40c7cc <__aeabi_dcmplt>
  40a26c:	b940      	cbnz	r0, 40a280 <_dtoa_r+0x378>
  40a26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a272:	4632      	mov	r2, r6
  40a274:	463b      	mov	r3, r7
  40a276:	f002 fa9f 	bl	40c7b8 <__aeabi_dcmpeq>
  40a27a:	b190      	cbz	r0, 40a2a2 <_dtoa_r+0x39a>
  40a27c:	07eb      	lsls	r3, r5, #31
  40a27e:	d510      	bpl.n	40a2a2 <_dtoa_r+0x39a>
  40a280:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40a284:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40a286:	e005      	b.n	40a294 <_dtoa_r+0x38c>
  40a288:	429a      	cmp	r2, r3
  40a28a:	f000 8428 	beq.w	40aade <_dtoa_r+0xbd6>
  40a28e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  40a292:	469b      	mov	fp, r3
  40a294:	2d39      	cmp	r5, #57	; 0x39
  40a296:	f10b 33ff 	add.w	r3, fp, #4294967295
  40a29a:	d0f5      	beq.n	40a288 <_dtoa_r+0x380>
  40a29c:	1c6a      	adds	r2, r5, #1
  40a29e:	b2d2      	uxtb	r2, r2
  40a2a0:	701a      	strb	r2, [r3, #0]
  40a2a2:	4620      	mov	r0, r4
  40a2a4:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a2a6:	f001 f991 	bl	40b5cc <_Bfree>
  40a2aa:	9e07      	ldr	r6, [sp, #28]
  40a2ac:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40a2ae:	1c73      	adds	r3, r6, #1
  40a2b0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  40a2b2:	2200      	movs	r2, #0
  40a2b4:	f88b 2000 	strb.w	r2, [fp]
  40a2b8:	602b      	str	r3, [r5, #0]
  40a2ba:	2e00      	cmp	r6, #0
  40a2bc:	f000 8325 	beq.w	40a90a <_dtoa_r+0xa02>
  40a2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a2c2:	f8c6 b000 	str.w	fp, [r6]
  40a2c6:	b01b      	add	sp, #108	; 0x6c
  40a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a2cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a2ce:	2d00      	cmp	r5, #0
  40a2d0:	f000 8103 	beq.w	40a4da <_dtoa_r+0x5d2>
  40a2d4:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40a2d6:	2e01      	cmp	r6, #1
  40a2d8:	f340 82dc 	ble.w	40a894 <_dtoa_r+0x98c>
  40a2dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40a2de:	f109 37ff 	add.w	r7, r9, #4294967295
  40a2e2:	42be      	cmp	r6, r7
  40a2e4:	f2c0 8389 	blt.w	40a9fa <_dtoa_r+0xaf2>
  40a2e8:	1bf7      	subs	r7, r6, r7
  40a2ea:	f1b9 0f00 	cmp.w	r9, #0
  40a2ee:	f2c0 8486 	blt.w	40abfe <_dtoa_r+0xcf6>
  40a2f2:	9d08      	ldr	r5, [sp, #32]
  40a2f4:	464b      	mov	r3, r9
  40a2f6:	9e08      	ldr	r6, [sp, #32]
  40a2f8:	441e      	add	r6, r3
  40a2fa:	9608      	str	r6, [sp, #32]
  40a2fc:	9e06      	ldr	r6, [sp, #24]
  40a2fe:	4620      	mov	r0, r4
  40a300:	441e      	add	r6, r3
  40a302:	2101      	movs	r1, #1
  40a304:	9606      	str	r6, [sp, #24]
  40a306:	f001 fa51 	bl	40b7ac <__i2b>
  40a30a:	4606      	mov	r6, r0
  40a30c:	b165      	cbz	r5, 40a328 <_dtoa_r+0x420>
  40a30e:	9806      	ldr	r0, [sp, #24]
  40a310:	2800      	cmp	r0, #0
  40a312:	dd09      	ble.n	40a328 <_dtoa_r+0x420>
  40a314:	4603      	mov	r3, r0
  40a316:	9908      	ldr	r1, [sp, #32]
  40a318:	42ab      	cmp	r3, r5
  40a31a:	bfa8      	it	ge
  40a31c:	462b      	movge	r3, r5
  40a31e:	1ac9      	subs	r1, r1, r3
  40a320:	1ac0      	subs	r0, r0, r3
  40a322:	9108      	str	r1, [sp, #32]
  40a324:	1aed      	subs	r5, r5, r3
  40a326:	9006      	str	r0, [sp, #24]
  40a328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a32a:	2a00      	cmp	r2, #0
  40a32c:	dd1d      	ble.n	40a36a <_dtoa_r+0x462>
  40a32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40a330:	2b00      	cmp	r3, #0
  40a332:	f000 8358 	beq.w	40a9e6 <_dtoa_r+0xade>
  40a336:	2f00      	cmp	r7, #0
  40a338:	dd11      	ble.n	40a35e <_dtoa_r+0x456>
  40a33a:	4631      	mov	r1, r6
  40a33c:	463a      	mov	r2, r7
  40a33e:	4620      	mov	r0, r4
  40a340:	f001 fadc 	bl	40b8fc <__pow5mult>
  40a344:	4606      	mov	r6, r0
  40a346:	4631      	mov	r1, r6
  40a348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40a34a:	4620      	mov	r0, r4
  40a34c:	f001 fa38 	bl	40b7c0 <__multiply>
  40a350:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a352:	4680      	mov	r8, r0
  40a354:	4620      	mov	r0, r4
  40a356:	f001 f939 	bl	40b5cc <_Bfree>
  40a35a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  40a35e:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  40a362:	ebbe 0207 	subs.w	r2, lr, r7
  40a366:	f040 828f 	bne.w	40a888 <_dtoa_r+0x980>
  40a36a:	4620      	mov	r0, r4
  40a36c:	2101      	movs	r1, #1
  40a36e:	f001 fa1d 	bl	40b7ac <__i2b>
  40a372:	4680      	mov	r8, r0
  40a374:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a376:	2800      	cmp	r0, #0
  40a378:	dd05      	ble.n	40a386 <_dtoa_r+0x47e>
  40a37a:	4641      	mov	r1, r8
  40a37c:	4620      	mov	r0, r4
  40a37e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40a380:	f001 fabc 	bl	40b8fc <__pow5mult>
  40a384:	4680      	mov	r8, r0
  40a386:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a388:	2901      	cmp	r1, #1
  40a38a:	f340 82c1 	ble.w	40a910 <_dtoa_r+0xa08>
  40a38e:	2700      	movs	r7, #0
  40a390:	980d      	ldr	r0, [sp, #52]	; 0x34
  40a392:	2800      	cmp	r0, #0
  40a394:	f040 82af 	bne.w	40a8f6 <_dtoa_r+0x9ee>
  40a398:	2001      	movs	r0, #1
  40a39a:	9b06      	ldr	r3, [sp, #24]
  40a39c:	4403      	add	r3, r0
  40a39e:	f013 031f 	ands.w	r3, r3, #31
  40a3a2:	f000 80a1 	beq.w	40a4e8 <_dtoa_r+0x5e0>
  40a3a6:	f1c3 0220 	rsb	r2, r3, #32
  40a3aa:	2a04      	cmp	r2, #4
  40a3ac:	f340 84b5 	ble.w	40ad1a <_dtoa_r+0xe12>
  40a3b0:	9908      	ldr	r1, [sp, #32]
  40a3b2:	9a06      	ldr	r2, [sp, #24]
  40a3b4:	f1c3 031c 	rsb	r3, r3, #28
  40a3b8:	4419      	add	r1, r3
  40a3ba:	441a      	add	r2, r3
  40a3bc:	9108      	str	r1, [sp, #32]
  40a3be:	441d      	add	r5, r3
  40a3c0:	9206      	str	r2, [sp, #24]
  40a3c2:	9908      	ldr	r1, [sp, #32]
  40a3c4:	2900      	cmp	r1, #0
  40a3c6:	dd05      	ble.n	40a3d4 <_dtoa_r+0x4cc>
  40a3c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a3ca:	9a08      	ldr	r2, [sp, #32]
  40a3cc:	4620      	mov	r0, r4
  40a3ce:	f001 fae3 	bl	40b998 <__lshift>
  40a3d2:	900a      	str	r0, [sp, #40]	; 0x28
  40a3d4:	9a06      	ldr	r2, [sp, #24]
  40a3d6:	2a00      	cmp	r2, #0
  40a3d8:	dd04      	ble.n	40a3e4 <_dtoa_r+0x4dc>
  40a3da:	4641      	mov	r1, r8
  40a3dc:	4620      	mov	r0, r4
  40a3de:	f001 fadb 	bl	40b998 <__lshift>
  40a3e2:	4680      	mov	r8, r0
  40a3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40a3e6:	2b00      	cmp	r3, #0
  40a3e8:	f040 826a 	bne.w	40a8c0 <_dtoa_r+0x9b8>
  40a3ec:	f1b9 0f00 	cmp.w	r9, #0
  40a3f0:	f340 82a6 	ble.w	40a940 <_dtoa_r+0xa38>
  40a3f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a3f6:	2800      	cmp	r0, #0
  40a3f8:	f040 8088 	bne.w	40a50c <_dtoa_r+0x604>
  40a3fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a3fe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40a400:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40a404:	e006      	b.n	40a414 <_dtoa_r+0x50c>
  40a406:	4639      	mov	r1, r7
  40a408:	4620      	mov	r0, r4
  40a40a:	220a      	movs	r2, #10
  40a40c:	2300      	movs	r3, #0
  40a40e:	f001 f8e7 	bl	40b5e0 <__multadd>
  40a412:	4607      	mov	r7, r0
  40a414:	4638      	mov	r0, r7
  40a416:	4641      	mov	r1, r8
  40a418:	f7ff fcde 	bl	409dd8 <quorem>
  40a41c:	3030      	adds	r0, #48	; 0x30
  40a41e:	f80b 0005 	strb.w	r0, [fp, r5]
  40a422:	3501      	adds	r5, #1
  40a424:	45a9      	cmp	r9, r5
  40a426:	dcee      	bgt.n	40a406 <_dtoa_r+0x4fe>
  40a428:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40a42c:	970a      	str	r7, [sp, #40]	; 0x28
  40a42e:	4682      	mov	sl, r0
  40a430:	f1b9 0f01 	cmp.w	r9, #1
  40a434:	bfac      	ite	ge
  40a436:	44cb      	addge	fp, r9
  40a438:	f10b 0b01 	addlt.w	fp, fp, #1
  40a43c:	2500      	movs	r5, #0
  40a43e:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a440:	2201      	movs	r2, #1
  40a442:	4620      	mov	r0, r4
  40a444:	f001 faa8 	bl	40b998 <__lshift>
  40a448:	4641      	mov	r1, r8
  40a44a:	900a      	str	r0, [sp, #40]	; 0x28
  40a44c:	f001 fb02 	bl	40ba54 <__mcmp>
  40a450:	2800      	cmp	r0, #0
  40a452:	f340 8309 	ble.w	40aa68 <_dtoa_r+0xb60>
  40a456:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40a45a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a45c:	e005      	b.n	40a46a <_dtoa_r+0x562>
  40a45e:	4299      	cmp	r1, r3
  40a460:	f000 828b 	beq.w	40a97a <_dtoa_r+0xa72>
  40a464:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  40a468:	469b      	mov	fp, r3
  40a46a:	2a39      	cmp	r2, #57	; 0x39
  40a46c:	f10b 33ff 	add.w	r3, fp, #4294967295
  40a470:	d0f5      	beq.n	40a45e <_dtoa_r+0x556>
  40a472:	3201      	adds	r2, #1
  40a474:	701a      	strb	r2, [r3, #0]
  40a476:	4641      	mov	r1, r8
  40a478:	4620      	mov	r0, r4
  40a47a:	f001 f8a7 	bl	40b5cc <_Bfree>
  40a47e:	2e00      	cmp	r6, #0
  40a480:	f43f af0f 	beq.w	40a2a2 <_dtoa_r+0x39a>
  40a484:	b12d      	cbz	r5, 40a492 <_dtoa_r+0x58a>
  40a486:	42b5      	cmp	r5, r6
  40a488:	d003      	beq.n	40a492 <_dtoa_r+0x58a>
  40a48a:	4629      	mov	r1, r5
  40a48c:	4620      	mov	r0, r4
  40a48e:	f001 f89d 	bl	40b5cc <_Bfree>
  40a492:	4631      	mov	r1, r6
  40a494:	4620      	mov	r0, r4
  40a496:	f001 f899 	bl	40b5cc <_Bfree>
  40a49a:	e702      	b.n	40a2a2 <_dtoa_r+0x39a>
  40a49c:	2601      	movs	r6, #1
  40a49e:	960e      	str	r6, [sp, #56]	; 0x38
  40a4a0:	e5eb      	b.n	40a07a <_dtoa_r+0x172>
  40a4a2:	9807      	ldr	r0, [sp, #28]
  40a4a4:	f001 feba 	bl	40c21c <__aeabi_i2d>
  40a4a8:	4632      	mov	r2, r6
  40a4aa:	463b      	mov	r3, r7
  40a4ac:	f002 f984 	bl	40c7b8 <__aeabi_dcmpeq>
  40a4b0:	2800      	cmp	r0, #0
  40a4b2:	f47f adce 	bne.w	40a052 <_dtoa_r+0x14a>
  40a4b6:	9e07      	ldr	r6, [sp, #28]
  40a4b8:	3e01      	subs	r6, #1
  40a4ba:	9607      	str	r6, [sp, #28]
  40a4bc:	e5c9      	b.n	40a052 <_dtoa_r+0x14a>
  40a4be:	9e07      	ldr	r6, [sp, #28]
  40a4c0:	9d08      	ldr	r5, [sp, #32]
  40a4c2:	1bad      	subs	r5, r5, r6
  40a4c4:	9508      	str	r5, [sp, #32]
  40a4c6:	4275      	negs	r5, r6
  40a4c8:	2600      	movs	r6, #0
  40a4ca:	950c      	str	r5, [sp, #48]	; 0x30
  40a4cc:	960d      	str	r6, [sp, #52]	; 0x34
  40a4ce:	e5e6      	b.n	40a09e <_dtoa_r+0x196>
  40a4d0:	426d      	negs	r5, r5
  40a4d2:	2600      	movs	r6, #0
  40a4d4:	9508      	str	r5, [sp, #32]
  40a4d6:	9606      	str	r6, [sp, #24]
  40a4d8:	e5d7      	b.n	40a08a <_dtoa_r+0x182>
  40a4da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a4dc:	9d08      	ldr	r5, [sp, #32]
  40a4de:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40a4e0:	e714      	b.n	40a30c <_dtoa_r+0x404>
  40a4e2:	bf00      	nop
  40a4e4:	40240000 	.word	0x40240000
  40a4e8:	231c      	movs	r3, #28
  40a4ea:	f8dd e020 	ldr.w	lr, [sp, #32]
  40a4ee:	9806      	ldr	r0, [sp, #24]
  40a4f0:	449e      	add	lr, r3
  40a4f2:	4418      	add	r0, r3
  40a4f4:	f8cd e020 	str.w	lr, [sp, #32]
  40a4f8:	441d      	add	r5, r3
  40a4fa:	9006      	str	r0, [sp, #24]
  40a4fc:	e761      	b.n	40a3c2 <_dtoa_r+0x4ba>
  40a4fe:	48a7      	ldr	r0, [pc, #668]	; (40a79c <_dtoa_r+0x894>)
  40a500:	1b40      	subs	r0, r0, r5
  40a502:	fa0a f000 	lsl.w	r0, sl, r0
  40a506:	e570      	b.n	409fea <_dtoa_r+0xe2>
  40a508:	900e      	str	r0, [sp, #56]	; 0x38
  40a50a:	e5b6      	b.n	40a07a <_dtoa_r+0x172>
  40a50c:	2d00      	cmp	r5, #0
  40a50e:	dd05      	ble.n	40a51c <_dtoa_r+0x614>
  40a510:	4631      	mov	r1, r6
  40a512:	462a      	mov	r2, r5
  40a514:	4620      	mov	r0, r4
  40a516:	f001 fa3f 	bl	40b998 <__lshift>
  40a51a:	4606      	mov	r6, r0
  40a51c:	2f00      	cmp	r7, #0
  40a51e:	f040 82e8 	bne.w	40aaf2 <_dtoa_r+0xbea>
  40a522:	4637      	mov	r7, r6
  40a524:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a526:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a528:	444d      	add	r5, r9
  40a52a:	9508      	str	r5, [sp, #32]
  40a52c:	f00a 0501 	and.w	r5, sl, #1
  40a530:	950b      	str	r5, [sp, #44]	; 0x2c
  40a532:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40a536:	1c45      	adds	r5, r0, #1
  40a538:	e00a      	b.n	40a550 <_dtoa_r+0x648>
  40a53a:	f001 f851 	bl	40b5e0 <__multadd>
  40a53e:	4639      	mov	r1, r7
  40a540:	4606      	mov	r6, r0
  40a542:	220a      	movs	r2, #10
  40a544:	4620      	mov	r0, r4
  40a546:	2300      	movs	r3, #0
  40a548:	f001 f84a 	bl	40b5e0 <__multadd>
  40a54c:	4607      	mov	r7, r0
  40a54e:	3501      	adds	r5, #1
  40a550:	4641      	mov	r1, r8
  40a552:	4648      	mov	r0, r9
  40a554:	f7ff fc40 	bl	409dd8 <quorem>
  40a558:	4631      	mov	r1, r6
  40a55a:	4683      	mov	fp, r0
  40a55c:	4648      	mov	r0, r9
  40a55e:	f001 fa79 	bl	40ba54 <__mcmp>
  40a562:	4641      	mov	r1, r8
  40a564:	9003      	str	r0, [sp, #12]
  40a566:	463a      	mov	r2, r7
  40a568:	4620      	mov	r0, r4
  40a56a:	f001 fa97 	bl	40ba9c <__mdiff>
  40a56e:	68c2      	ldr	r2, [r0, #12]
  40a570:	1e69      	subs	r1, r5, #1
  40a572:	4603      	mov	r3, r0
  40a574:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  40a578:	9106      	str	r1, [sp, #24]
  40a57a:	2a00      	cmp	r2, #0
  40a57c:	f040 8193 	bne.w	40a8a6 <_dtoa_r+0x99e>
  40a580:	4619      	mov	r1, r3
  40a582:	4648      	mov	r0, r9
  40a584:	9302      	str	r3, [sp, #8]
  40a586:	f001 fa65 	bl	40ba54 <__mcmp>
  40a58a:	9b02      	ldr	r3, [sp, #8]
  40a58c:	4602      	mov	r2, r0
  40a58e:	4619      	mov	r1, r3
  40a590:	4620      	mov	r0, r4
  40a592:	9202      	str	r2, [sp, #8]
  40a594:	f001 f81a 	bl	40b5cc <_Bfree>
  40a598:	9a02      	ldr	r2, [sp, #8]
  40a59a:	b92a      	cbnz	r2, 40a5a8 <_dtoa_r+0x6a0>
  40a59c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40a59e:	b91b      	cbnz	r3, 40a5a8 <_dtoa_r+0x6a0>
  40a5a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a5a2:	2800      	cmp	r0, #0
  40a5a4:	f000 8391 	beq.w	40acca <_dtoa_r+0xdc2>
  40a5a8:	9b03      	ldr	r3, [sp, #12]
  40a5aa:	2b00      	cmp	r3, #0
  40a5ac:	f2c0 8234 	blt.w	40aa18 <_dtoa_r+0xb10>
  40a5b0:	d105      	bne.n	40a5be <_dtoa_r+0x6b6>
  40a5b2:	9824      	ldr	r0, [sp, #144]	; 0x90
  40a5b4:	b918      	cbnz	r0, 40a5be <_dtoa_r+0x6b6>
  40a5b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40a5b8:	2900      	cmp	r1, #0
  40a5ba:	f000 822d 	beq.w	40aa18 <_dtoa_r+0xb10>
  40a5be:	2a00      	cmp	r2, #0
  40a5c0:	f300 82ab 	bgt.w	40ab1a <_dtoa_r+0xc12>
  40a5c4:	f8dd e020 	ldr.w	lr, [sp, #32]
  40a5c8:	f805 ac01 	strb.w	sl, [r5, #-1]
  40a5cc:	4575      	cmp	r5, lr
  40a5ce:	46ab      	mov	fp, r5
  40a5d0:	f000 82b3 	beq.w	40ab3a <_dtoa_r+0xc32>
  40a5d4:	4649      	mov	r1, r9
  40a5d6:	220a      	movs	r2, #10
  40a5d8:	2300      	movs	r3, #0
  40a5da:	4620      	mov	r0, r4
  40a5dc:	f001 f800 	bl	40b5e0 <__multadd>
  40a5e0:	42be      	cmp	r6, r7
  40a5e2:	4681      	mov	r9, r0
  40a5e4:	4631      	mov	r1, r6
  40a5e6:	4620      	mov	r0, r4
  40a5e8:	f04f 020a 	mov.w	r2, #10
  40a5ec:	f04f 0300 	mov.w	r3, #0
  40a5f0:	d1a3      	bne.n	40a53a <_dtoa_r+0x632>
  40a5f2:	f000 fff5 	bl	40b5e0 <__multadd>
  40a5f6:	4606      	mov	r6, r0
  40a5f8:	4607      	mov	r7, r0
  40a5fa:	e7a8      	b.n	40a54e <_dtoa_r+0x646>
  40a5fc:	2600      	movs	r6, #0
  40a5fe:	960b      	str	r6, [sp, #44]	; 0x2c
  40a600:	9e07      	ldr	r6, [sp, #28]
  40a602:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  40a606:	44b6      	add	lr, r6
  40a608:	f10e 0901 	add.w	r9, lr, #1
  40a60c:	f1b9 0f00 	cmp.w	r9, #0
  40a610:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  40a614:	464e      	mov	r6, r9
  40a616:	f340 8150 	ble.w	40a8ba <_dtoa_r+0x9b2>
  40a61a:	2100      	movs	r1, #0
  40a61c:	2e17      	cmp	r6, #23
  40a61e:	6461      	str	r1, [r4, #68]	; 0x44
  40a620:	d90a      	bls.n	40a638 <_dtoa_r+0x730>
  40a622:	2201      	movs	r2, #1
  40a624:	2304      	movs	r3, #4
  40a626:	005b      	lsls	r3, r3, #1
  40a628:	f103 0014 	add.w	r0, r3, #20
  40a62c:	42b0      	cmp	r0, r6
  40a62e:	4611      	mov	r1, r2
  40a630:	f102 0201 	add.w	r2, r2, #1
  40a634:	d9f7      	bls.n	40a626 <_dtoa_r+0x71e>
  40a636:	6461      	str	r1, [r4, #68]	; 0x44
  40a638:	4620      	mov	r0, r4
  40a63a:	f000 ffa1 	bl	40b580 <_Balloc>
  40a63e:	2e0e      	cmp	r6, #14
  40a640:	9009      	str	r0, [sp, #36]	; 0x24
  40a642:	6420      	str	r0, [r4, #64]	; 0x40
  40a644:	f63f ad6c 	bhi.w	40a120 <_dtoa_r+0x218>
  40a648:	2d00      	cmp	r5, #0
  40a64a:	f43f ad69 	beq.w	40a120 <_dtoa_r+0x218>
  40a64e:	9d07      	ldr	r5, [sp, #28]
  40a650:	2d00      	cmp	r5, #0
  40a652:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  40a656:	f340 821b 	ble.w	40aa90 <_dtoa_r+0xb88>
  40a65a:	4b51      	ldr	r3, [pc, #324]	; (40a7a0 <_dtoa_r+0x898>)
  40a65c:	f005 020f 	and.w	r2, r5, #15
  40a660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40a664:	112d      	asrs	r5, r5, #4
  40a666:	e9d3 6700 	ldrd	r6, r7, [r3]
  40a66a:	06eb      	lsls	r3, r5, #27
  40a66c:	f140 81cd 	bpl.w	40aa0a <_dtoa_r+0xb02>
  40a670:	4b4c      	ldr	r3, [pc, #304]	; (40a7a4 <_dtoa_r+0x89c>)
  40a672:	4650      	mov	r0, sl
  40a674:	4659      	mov	r1, fp
  40a676:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40a67a:	f001 ff5f 	bl	40c53c <__aeabi_ddiv>
  40a67e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40a682:	f005 050f 	and.w	r5, r5, #15
  40a686:	f04f 0803 	mov.w	r8, #3
  40a68a:	b18d      	cbz	r5, 40a6b0 <_dtoa_r+0x7a8>
  40a68c:	f8df a114 	ldr.w	sl, [pc, #276]	; 40a7a4 <_dtoa_r+0x89c>
  40a690:	4630      	mov	r0, r6
  40a692:	4639      	mov	r1, r7
  40a694:	07ee      	lsls	r6, r5, #31
  40a696:	d505      	bpl.n	40a6a4 <_dtoa_r+0x79c>
  40a698:	e9da 2300 	ldrd	r2, r3, [sl]
  40a69c:	f108 0801 	add.w	r8, r8, #1
  40a6a0:	f001 fe22 	bl	40c2e8 <__aeabi_dmul>
  40a6a4:	106d      	asrs	r5, r5, #1
  40a6a6:	f10a 0a08 	add.w	sl, sl, #8
  40a6aa:	d1f3      	bne.n	40a694 <_dtoa_r+0x78c>
  40a6ac:	4606      	mov	r6, r0
  40a6ae:	460f      	mov	r7, r1
  40a6b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a6b4:	4632      	mov	r2, r6
  40a6b6:	463b      	mov	r3, r7
  40a6b8:	f001 ff40 	bl	40c53c <__aeabi_ddiv>
  40a6bc:	4682      	mov	sl, r0
  40a6be:	468b      	mov	fp, r1
  40a6c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40a6c2:	b145      	cbz	r5, 40a6d6 <_dtoa_r+0x7ce>
  40a6c4:	4650      	mov	r0, sl
  40a6c6:	4659      	mov	r1, fp
  40a6c8:	2200      	movs	r2, #0
  40a6ca:	4b37      	ldr	r3, [pc, #220]	; (40a7a8 <_dtoa_r+0x8a0>)
  40a6cc:	f002 f87e 	bl	40c7cc <__aeabi_dcmplt>
  40a6d0:	2800      	cmp	r0, #0
  40a6d2:	f040 82a9 	bne.w	40ac28 <_dtoa_r+0xd20>
  40a6d6:	4640      	mov	r0, r8
  40a6d8:	f001 fda0 	bl	40c21c <__aeabi_i2d>
  40a6dc:	4652      	mov	r2, sl
  40a6de:	465b      	mov	r3, fp
  40a6e0:	f001 fe02 	bl	40c2e8 <__aeabi_dmul>
  40a6e4:	2200      	movs	r2, #0
  40a6e6:	4b31      	ldr	r3, [pc, #196]	; (40a7ac <_dtoa_r+0x8a4>)
  40a6e8:	f001 fc4c 	bl	40bf84 <__adddf3>
  40a6ec:	4606      	mov	r6, r0
  40a6ee:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40a6f2:	f1b9 0f00 	cmp.w	r9, #0
  40a6f6:	f000 815a 	beq.w	40a9ae <_dtoa_r+0xaa6>
  40a6fa:	9d07      	ldr	r5, [sp, #28]
  40a6fc:	9517      	str	r5, [sp, #92]	; 0x5c
  40a6fe:	46c8      	mov	r8, r9
  40a700:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40a702:	2d00      	cmp	r5, #0
  40a704:	f000 8222 	beq.w	40ab4c <_dtoa_r+0xc44>
  40a708:	4b25      	ldr	r3, [pc, #148]	; (40a7a0 <_dtoa_r+0x898>)
  40a70a:	4929      	ldr	r1, [pc, #164]	; (40a7b0 <_dtoa_r+0x8a8>)
  40a70c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  40a710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40a714:	2000      	movs	r0, #0
  40a716:	f001 ff11 	bl	40c53c <__aeabi_ddiv>
  40a71a:	4632      	mov	r2, r6
  40a71c:	463b      	mov	r3, r7
  40a71e:	f001 fc2f 	bl	40bf80 <__aeabi_dsub>
  40a722:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40a726:	4659      	mov	r1, fp
  40a728:	4650      	mov	r0, sl
  40a72a:	f002 f877 	bl	40c81c <__aeabi_d2iz>
  40a72e:	4605      	mov	r5, r0
  40a730:	f001 fd74 	bl	40c21c <__aeabi_i2d>
  40a734:	4602      	mov	r2, r0
  40a736:	460b      	mov	r3, r1
  40a738:	4650      	mov	r0, sl
  40a73a:	4659      	mov	r1, fp
  40a73c:	f001 fc20 	bl	40bf80 <__aeabi_dsub>
  40a740:	3530      	adds	r5, #48	; 0x30
  40a742:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40a744:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40a748:	b2ed      	uxtb	r5, r5
  40a74a:	7035      	strb	r5, [r6, #0]
  40a74c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40a754:	f106 0b01 	add.w	fp, r6, #1
  40a758:	f002 f856 	bl	40c808 <__aeabi_dcmpgt>
  40a75c:	2800      	cmp	r0, #0
  40a75e:	f040 82a9 	bne.w	40acb4 <_dtoa_r+0xdac>
  40a762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  40a766:	2000      	movs	r0, #0
  40a768:	490f      	ldr	r1, [pc, #60]	; (40a7a8 <_dtoa_r+0x8a0>)
  40a76a:	f001 fc09 	bl	40bf80 <__aeabi_dsub>
  40a76e:	4602      	mov	r2, r0
  40a770:	460b      	mov	r3, r1
  40a772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40a776:	f002 f847 	bl	40c808 <__aeabi_dcmpgt>
  40a77a:	2800      	cmp	r0, #0
  40a77c:	f040 82a0 	bne.w	40acc0 <_dtoa_r+0xdb8>
  40a780:	f1b8 0f01 	cmp.w	r8, #1
  40a784:	f340 8180 	ble.w	40aa88 <_dtoa_r+0xb80>
  40a788:	44b0      	add	r8, r6
  40a78a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  40a78e:	46a2      	mov	sl, r4
  40a790:	46c1      	mov	r9, r8
  40a792:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  40a796:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40a79a:	e019      	b.n	40a7d0 <_dtoa_r+0x8c8>
  40a79c:	fffffbee 	.word	0xfffffbee
  40a7a0:	0040d408 	.word	0x0040d408
  40a7a4:	0040d4d0 	.word	0x0040d4d0
  40a7a8:	3ff00000 	.word	0x3ff00000
  40a7ac:	401c0000 	.word	0x401c0000
  40a7b0:	3fe00000 	.word	0x3fe00000
  40a7b4:	2000      	movs	r0, #0
  40a7b6:	49a8      	ldr	r1, [pc, #672]	; (40aa58 <_dtoa_r+0xb50>)
  40a7b8:	f001 fbe2 	bl	40bf80 <__aeabi_dsub>
  40a7bc:	4622      	mov	r2, r4
  40a7be:	462b      	mov	r3, r5
  40a7c0:	f002 f804 	bl	40c7cc <__aeabi_dcmplt>
  40a7c4:	2800      	cmp	r0, #0
  40a7c6:	f040 8279 	bne.w	40acbc <_dtoa_r+0xdb4>
  40a7ca:	45cb      	cmp	fp, r9
  40a7cc:	f000 8159 	beq.w	40aa82 <_dtoa_r+0xb7a>
  40a7d0:	4620      	mov	r0, r4
  40a7d2:	4629      	mov	r1, r5
  40a7d4:	2200      	movs	r2, #0
  40a7d6:	4ba1      	ldr	r3, [pc, #644]	; (40aa5c <_dtoa_r+0xb54>)
  40a7d8:	f001 fd86 	bl	40c2e8 <__aeabi_dmul>
  40a7dc:	2200      	movs	r2, #0
  40a7de:	4b9f      	ldr	r3, [pc, #636]	; (40aa5c <_dtoa_r+0xb54>)
  40a7e0:	4604      	mov	r4, r0
  40a7e2:	460d      	mov	r5, r1
  40a7e4:	4630      	mov	r0, r6
  40a7e6:	4639      	mov	r1, r7
  40a7e8:	f001 fd7e 	bl	40c2e8 <__aeabi_dmul>
  40a7ec:	460f      	mov	r7, r1
  40a7ee:	4606      	mov	r6, r0
  40a7f0:	f002 f814 	bl	40c81c <__aeabi_d2iz>
  40a7f4:	4680      	mov	r8, r0
  40a7f6:	f001 fd11 	bl	40c21c <__aeabi_i2d>
  40a7fa:	4602      	mov	r2, r0
  40a7fc:	460b      	mov	r3, r1
  40a7fe:	4630      	mov	r0, r6
  40a800:	4639      	mov	r1, r7
  40a802:	f001 fbbd 	bl	40bf80 <__aeabi_dsub>
  40a806:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40a80a:	fa5f f888 	uxtb.w	r8, r8
  40a80e:	4622      	mov	r2, r4
  40a810:	462b      	mov	r3, r5
  40a812:	f80b 8b01 	strb.w	r8, [fp], #1
  40a816:	4606      	mov	r6, r0
  40a818:	460f      	mov	r7, r1
  40a81a:	f001 ffd7 	bl	40c7cc <__aeabi_dcmplt>
  40a81e:	4632      	mov	r2, r6
  40a820:	463b      	mov	r3, r7
  40a822:	2800      	cmp	r0, #0
  40a824:	d0c6      	beq.n	40a7b4 <_dtoa_r+0x8ac>
  40a826:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40a828:	9607      	str	r6, [sp, #28]
  40a82a:	4654      	mov	r4, sl
  40a82c:	e539      	b.n	40a2a2 <_dtoa_r+0x39a>
  40a82e:	2600      	movs	r6, #0
  40a830:	960b      	str	r6, [sp, #44]	; 0x2c
  40a832:	9825      	ldr	r0, [sp, #148]	; 0x94
  40a834:	2800      	cmp	r0, #0
  40a836:	dd3c      	ble.n	40a8b2 <_dtoa_r+0x9aa>
  40a838:	4606      	mov	r6, r0
  40a83a:	900f      	str	r0, [sp, #60]	; 0x3c
  40a83c:	4681      	mov	r9, r0
  40a83e:	e6ec      	b.n	40a61a <_dtoa_r+0x712>
  40a840:	2601      	movs	r6, #1
  40a842:	960b      	str	r6, [sp, #44]	; 0x2c
  40a844:	e7f5      	b.n	40a832 <_dtoa_r+0x92a>
  40a846:	f1b9 0f00 	cmp.w	r9, #0
  40a84a:	f73f ac7c 	bgt.w	40a146 <_dtoa_r+0x23e>
  40a84e:	f040 80c6 	bne.w	40a9de <_dtoa_r+0xad6>
  40a852:	2200      	movs	r2, #0
  40a854:	4b82      	ldr	r3, [pc, #520]	; (40aa60 <_dtoa_r+0xb58>)
  40a856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40a85a:	f001 fd45 	bl	40c2e8 <__aeabi_dmul>
  40a85e:	4652      	mov	r2, sl
  40a860:	465b      	mov	r3, fp
  40a862:	f001 ffc7 	bl	40c7f4 <__aeabi_dcmpge>
  40a866:	46c8      	mov	r8, r9
  40a868:	464e      	mov	r6, r9
  40a86a:	2800      	cmp	r0, #0
  40a86c:	d07c      	beq.n	40a968 <_dtoa_r+0xa60>
  40a86e:	9d25      	ldr	r5, [sp, #148]	; 0x94
  40a870:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  40a874:	43ed      	mvns	r5, r5
  40a876:	9507      	str	r5, [sp, #28]
  40a878:	4641      	mov	r1, r8
  40a87a:	4620      	mov	r0, r4
  40a87c:	f000 fea6 	bl	40b5cc <_Bfree>
  40a880:	2e00      	cmp	r6, #0
  40a882:	f47f ae06 	bne.w	40a492 <_dtoa_r+0x58a>
  40a886:	e50c      	b.n	40a2a2 <_dtoa_r+0x39a>
  40a888:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a88a:	4620      	mov	r0, r4
  40a88c:	f001 f836 	bl	40b8fc <__pow5mult>
  40a890:	900a      	str	r0, [sp, #40]	; 0x28
  40a892:	e56a      	b.n	40a36a <_dtoa_r+0x462>
  40a894:	9d16      	ldr	r5, [sp, #88]	; 0x58
  40a896:	2d00      	cmp	r5, #0
  40a898:	f000 81b7 	beq.w	40ac0a <_dtoa_r+0xd02>
  40a89c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40a8a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40a8a2:	9d08      	ldr	r5, [sp, #32]
  40a8a4:	e527      	b.n	40a2f6 <_dtoa_r+0x3ee>
  40a8a6:	4601      	mov	r1, r0
  40a8a8:	4620      	mov	r0, r4
  40a8aa:	f000 fe8f 	bl	40b5cc <_Bfree>
  40a8ae:	2201      	movs	r2, #1
  40a8b0:	e67a      	b.n	40a5a8 <_dtoa_r+0x6a0>
  40a8b2:	2601      	movs	r6, #1
  40a8b4:	9625      	str	r6, [sp, #148]	; 0x94
  40a8b6:	960f      	str	r6, [sp, #60]	; 0x3c
  40a8b8:	46b1      	mov	r9, r6
  40a8ba:	2100      	movs	r1, #0
  40a8bc:	6461      	str	r1, [r4, #68]	; 0x44
  40a8be:	e6bb      	b.n	40a638 <_dtoa_r+0x730>
  40a8c0:	980a      	ldr	r0, [sp, #40]	; 0x28
  40a8c2:	4641      	mov	r1, r8
  40a8c4:	f001 f8c6 	bl	40ba54 <__mcmp>
  40a8c8:	2800      	cmp	r0, #0
  40a8ca:	f6bf ad8f 	bge.w	40a3ec <_dtoa_r+0x4e4>
  40a8ce:	f8dd e01c 	ldr.w	lr, [sp, #28]
  40a8d2:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a8d4:	f10e 3eff 	add.w	lr, lr, #4294967295
  40a8d8:	4620      	mov	r0, r4
  40a8da:	220a      	movs	r2, #10
  40a8dc:	2300      	movs	r3, #0
  40a8de:	f8cd e01c 	str.w	lr, [sp, #28]
  40a8e2:	f000 fe7d 	bl	40b5e0 <__multadd>
  40a8e6:	900a      	str	r0, [sp, #40]	; 0x28
  40a8e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40a8ea:	2800      	cmp	r0, #0
  40a8ec:	f040 8207 	bne.w	40acfe <_dtoa_r+0xdf6>
  40a8f0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40a8f4:	e57a      	b.n	40a3ec <_dtoa_r+0x4e4>
  40a8f6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40a8fa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40a8fe:	6918      	ldr	r0, [r3, #16]
  40a900:	f000 ff06 	bl	40b710 <__hi0bits>
  40a904:	f1c0 0020 	rsb	r0, r0, #32
  40a908:	e547      	b.n	40a39a <_dtoa_r+0x492>
  40a90a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40a90c:	f7ff bb2d 	b.w	409f6a <_dtoa_r+0x62>
  40a910:	f1ba 0f00 	cmp.w	sl, #0
  40a914:	f47f ad3b 	bne.w	40a38e <_dtoa_r+0x486>
  40a918:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40a91c:	2b00      	cmp	r3, #0
  40a91e:	f040 817b 	bne.w	40ac18 <_dtoa_r+0xd10>
  40a922:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  40a926:	0d3f      	lsrs	r7, r7, #20
  40a928:	053f      	lsls	r7, r7, #20
  40a92a:	2f00      	cmp	r7, #0
  40a92c:	f43f ad30 	beq.w	40a390 <_dtoa_r+0x488>
  40a930:	9a08      	ldr	r2, [sp, #32]
  40a932:	9b06      	ldr	r3, [sp, #24]
  40a934:	3201      	adds	r2, #1
  40a936:	3301      	adds	r3, #1
  40a938:	9208      	str	r2, [sp, #32]
  40a93a:	9306      	str	r3, [sp, #24]
  40a93c:	2701      	movs	r7, #1
  40a93e:	e527      	b.n	40a390 <_dtoa_r+0x488>
  40a940:	9924      	ldr	r1, [sp, #144]	; 0x90
  40a942:	2902      	cmp	r1, #2
  40a944:	f77f ad56 	ble.w	40a3f4 <_dtoa_r+0x4ec>
  40a948:	f1b9 0f00 	cmp.w	r9, #0
  40a94c:	d18f      	bne.n	40a86e <_dtoa_r+0x966>
  40a94e:	4641      	mov	r1, r8
  40a950:	464b      	mov	r3, r9
  40a952:	2205      	movs	r2, #5
  40a954:	4620      	mov	r0, r4
  40a956:	f000 fe43 	bl	40b5e0 <__multadd>
  40a95a:	4680      	mov	r8, r0
  40a95c:	4641      	mov	r1, r8
  40a95e:	980a      	ldr	r0, [sp, #40]	; 0x28
  40a960:	f001 f878 	bl	40ba54 <__mcmp>
  40a964:	2800      	cmp	r0, #0
  40a966:	dd82      	ble.n	40a86e <_dtoa_r+0x966>
  40a968:	9d07      	ldr	r5, [sp, #28]
  40a96a:	3501      	adds	r5, #1
  40a96c:	9507      	str	r5, [sp, #28]
  40a96e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40a970:	2331      	movs	r3, #49	; 0x31
  40a972:	702b      	strb	r3, [r5, #0]
  40a974:	f105 0b01 	add.w	fp, r5, #1
  40a978:	e77e      	b.n	40a878 <_dtoa_r+0x970>
  40a97a:	9807      	ldr	r0, [sp, #28]
  40a97c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40a97e:	2331      	movs	r3, #49	; 0x31
  40a980:	3001      	adds	r0, #1
  40a982:	9007      	str	r0, [sp, #28]
  40a984:	700b      	strb	r3, [r1, #0]
  40a986:	e576      	b.n	40a476 <_dtoa_r+0x56e>
  40a988:	46a3      	mov	fp, r4
  40a98a:	9c03      	ldr	r4, [sp, #12]
  40a98c:	e489      	b.n	40a2a2 <_dtoa_r+0x39a>
  40a98e:	4640      	mov	r0, r8
  40a990:	f001 fc44 	bl	40c21c <__aeabi_i2d>
  40a994:	4602      	mov	r2, r0
  40a996:	460b      	mov	r3, r1
  40a998:	4650      	mov	r0, sl
  40a99a:	4659      	mov	r1, fp
  40a99c:	f001 fca4 	bl	40c2e8 <__aeabi_dmul>
  40a9a0:	2200      	movs	r2, #0
  40a9a2:	4b30      	ldr	r3, [pc, #192]	; (40aa64 <_dtoa_r+0xb5c>)
  40a9a4:	f001 faee 	bl	40bf84 <__adddf3>
  40a9a8:	4606      	mov	r6, r0
  40a9aa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40a9ae:	4650      	mov	r0, sl
  40a9b0:	4659      	mov	r1, fp
  40a9b2:	2200      	movs	r2, #0
  40a9b4:	4b2a      	ldr	r3, [pc, #168]	; (40aa60 <_dtoa_r+0xb58>)
  40a9b6:	f001 fae3 	bl	40bf80 <__aeabi_dsub>
  40a9ba:	4632      	mov	r2, r6
  40a9bc:	463b      	mov	r3, r7
  40a9be:	4682      	mov	sl, r0
  40a9c0:	468b      	mov	fp, r1
  40a9c2:	f001 ff21 	bl	40c808 <__aeabi_dcmpgt>
  40a9c6:	2800      	cmp	r0, #0
  40a9c8:	f040 80bc 	bne.w	40ab44 <_dtoa_r+0xc3c>
  40a9cc:	4632      	mov	r2, r6
  40a9ce:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  40a9d2:	4650      	mov	r0, sl
  40a9d4:	4659      	mov	r1, fp
  40a9d6:	f001 fef9 	bl	40c7cc <__aeabi_dcmplt>
  40a9da:	2800      	cmp	r0, #0
  40a9dc:	d054      	beq.n	40aa88 <_dtoa_r+0xb80>
  40a9de:	f04f 0800 	mov.w	r8, #0
  40a9e2:	4646      	mov	r6, r8
  40a9e4:	e743      	b.n	40a86e <_dtoa_r+0x966>
  40a9e6:	990a      	ldr	r1, [sp, #40]	; 0x28
  40a9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40a9ea:	4620      	mov	r0, r4
  40a9ec:	f000 ff86 	bl	40b8fc <__pow5mult>
  40a9f0:	900a      	str	r0, [sp, #40]	; 0x28
  40a9f2:	e4ba      	b.n	40a36a <_dtoa_r+0x462>
  40a9f4:	2601      	movs	r6, #1
  40a9f6:	960b      	str	r6, [sp, #44]	; 0x2c
  40a9f8:	e602      	b.n	40a600 <_dtoa_r+0x6f8>
  40a9fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40a9fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40a9fe:	970c      	str	r7, [sp, #48]	; 0x30
  40aa00:	1b7b      	subs	r3, r7, r5
  40aa02:	441e      	add	r6, r3
  40aa04:	960d      	str	r6, [sp, #52]	; 0x34
  40aa06:	2700      	movs	r7, #0
  40aa08:	e46f      	b.n	40a2ea <_dtoa_r+0x3e2>
  40aa0a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40aa0e:	f04f 0802 	mov.w	r8, #2
  40aa12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  40aa16:	e638      	b.n	40a68a <_dtoa_r+0x782>
  40aa18:	2a00      	cmp	r2, #0
  40aa1a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40aa1e:	46d9      	mov	r9, fp
  40aa20:	dd11      	ble.n	40aa46 <_dtoa_r+0xb3e>
  40aa22:	990a      	ldr	r1, [sp, #40]	; 0x28
  40aa24:	2201      	movs	r2, #1
  40aa26:	4620      	mov	r0, r4
  40aa28:	f000 ffb6 	bl	40b998 <__lshift>
  40aa2c:	4641      	mov	r1, r8
  40aa2e:	900a      	str	r0, [sp, #40]	; 0x28
  40aa30:	f001 f810 	bl	40ba54 <__mcmp>
  40aa34:	2800      	cmp	r0, #0
  40aa36:	f340 815b 	ble.w	40acf0 <_dtoa_r+0xde8>
  40aa3a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40aa3e:	f000 811a 	beq.w	40ac76 <_dtoa_r+0xd6e>
  40aa42:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  40aa46:	9b06      	ldr	r3, [sp, #24]
  40aa48:	4635      	mov	r5, r6
  40aa4a:	f883 a000 	strb.w	sl, [r3]
  40aa4e:	f103 0b01 	add.w	fp, r3, #1
  40aa52:	463e      	mov	r6, r7
  40aa54:	e50f      	b.n	40a476 <_dtoa_r+0x56e>
  40aa56:	bf00      	nop
  40aa58:	3ff00000 	.word	0x3ff00000
  40aa5c:	40240000 	.word	0x40240000
  40aa60:	40140000 	.word	0x40140000
  40aa64:	401c0000 	.word	0x401c0000
  40aa68:	d103      	bne.n	40aa72 <_dtoa_r+0xb6a>
  40aa6a:	f01a 0f01 	tst.w	sl, #1
  40aa6e:	f47f acf2 	bne.w	40a456 <_dtoa_r+0x54e>
  40aa72:	465b      	mov	r3, fp
  40aa74:	469b      	mov	fp, r3
  40aa76:	3b01      	subs	r3, #1
  40aa78:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40aa7c:	2a30      	cmp	r2, #48	; 0x30
  40aa7e:	d0f9      	beq.n	40aa74 <_dtoa_r+0xb6c>
  40aa80:	e4f9      	b.n	40a476 <_dtoa_r+0x56e>
  40aa82:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  40aa86:	4654      	mov	r4, sl
  40aa88:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40aa8c:	f7ff bb48 	b.w	40a120 <_dtoa_r+0x218>
  40aa90:	9e07      	ldr	r6, [sp, #28]
  40aa92:	4275      	negs	r5, r6
  40aa94:	2d00      	cmp	r5, #0
  40aa96:	f000 80c2 	beq.w	40ac1e <_dtoa_r+0xd16>
  40aa9a:	4ba3      	ldr	r3, [pc, #652]	; (40ad28 <_dtoa_r+0xe20>)
  40aa9c:	f005 020f 	and.w	r2, r5, #15
  40aaa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
  40aaa8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40aaac:	f001 fc1c 	bl	40c2e8 <__aeabi_dmul>
  40aab0:	112d      	asrs	r5, r5, #4
  40aab2:	4682      	mov	sl, r0
  40aab4:	468b      	mov	fp, r1
  40aab6:	f000 812d 	beq.w	40ad14 <_dtoa_r+0xe0c>
  40aaba:	4e9c      	ldr	r6, [pc, #624]	; (40ad2c <_dtoa_r+0xe24>)
  40aabc:	f04f 0802 	mov.w	r8, #2
  40aac0:	07ea      	lsls	r2, r5, #31
  40aac2:	d505      	bpl.n	40aad0 <_dtoa_r+0xbc8>
  40aac4:	e9d6 2300 	ldrd	r2, r3, [r6]
  40aac8:	f108 0801 	add.w	r8, r8, #1
  40aacc:	f001 fc0c 	bl	40c2e8 <__aeabi_dmul>
  40aad0:	106d      	asrs	r5, r5, #1
  40aad2:	f106 0608 	add.w	r6, r6, #8
  40aad6:	d1f3      	bne.n	40aac0 <_dtoa_r+0xbb8>
  40aad8:	4682      	mov	sl, r0
  40aada:	468b      	mov	fp, r1
  40aadc:	e5f0      	b.n	40a6c0 <_dtoa_r+0x7b8>
  40aade:	9e07      	ldr	r6, [sp, #28]
  40aae0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40aae2:	2230      	movs	r2, #48	; 0x30
  40aae4:	702a      	strb	r2, [r5, #0]
  40aae6:	3601      	adds	r6, #1
  40aae8:	2231      	movs	r2, #49	; 0x31
  40aaea:	9607      	str	r6, [sp, #28]
  40aaec:	701a      	strb	r2, [r3, #0]
  40aaee:	f7ff bbd8 	b.w	40a2a2 <_dtoa_r+0x39a>
  40aaf2:	6871      	ldr	r1, [r6, #4]
  40aaf4:	4620      	mov	r0, r4
  40aaf6:	f000 fd43 	bl	40b580 <_Balloc>
  40aafa:	6933      	ldr	r3, [r6, #16]
  40aafc:	1c9a      	adds	r2, r3, #2
  40aafe:	4605      	mov	r5, r0
  40ab00:	0092      	lsls	r2, r2, #2
  40ab02:	f106 010c 	add.w	r1, r6, #12
  40ab06:	300c      	adds	r0, #12
  40ab08:	f7f8 fd84 	bl	403614 <memcpy>
  40ab0c:	4620      	mov	r0, r4
  40ab0e:	4629      	mov	r1, r5
  40ab10:	2201      	movs	r2, #1
  40ab12:	f000 ff41 	bl	40b998 <__lshift>
  40ab16:	4607      	mov	r7, r0
  40ab18:	e504      	b.n	40a524 <_dtoa_r+0x61c>
  40ab1a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40ab1e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40ab22:	f000 80a8 	beq.w	40ac76 <_dtoa_r+0xd6e>
  40ab26:	9d06      	ldr	r5, [sp, #24]
  40ab28:	f10a 0301 	add.w	r3, sl, #1
  40ab2c:	702b      	strb	r3, [r5, #0]
  40ab2e:	4635      	mov	r5, r6
  40ab30:	9e06      	ldr	r6, [sp, #24]
  40ab32:	f106 0b01 	add.w	fp, r6, #1
  40ab36:	463e      	mov	r6, r7
  40ab38:	e49d      	b.n	40a476 <_dtoa_r+0x56e>
  40ab3a:	4635      	mov	r5, r6
  40ab3c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40ab40:	463e      	mov	r6, r7
  40ab42:	e47c      	b.n	40a43e <_dtoa_r+0x536>
  40ab44:	f04f 0800 	mov.w	r8, #0
  40ab48:	4646      	mov	r6, r8
  40ab4a:	e70d      	b.n	40a968 <_dtoa_r+0xa60>
  40ab4c:	4976      	ldr	r1, [pc, #472]	; (40ad28 <_dtoa_r+0xe20>)
  40ab4e:	f108 35ff 	add.w	r5, r8, #4294967295
  40ab52:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  40ab56:	4632      	mov	r2, r6
  40ab58:	463b      	mov	r3, r7
  40ab5a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40ab5e:	9510      	str	r5, [sp, #64]	; 0x40
  40ab60:	f001 fbc2 	bl	40c2e8 <__aeabi_dmul>
  40ab64:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  40ab68:	4659      	mov	r1, fp
  40ab6a:	4650      	mov	r0, sl
  40ab6c:	f001 fe56 	bl	40c81c <__aeabi_d2iz>
  40ab70:	4605      	mov	r5, r0
  40ab72:	f001 fb53 	bl	40c21c <__aeabi_i2d>
  40ab76:	4602      	mov	r2, r0
  40ab78:	460b      	mov	r3, r1
  40ab7a:	4650      	mov	r0, sl
  40ab7c:	4659      	mov	r1, fp
  40ab7e:	f001 f9ff 	bl	40bf80 <__aeabi_dsub>
  40ab82:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  40ab86:	3530      	adds	r5, #48	; 0x30
  40ab88:	f1b8 0f01 	cmp.w	r8, #1
  40ab8c:	4606      	mov	r6, r0
  40ab8e:	460f      	mov	r7, r1
  40ab90:	f88e 5000 	strb.w	r5, [lr]
  40ab94:	f10e 0b01 	add.w	fp, lr, #1
  40ab98:	d01e      	beq.n	40abd8 <_dtoa_r+0xcd0>
  40ab9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40ab9c:	1e6b      	subs	r3, r5, #1
  40ab9e:	eb03 0a08 	add.w	sl, r3, r8
  40aba2:	2200      	movs	r2, #0
  40aba4:	4b62      	ldr	r3, [pc, #392]	; (40ad30 <_dtoa_r+0xe28>)
  40aba6:	f001 fb9f 	bl	40c2e8 <__aeabi_dmul>
  40abaa:	460f      	mov	r7, r1
  40abac:	4606      	mov	r6, r0
  40abae:	f001 fe35 	bl	40c81c <__aeabi_d2iz>
  40abb2:	4680      	mov	r8, r0
  40abb4:	f001 fb32 	bl	40c21c <__aeabi_i2d>
  40abb8:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40abbc:	4602      	mov	r2, r0
  40abbe:	460b      	mov	r3, r1
  40abc0:	4630      	mov	r0, r6
  40abc2:	4639      	mov	r1, r7
  40abc4:	f001 f9dc 	bl	40bf80 <__aeabi_dsub>
  40abc8:	f805 8f01 	strb.w	r8, [r5, #1]!
  40abcc:	4555      	cmp	r5, sl
  40abce:	d1e8      	bne.n	40aba2 <_dtoa_r+0xc9a>
  40abd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
  40abd2:	4606      	mov	r6, r0
  40abd4:	460f      	mov	r7, r1
  40abd6:	44ab      	add	fp, r5
  40abd8:	2200      	movs	r2, #0
  40abda:	4b56      	ldr	r3, [pc, #344]	; (40ad34 <_dtoa_r+0xe2c>)
  40abdc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  40abe0:	f001 f9d0 	bl	40bf84 <__adddf3>
  40abe4:	4632      	mov	r2, r6
  40abe6:	463b      	mov	r3, r7
  40abe8:	f001 fdf0 	bl	40c7cc <__aeabi_dcmplt>
  40abec:	2800      	cmp	r0, #0
  40abee:	d04d      	beq.n	40ac8c <_dtoa_r+0xd84>
  40abf0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40abf2:	9607      	str	r6, [sp, #28]
  40abf4:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  40abf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40abfa:	f7ff bb4b 	b.w	40a294 <_dtoa_r+0x38c>
  40abfe:	9e08      	ldr	r6, [sp, #32]
  40ac00:	2300      	movs	r3, #0
  40ac02:	ebc9 0506 	rsb	r5, r9, r6
  40ac06:	f7ff bb76 	b.w	40a2f6 <_dtoa_r+0x3ee>
  40ac0a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40ac0c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40ac0e:	9d08      	ldr	r5, [sp, #32]
  40ac10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40ac14:	f7ff bb6f 	b.w	40a2f6 <_dtoa_r+0x3ee>
  40ac18:	4657      	mov	r7, sl
  40ac1a:	f7ff bbb9 	b.w	40a390 <_dtoa_r+0x488>
  40ac1e:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40ac22:	f04f 0802 	mov.w	r8, #2
  40ac26:	e54b      	b.n	40a6c0 <_dtoa_r+0x7b8>
  40ac28:	f1b9 0f00 	cmp.w	r9, #0
  40ac2c:	f43f aeaf 	beq.w	40a98e <_dtoa_r+0xa86>
  40ac30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40ac32:	2e00      	cmp	r6, #0
  40ac34:	f77f af28 	ble.w	40aa88 <_dtoa_r+0xb80>
  40ac38:	2200      	movs	r2, #0
  40ac3a:	4b3d      	ldr	r3, [pc, #244]	; (40ad30 <_dtoa_r+0xe28>)
  40ac3c:	4650      	mov	r0, sl
  40ac3e:	4659      	mov	r1, fp
  40ac40:	f001 fb52 	bl	40c2e8 <__aeabi_dmul>
  40ac44:	4682      	mov	sl, r0
  40ac46:	f108 0001 	add.w	r0, r8, #1
  40ac4a:	468b      	mov	fp, r1
  40ac4c:	f001 fae6 	bl	40c21c <__aeabi_i2d>
  40ac50:	4602      	mov	r2, r0
  40ac52:	460b      	mov	r3, r1
  40ac54:	4650      	mov	r0, sl
  40ac56:	4659      	mov	r1, fp
  40ac58:	f001 fb46 	bl	40c2e8 <__aeabi_dmul>
  40ac5c:	2200      	movs	r2, #0
  40ac5e:	4b36      	ldr	r3, [pc, #216]	; (40ad38 <_dtoa_r+0xe30>)
  40ac60:	f001 f990 	bl	40bf84 <__adddf3>
  40ac64:	9d07      	ldr	r5, [sp, #28]
  40ac66:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  40ac6a:	3d01      	subs	r5, #1
  40ac6c:	4606      	mov	r6, r0
  40ac6e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40ac72:	9517      	str	r5, [sp, #92]	; 0x5c
  40ac74:	e544      	b.n	40a700 <_dtoa_r+0x7f8>
  40ac76:	4635      	mov	r5, r6
  40ac78:	9b06      	ldr	r3, [sp, #24]
  40ac7a:	9e06      	ldr	r6, [sp, #24]
  40ac7c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ac7e:	2239      	movs	r2, #57	; 0x39
  40ac80:	7032      	strb	r2, [r6, #0]
  40ac82:	f103 0b01 	add.w	fp, r3, #1
  40ac86:	463e      	mov	r6, r7
  40ac88:	f7ff bbef 	b.w	40a46a <_dtoa_r+0x562>
  40ac8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  40ac90:	2000      	movs	r0, #0
  40ac92:	4928      	ldr	r1, [pc, #160]	; (40ad34 <_dtoa_r+0xe2c>)
  40ac94:	f001 f974 	bl	40bf80 <__aeabi_dsub>
  40ac98:	4632      	mov	r2, r6
  40ac9a:	463b      	mov	r3, r7
  40ac9c:	f001 fdb4 	bl	40c808 <__aeabi_dcmpgt>
  40aca0:	2800      	cmp	r0, #0
  40aca2:	f43f aef1 	beq.w	40aa88 <_dtoa_r+0xb80>
  40aca6:	465b      	mov	r3, fp
  40aca8:	469b      	mov	fp, r3
  40acaa:	3b01      	subs	r3, #1
  40acac:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  40acb0:	2a30      	cmp	r2, #48	; 0x30
  40acb2:	d0f9      	beq.n	40aca8 <_dtoa_r+0xda0>
  40acb4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  40acb6:	9507      	str	r5, [sp, #28]
  40acb8:	f7ff baf3 	b.w	40a2a2 <_dtoa_r+0x39a>
  40acbc:	4645      	mov	r5, r8
  40acbe:	4654      	mov	r4, sl
  40acc0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  40acc2:	9607      	str	r6, [sp, #28]
  40acc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40acc6:	f7ff bae5 	b.w	40a294 <_dtoa_r+0x38c>
  40acca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40acce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  40acd2:	d0d0      	beq.n	40ac76 <_dtoa_r+0xd6e>
  40acd4:	9b03      	ldr	r3, [sp, #12]
  40acd6:	4635      	mov	r5, r6
  40acd8:	2b00      	cmp	r3, #0
  40acda:	9e06      	ldr	r6, [sp, #24]
  40acdc:	bfc8      	it	gt
  40acde:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  40ace2:	f886 a000 	strb.w	sl, [r6]
  40ace6:	f106 0b01 	add.w	fp, r6, #1
  40acea:	463e      	mov	r6, r7
  40acec:	f7ff bbc3 	b.w	40a476 <_dtoa_r+0x56e>
  40acf0:	f47f aea9 	bne.w	40aa46 <_dtoa_r+0xb3e>
  40acf4:	f01a 0f01 	tst.w	sl, #1
  40acf8:	f43f aea5 	beq.w	40aa46 <_dtoa_r+0xb3e>
  40acfc:	e69d      	b.n	40aa3a <_dtoa_r+0xb32>
  40acfe:	4631      	mov	r1, r6
  40ad00:	4620      	mov	r0, r4
  40ad02:	220a      	movs	r2, #10
  40ad04:	2300      	movs	r3, #0
  40ad06:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  40ad0a:	f000 fc69 	bl	40b5e0 <__multadd>
  40ad0e:	4606      	mov	r6, r0
  40ad10:	f7ff bb6c 	b.w	40a3ec <_dtoa_r+0x4e4>
  40ad14:	f04f 0802 	mov.w	r8, #2
  40ad18:	e4d2      	b.n	40a6c0 <_dtoa_r+0x7b8>
  40ad1a:	f43f ab52 	beq.w	40a3c2 <_dtoa_r+0x4ba>
  40ad1e:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  40ad22:	f7ff bbe2 	b.w	40a4ea <_dtoa_r+0x5e2>
  40ad26:	bf00      	nop
  40ad28:	0040d408 	.word	0x0040d408
  40ad2c:	0040d4d0 	.word	0x0040d4d0
  40ad30:	40240000 	.word	0x40240000
  40ad34:	3fe00000 	.word	0x3fe00000
  40ad38:	401c0000 	.word	0x401c0000
  40ad3c:	f3af 8000 	nop.w

0040ad40 <_fclose_r>:
  40ad40:	b570      	push	{r4, r5, r6, lr}
  40ad42:	460c      	mov	r4, r1
  40ad44:	4605      	mov	r5, r0
  40ad46:	b131      	cbz	r1, 40ad56 <_fclose_r+0x16>
  40ad48:	b110      	cbz	r0, 40ad50 <_fclose_r+0x10>
  40ad4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40ad4c:	2b00      	cmp	r3, #0
  40ad4e:	d02f      	beq.n	40adb0 <_fclose_r+0x70>
  40ad50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40ad54:	b90b      	cbnz	r3, 40ad5a <_fclose_r+0x1a>
  40ad56:	2000      	movs	r0, #0
  40ad58:	bd70      	pop	{r4, r5, r6, pc}
  40ad5a:	4628      	mov	r0, r5
  40ad5c:	4621      	mov	r1, r4
  40ad5e:	f7fa feef 	bl	405b40 <_fflush_r>
  40ad62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40ad64:	4606      	mov	r6, r0
  40ad66:	b133      	cbz	r3, 40ad76 <_fclose_r+0x36>
  40ad68:	4628      	mov	r0, r5
  40ad6a:	69e1      	ldr	r1, [r4, #28]
  40ad6c:	4798      	blx	r3
  40ad6e:	2800      	cmp	r0, #0
  40ad70:	bfb8      	it	lt
  40ad72:	f04f 36ff 	movlt.w	r6, #4294967295
  40ad76:	89a3      	ldrh	r3, [r4, #12]
  40ad78:	061b      	lsls	r3, r3, #24
  40ad7a:	d41c      	bmi.n	40adb6 <_fclose_r+0x76>
  40ad7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40ad7e:	b141      	cbz	r1, 40ad92 <_fclose_r+0x52>
  40ad80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40ad84:	4299      	cmp	r1, r3
  40ad86:	d002      	beq.n	40ad8e <_fclose_r+0x4e>
  40ad88:	4628      	mov	r0, r5
  40ad8a:	f7fb f837 	bl	405dfc <_free_r>
  40ad8e:	2300      	movs	r3, #0
  40ad90:	6323      	str	r3, [r4, #48]	; 0x30
  40ad92:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40ad94:	b121      	cbz	r1, 40ada0 <_fclose_r+0x60>
  40ad96:	4628      	mov	r0, r5
  40ad98:	f7fb f830 	bl	405dfc <_free_r>
  40ad9c:	2300      	movs	r3, #0
  40ad9e:	6463      	str	r3, [r4, #68]	; 0x44
  40ada0:	f7fa ff64 	bl	405c6c <__sfp_lock_acquire>
  40ada4:	2300      	movs	r3, #0
  40ada6:	81a3      	strh	r3, [r4, #12]
  40ada8:	f7fa ff62 	bl	405c70 <__sfp_lock_release>
  40adac:	4630      	mov	r0, r6
  40adae:	bd70      	pop	{r4, r5, r6, pc}
  40adb0:	f7fa fee2 	bl	405b78 <__sinit>
  40adb4:	e7cc      	b.n	40ad50 <_fclose_r+0x10>
  40adb6:	4628      	mov	r0, r5
  40adb8:	6921      	ldr	r1, [r4, #16]
  40adba:	f7fb f81f 	bl	405dfc <_free_r>
  40adbe:	e7dd      	b.n	40ad7c <_fclose_r+0x3c>

0040adc0 <fclose>:
  40adc0:	4b02      	ldr	r3, [pc, #8]	; (40adcc <fclose+0xc>)
  40adc2:	4601      	mov	r1, r0
  40adc4:	6818      	ldr	r0, [r3, #0]
  40adc6:	f7ff bfbb 	b.w	40ad40 <_fclose_r>
  40adca:	bf00      	nop
  40adcc:	20000518 	.word	0x20000518

0040add0 <_fstat_r>:
  40add0:	b538      	push	{r3, r4, r5, lr}
  40add2:	4c08      	ldr	r4, [pc, #32]	; (40adf4 <_fstat_r+0x24>)
  40add4:	2300      	movs	r3, #0
  40add6:	4605      	mov	r5, r0
  40add8:	4608      	mov	r0, r1
  40adda:	4611      	mov	r1, r2
  40addc:	6023      	str	r3, [r4, #0]
  40adde:	f7f8 f9a9 	bl	403134 <_fstat>
  40ade2:	1c43      	adds	r3, r0, #1
  40ade4:	d000      	beq.n	40ade8 <_fstat_r+0x18>
  40ade6:	bd38      	pop	{r3, r4, r5, pc}
  40ade8:	6823      	ldr	r3, [r4, #0]
  40adea:	2b00      	cmp	r3, #0
  40adec:	d0fb      	beq.n	40ade6 <_fstat_r+0x16>
  40adee:	602b      	str	r3, [r5, #0]
  40adf0:	bd38      	pop	{r3, r4, r5, pc}
  40adf2:	bf00      	nop
  40adf4:	2000c7bc 	.word	0x2000c7bc

0040adf8 <rshift>:
  40adf8:	6902      	ldr	r2, [r0, #16]
  40adfa:	114b      	asrs	r3, r1, #5
  40adfc:	4293      	cmp	r3, r2
  40adfe:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  40ae02:	f100 0814 	add.w	r8, r0, #20
  40ae06:	da28      	bge.n	40ae5a <rshift+0x62>
  40ae08:	f011 0c1f 	ands.w	ip, r1, #31
  40ae0c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
  40ae10:	eb08 0783 	add.w	r7, r8, r3, lsl #2
  40ae14:	d028      	beq.n	40ae68 <rshift+0x70>
  40ae16:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
  40ae1a:	1d3b      	adds	r3, r7, #4
  40ae1c:	429a      	cmp	r2, r3
  40ae1e:	fa24 f40c 	lsr.w	r4, r4, ip
  40ae22:	f1cc 0120 	rsb	r1, ip, #32
  40ae26:	d935      	bls.n	40ae94 <rshift+0x9c>
  40ae28:	4645      	mov	r5, r8
  40ae2a:	681e      	ldr	r6, [r3, #0]
  40ae2c:	408e      	lsls	r6, r1
  40ae2e:	4334      	orrs	r4, r6
  40ae30:	f845 4b04 	str.w	r4, [r5], #4
  40ae34:	f853 4b04 	ldr.w	r4, [r3], #4
  40ae38:	4293      	cmp	r3, r2
  40ae3a:	fa24 f40c 	lsr.w	r4, r4, ip
  40ae3e:	d3f4      	bcc.n	40ae2a <rshift+0x32>
  40ae40:	1bd3      	subs	r3, r2, r7
  40ae42:	3b05      	subs	r3, #5
  40ae44:	f023 0303 	bic.w	r3, r3, #3
  40ae48:	3304      	adds	r3, #4
  40ae4a:	4443      	add	r3, r8
  40ae4c:	601c      	str	r4, [r3, #0]
  40ae4e:	b104      	cbz	r4, 40ae52 <rshift+0x5a>
  40ae50:	3304      	adds	r3, #4
  40ae52:	ebc8 0303 	rsb	r3, r8, r3
  40ae56:	109b      	asrs	r3, r3, #2
  40ae58:	e016      	b.n	40ae88 <rshift+0x90>
  40ae5a:	2300      	movs	r3, #0
  40ae5c:	6103      	str	r3, [r0, #16]
  40ae5e:	2300      	movs	r3, #0
  40ae60:	6143      	str	r3, [r0, #20]
  40ae62:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  40ae66:	4770      	bx	lr
  40ae68:	42ba      	cmp	r2, r7
  40ae6a:	d9f6      	bls.n	40ae5a <rshift+0x62>
  40ae6c:	4641      	mov	r1, r8
  40ae6e:	463b      	mov	r3, r7
  40ae70:	f853 4b04 	ldr.w	r4, [r3], #4
  40ae74:	f841 4b04 	str.w	r4, [r1], #4
  40ae78:	429a      	cmp	r2, r3
  40ae7a:	d8f9      	bhi.n	40ae70 <rshift+0x78>
  40ae7c:	43fb      	mvns	r3, r7
  40ae7e:	4413      	add	r3, r2
  40ae80:	f023 0303 	bic.w	r3, r3, #3
  40ae84:	3304      	adds	r3, #4
  40ae86:	109b      	asrs	r3, r3, #2
  40ae88:	6103      	str	r3, [r0, #16]
  40ae8a:	2b00      	cmp	r3, #0
  40ae8c:	d0e7      	beq.n	40ae5e <rshift+0x66>
  40ae8e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  40ae92:	4770      	bx	lr
  40ae94:	4643      	mov	r3, r8
  40ae96:	e7d9      	b.n	40ae4c <rshift+0x54>

0040ae98 <__gethex>:
  40ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ae9c:	b08b      	sub	sp, #44	; 0x2c
  40ae9e:	4688      	mov	r8, r1
  40aea0:	9206      	str	r2, [sp, #24]
  40aea2:	9309      	str	r3, [sp, #36]	; 0x24
  40aea4:	9007      	str	r0, [sp, #28]
  40aea6:	f7fb fa41 	bl	40632c <_localeconv_r>
  40aeaa:	6800      	ldr	r0, [r0, #0]
  40aeac:	9002      	str	r0, [sp, #8]
  40aeae:	f7f8 fe9b 	bl	403be8 <strlen>
  40aeb2:	f8d8 3000 	ldr.w	r3, [r8]
  40aeb6:	9902      	ldr	r1, [sp, #8]
  40aeb8:	789a      	ldrb	r2, [r3, #2]
  40aeba:	9003      	str	r0, [sp, #12]
  40aebc:	4401      	add	r1, r0
  40aebe:	2a30      	cmp	r2, #48	; 0x30
  40aec0:	f811 ac01 	ldrb.w	sl, [r1, #-1]
  40aec4:	f103 0502 	add.w	r5, r3, #2
  40aec8:	f040 81a6 	bne.w	40b218 <__gethex+0x380>
  40aecc:	3303      	adds	r3, #3
  40aece:	2700      	movs	r7, #0
  40aed0:	461d      	mov	r5, r3
  40aed2:	f813 2b01 	ldrb.w	r2, [r3], #1
  40aed6:	2a30      	cmp	r2, #48	; 0x30
  40aed8:	f107 0701 	add.w	r7, r7, #1
  40aedc:	d0f8      	beq.n	40aed0 <__gethex+0x38>
  40aede:	4eb1      	ldr	r6, [pc, #708]	; (40b1a4 <__gethex+0x30c>)
  40aee0:	5cb4      	ldrb	r4, [r6, r2]
  40aee2:	2c00      	cmp	r4, #0
  40aee4:	f000 80f4 	beq.w	40b0d0 <__gethex+0x238>
  40aee8:	782b      	ldrb	r3, [r5, #0]
  40aeea:	f04f 0900 	mov.w	r9, #0
  40aeee:	5cf3      	ldrb	r3, [r6, r3]
  40aef0:	46cb      	mov	fp, r9
  40aef2:	2b00      	cmp	r3, #0
  40aef4:	f000 8198 	beq.w	40b228 <__gethex+0x390>
  40aef8:	1c6b      	adds	r3, r5, #1
  40aefa:	461c      	mov	r4, r3
  40aefc:	3301      	adds	r3, #1
  40aefe:	7822      	ldrb	r2, [r4, #0]
  40af00:	5cb2      	ldrb	r2, [r6, r2]
  40af02:	2a00      	cmp	r2, #0
  40af04:	d1f9      	bne.n	40aefa <__gethex+0x62>
  40af06:	4620      	mov	r0, r4
  40af08:	9902      	ldr	r1, [sp, #8]
  40af0a:	9a03      	ldr	r2, [sp, #12]
  40af0c:	f7f8 fe9c 	bl	403c48 <strncmp>
  40af10:	b1e0      	cbz	r0, 40af4c <__gethex+0xb4>
  40af12:	7823      	ldrb	r3, [r4, #0]
  40af14:	f1bb 0f00 	cmp.w	fp, #0
  40af18:	f000 816c 	beq.w	40b1f4 <__gethex+0x35c>
  40af1c:	ebc4 0b0b 	rsb	fp, r4, fp
  40af20:	ea4f 028b 	mov.w	r2, fp, lsl #2
  40af24:	9204      	str	r2, [sp, #16]
  40af26:	2b50      	cmp	r3, #80	; 0x50
  40af28:	f000 809d 	beq.w	40b066 <__gethex+0x1ce>
  40af2c:	2b70      	cmp	r3, #112	; 0x70
  40af2e:	f000 809a 	beq.w	40b066 <__gethex+0x1ce>
  40af32:	4623      	mov	r3, r4
  40af34:	f8c8 3000 	str.w	r3, [r8]
  40af38:	f1b9 0f00 	cmp.w	r9, #0
  40af3c:	d00c      	beq.n	40af58 <__gethex+0xc0>
  40af3e:	2f00      	cmp	r7, #0
  40af40:	bf0c      	ite	eq
  40af42:	2006      	moveq	r0, #6
  40af44:	2000      	movne	r0, #0
  40af46:	b00b      	add	sp, #44	; 0x2c
  40af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40af4c:	f1bb 0f00 	cmp.w	fp, #0
  40af50:	f000 818c 	beq.w	40b26c <__gethex+0x3d4>
  40af54:	7823      	ldrb	r3, [r4, #0]
  40af56:	e7e1      	b.n	40af1c <__gethex+0x84>
  40af58:	1b63      	subs	r3, r4, r5
  40af5a:	3b01      	subs	r3, #1
  40af5c:	2b07      	cmp	r3, #7
  40af5e:	4649      	mov	r1, r9
  40af60:	dd04      	ble.n	40af6c <__gethex+0xd4>
  40af62:	105b      	asrs	r3, r3, #1
  40af64:	2b07      	cmp	r3, #7
  40af66:	f101 0101 	add.w	r1, r1, #1
  40af6a:	dcfa      	bgt.n	40af62 <__gethex+0xca>
  40af6c:	9807      	ldr	r0, [sp, #28]
  40af6e:	f000 fb07 	bl	40b580 <_Balloc>
  40af72:	42a5      	cmp	r5, r4
  40af74:	f100 0314 	add.w	r3, r0, #20
  40af78:	9005      	str	r0, [sp, #20]
  40af7a:	9308      	str	r3, [sp, #32]
  40af7c:	f080 81cd 	bcs.w	40b31a <__gethex+0x482>
  40af80:	469b      	mov	fp, r3
  40af82:	9b03      	ldr	r3, [sp, #12]
  40af84:	f04f 0900 	mov.w	r9, #0
  40af88:	464f      	mov	r7, r9
  40af8a:	f1c3 0c01 	rsb	ip, r3, #1
  40af8e:	e00e      	b.n	40afae <__gethex+0x116>
  40af90:	2f20      	cmp	r7, #32
  40af92:	d05f      	beq.n	40b054 <__gethex+0x1bc>
  40af94:	463a      	mov	r2, r7
  40af96:	3704      	adds	r7, #4
  40af98:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40af9c:	5cf3      	ldrb	r3, [r6, r3]
  40af9e:	f003 030f 	and.w	r3, r3, #15
  40afa2:	4093      	lsls	r3, r2
  40afa4:	4545      	cmp	r5, r8
  40afa6:	ea49 0903 	orr.w	r9, r9, r3
  40afaa:	d21a      	bcs.n	40afe2 <__gethex+0x14a>
  40afac:	4644      	mov	r4, r8
  40afae:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  40afb2:	4553      	cmp	r3, sl
  40afb4:	f104 38ff 	add.w	r8, r4, #4294967295
  40afb8:	d1ea      	bne.n	40af90 <__gethex+0xf8>
  40afba:	eb08 030c 	add.w	r3, r8, ip
  40afbe:	429d      	cmp	r5, r3
  40afc0:	d8e6      	bhi.n	40af90 <__gethex+0xf8>
  40afc2:	4618      	mov	r0, r3
  40afc4:	9902      	ldr	r1, [sp, #8]
  40afc6:	9a03      	ldr	r2, [sp, #12]
  40afc8:	9301      	str	r3, [sp, #4]
  40afca:	f8cd c000 	str.w	ip, [sp]
  40afce:	f7f8 fe3b 	bl	403c48 <strncmp>
  40afd2:	9b01      	ldr	r3, [sp, #4]
  40afd4:	f8dd c000 	ldr.w	ip, [sp]
  40afd8:	2800      	cmp	r0, #0
  40afda:	d1d9      	bne.n	40af90 <__gethex+0xf8>
  40afdc:	4698      	mov	r8, r3
  40afde:	4545      	cmp	r5, r8
  40afe0:	d3e4      	bcc.n	40afac <__gethex+0x114>
  40afe2:	f84b 9b04 	str.w	r9, [fp], #4
  40afe6:	9b08      	ldr	r3, [sp, #32]
  40afe8:	9905      	ldr	r1, [sp, #20]
  40afea:	ebc3 0b0b 	rsb	fp, r3, fp
  40afee:	ea4f 03ab 	mov.w	r3, fp, asr #2
  40aff2:	4648      	mov	r0, r9
  40aff4:	610b      	str	r3, [r1, #16]
  40aff6:	015d      	lsls	r5, r3, #5
  40aff8:	f000 fb8a 	bl	40b710 <__hi0bits>
  40affc:	9a06      	ldr	r2, [sp, #24]
  40affe:	6814      	ldr	r4, [r2, #0]
  40b000:	1a28      	subs	r0, r5, r0
  40b002:	42a0      	cmp	r0, r4
  40b004:	f300 80d0 	bgt.w	40b1a8 <__gethex+0x310>
  40b008:	f2c0 80f7 	blt.w	40b1fa <__gethex+0x362>
  40b00c:	2600      	movs	r6, #0
  40b00e:	9806      	ldr	r0, [sp, #24]
  40b010:	9904      	ldr	r1, [sp, #16]
  40b012:	6883      	ldr	r3, [r0, #8]
  40b014:	4299      	cmp	r1, r3
  40b016:	f300 8092 	bgt.w	40b13e <__gethex+0x2a6>
  40b01a:	9806      	ldr	r0, [sp, #24]
  40b01c:	9904      	ldr	r1, [sp, #16]
  40b01e:	6843      	ldr	r3, [r0, #4]
  40b020:	4299      	cmp	r1, r3
  40b022:	f280 80a2 	bge.w	40b16a <__gethex+0x2d2>
  40b026:	1a5d      	subs	r5, r3, r1
  40b028:	42ac      	cmp	r4, r5
  40b02a:	f300 80ff 	bgt.w	40b22c <__gethex+0x394>
  40b02e:	68c2      	ldr	r2, [r0, #12]
  40b030:	2a02      	cmp	r2, #2
  40b032:	f000 8188 	beq.w	40b346 <__gethex+0x4ae>
  40b036:	2a03      	cmp	r2, #3
  40b038:	f000 8156 	beq.w	40b2e8 <__gethex+0x450>
  40b03c:	2a01      	cmp	r2, #1
  40b03e:	f000 8173 	beq.w	40b328 <__gethex+0x490>
  40b042:	9807      	ldr	r0, [sp, #28]
  40b044:	9905      	ldr	r1, [sp, #20]
  40b046:	f000 fac1 	bl	40b5cc <_Bfree>
  40b04a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b04c:	2300      	movs	r3, #0
  40b04e:	6013      	str	r3, [r2, #0]
  40b050:	2050      	movs	r0, #80	; 0x50
  40b052:	e778      	b.n	40af46 <__gethex+0xae>
  40b054:	f8cb 9000 	str.w	r9, [fp]
  40b058:	f04f 0900 	mov.w	r9, #0
  40b05c:	f10b 0b04 	add.w	fp, fp, #4
  40b060:	464a      	mov	r2, r9
  40b062:	2704      	movs	r7, #4
  40b064:	e798      	b.n	40af98 <__gethex+0x100>
  40b066:	7863      	ldrb	r3, [r4, #1]
  40b068:	2b2b      	cmp	r3, #43	; 0x2b
  40b06a:	f000 8097 	beq.w	40b19c <__gethex+0x304>
  40b06e:	2b2d      	cmp	r3, #45	; 0x2d
  40b070:	d070      	beq.n	40b154 <__gethex+0x2bc>
  40b072:	1c60      	adds	r0, r4, #1
  40b074:	f04f 0b00 	mov.w	fp, #0
  40b078:	5cf2      	ldrb	r2, [r6, r3]
  40b07a:	494a      	ldr	r1, [pc, #296]	; (40b1a4 <__gethex+0x30c>)
  40b07c:	1e53      	subs	r3, r2, #1
  40b07e:	2b18      	cmp	r3, #24
  40b080:	f63f af57 	bhi.w	40af32 <__gethex+0x9a>
  40b084:	7843      	ldrb	r3, [r0, #1]
  40b086:	5cc9      	ldrb	r1, [r1, r3]
  40b088:	f101 3cff 	add.w	ip, r1, #4294967295
  40b08c:	f1bc 0f18 	cmp.w	ip, #24
  40b090:	f1a2 0210 	sub.w	r2, r2, #16
  40b094:	f100 0301 	add.w	r3, r0, #1
  40b098:	d812      	bhi.n	40b0c0 <__gethex+0x228>
  40b09a:	3002      	adds	r0, #2
  40b09c:	f890 c000 	ldrb.w	ip, [r0]
  40b0a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40b0a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  40b0a8:	f816 100c 	ldrb.w	r1, [r6, ip]
  40b0ac:	f101 3cff 	add.w	ip, r1, #4294967295
  40b0b0:	f1bc 0f18 	cmp.w	ip, #24
  40b0b4:	4603      	mov	r3, r0
  40b0b6:	f1a2 0210 	sub.w	r2, r2, #16
  40b0ba:	f100 0001 	add.w	r0, r0, #1
  40b0be:	d9ed      	bls.n	40b09c <__gethex+0x204>
  40b0c0:	f1bb 0f00 	cmp.w	fp, #0
  40b0c4:	d000      	beq.n	40b0c8 <__gethex+0x230>
  40b0c6:	4252      	negs	r2, r2
  40b0c8:	9804      	ldr	r0, [sp, #16]
  40b0ca:	4410      	add	r0, r2
  40b0cc:	9004      	str	r0, [sp, #16]
  40b0ce:	e731      	b.n	40af34 <__gethex+0x9c>
  40b0d0:	4628      	mov	r0, r5
  40b0d2:	9902      	ldr	r1, [sp, #8]
  40b0d4:	9a03      	ldr	r2, [sp, #12]
  40b0d6:	f7f8 fdb7 	bl	403c48 <strncmp>
  40b0da:	2800      	cmp	r0, #0
  40b0dc:	d13f      	bne.n	40b15e <__gethex+0x2c6>
  40b0de:	9803      	ldr	r0, [sp, #12]
  40b0e0:	5c2b      	ldrb	r3, [r5, r0]
  40b0e2:	5cf2      	ldrb	r2, [r6, r3]
  40b0e4:	4604      	mov	r4, r0
  40b0e6:	442c      	add	r4, r5
  40b0e8:	2a00      	cmp	r2, #0
  40b0ea:	f000 8097 	beq.w	40b21c <__gethex+0x384>
  40b0ee:	2b30      	cmp	r3, #48	; 0x30
  40b0f0:	f040 8142 	bne.w	40b378 <__gethex+0x4e0>
  40b0f4:	1c62      	adds	r2, r4, #1
  40b0f6:	4615      	mov	r5, r2
  40b0f8:	3201      	adds	r2, #1
  40b0fa:	782b      	ldrb	r3, [r5, #0]
  40b0fc:	2b30      	cmp	r3, #48	; 0x30
  40b0fe:	d0fa      	beq.n	40b0f6 <__gethex+0x25e>
  40b100:	5cf3      	ldrb	r3, [r6, r3]
  40b102:	f1d3 0901 	rsbs	r9, r3, #1
  40b106:	46a3      	mov	fp, r4
  40b108:	bf38      	it	cc
  40b10a:	f04f 0900 	movcc.w	r9, #0
  40b10e:	2701      	movs	r7, #1
  40b110:	e6ef      	b.n	40aef2 <__gethex+0x5a>
  40b112:	4447      	add	r7, r8
  40b114:	f857 0c04 	ldr.w	r0, [r7, #-4]
  40b118:	f000 fafa 	bl	40b710 <__hi0bits>
  40b11c:	f1c4 0320 	rsb	r3, r4, #32
  40b120:	4298      	cmp	r0, r3
  40b122:	f280 80dd 	bge.w	40b2e0 <__gethex+0x448>
  40b126:	9805      	ldr	r0, [sp, #20]
  40b128:	2101      	movs	r1, #1
  40b12a:	f7ff fe65 	bl	40adf8 <rshift>
  40b12e:	9806      	ldr	r0, [sp, #24]
  40b130:	9904      	ldr	r1, [sp, #16]
  40b132:	6883      	ldr	r3, [r0, #8]
  40b134:	3101      	adds	r1, #1
  40b136:	4299      	cmp	r1, r3
  40b138:	9104      	str	r1, [sp, #16]
  40b13a:	f340 80d1 	ble.w	40b2e0 <__gethex+0x448>
  40b13e:	9807      	ldr	r0, [sp, #28]
  40b140:	9905      	ldr	r1, [sp, #20]
  40b142:	f000 fa43 	bl	40b5cc <_Bfree>
  40b146:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40b148:	2300      	movs	r3, #0
  40b14a:	20a3      	movs	r0, #163	; 0xa3
  40b14c:	6013      	str	r3, [r2, #0]
  40b14e:	b00b      	add	sp, #44	; 0x2c
  40b150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b154:	f04f 0b01 	mov.w	fp, #1
  40b158:	78a3      	ldrb	r3, [r4, #2]
  40b15a:	1ca0      	adds	r0, r4, #2
  40b15c:	e78c      	b.n	40b078 <__gethex+0x1e0>
  40b15e:	9404      	str	r4, [sp, #16]
  40b160:	782b      	ldrb	r3, [r5, #0]
  40b162:	462c      	mov	r4, r5
  40b164:	f04f 0901 	mov.w	r9, #1
  40b168:	e6dd      	b.n	40af26 <__gethex+0x8e>
  40b16a:	2501      	movs	r5, #1
  40b16c:	b166      	cbz	r6, 40b188 <__gethex+0x2f0>
  40b16e:	9806      	ldr	r0, [sp, #24]
  40b170:	68c3      	ldr	r3, [r0, #12]
  40b172:	2b02      	cmp	r3, #2
  40b174:	f000 808b 	beq.w	40b28e <__gethex+0x3f6>
  40b178:	2b03      	cmp	r3, #3
  40b17a:	f000 808c 	beq.w	40b296 <__gethex+0x3fe>
  40b17e:	2b01      	cmp	r3, #1
  40b180:	f000 80c2 	beq.w	40b308 <__gethex+0x470>
  40b184:	f045 0510 	orr.w	r5, r5, #16
  40b188:	9814      	ldr	r0, [sp, #80]	; 0x50
  40b18a:	9b05      	ldr	r3, [sp, #20]
  40b18c:	6003      	str	r3, [r0, #0]
  40b18e:	9909      	ldr	r1, [sp, #36]	; 0x24
  40b190:	9b04      	ldr	r3, [sp, #16]
  40b192:	600b      	str	r3, [r1, #0]
  40b194:	4628      	mov	r0, r5
  40b196:	b00b      	add	sp, #44	; 0x2c
  40b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b19c:	f04f 0b00 	mov.w	fp, #0
  40b1a0:	e7da      	b.n	40b158 <__gethex+0x2c0>
  40b1a2:	bf00      	nop
  40b1a4:	0040d304 	.word	0x0040d304
  40b1a8:	1b05      	subs	r5, r0, r4
  40b1aa:	4629      	mov	r1, r5
  40b1ac:	9805      	ldr	r0, [sp, #20]
  40b1ae:	f000 fe03 	bl	40bdb8 <__any_on>
  40b1b2:	2800      	cmp	r0, #0
  40b1b4:	d036      	beq.n	40b224 <__gethex+0x38c>
  40b1b6:	1e6b      	subs	r3, r5, #1
  40b1b8:	115a      	asrs	r2, r3, #5
  40b1ba:	9808      	ldr	r0, [sp, #32]
  40b1bc:	f003 011f 	and.w	r1, r3, #31
  40b1c0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  40b1c4:	2601      	movs	r6, #1
  40b1c6:	fa06 f101 	lsl.w	r1, r6, r1
  40b1ca:	4211      	tst	r1, r2
  40b1cc:	d00a      	beq.n	40b1e4 <__gethex+0x34c>
  40b1ce:	42b3      	cmp	r3, r6
  40b1d0:	f340 80a8 	ble.w	40b324 <__gethex+0x48c>
  40b1d4:	9805      	ldr	r0, [sp, #20]
  40b1d6:	1ea9      	subs	r1, r5, #2
  40b1d8:	f000 fdee 	bl	40bdb8 <__any_on>
  40b1dc:	2800      	cmp	r0, #0
  40b1de:	f000 80a1 	beq.w	40b324 <__gethex+0x48c>
  40b1e2:	2603      	movs	r6, #3
  40b1e4:	9b04      	ldr	r3, [sp, #16]
  40b1e6:	9805      	ldr	r0, [sp, #20]
  40b1e8:	442b      	add	r3, r5
  40b1ea:	4629      	mov	r1, r5
  40b1ec:	9304      	str	r3, [sp, #16]
  40b1ee:	f7ff fe03 	bl	40adf8 <rshift>
  40b1f2:	e70c      	b.n	40b00e <__gethex+0x176>
  40b1f4:	f8cd b010 	str.w	fp, [sp, #16]
  40b1f8:	e695      	b.n	40af26 <__gethex+0x8e>
  40b1fa:	1a25      	subs	r5, r4, r0
  40b1fc:	9905      	ldr	r1, [sp, #20]
  40b1fe:	9807      	ldr	r0, [sp, #28]
  40b200:	462a      	mov	r2, r5
  40b202:	f000 fbc9 	bl	40b998 <__lshift>
  40b206:	9b04      	ldr	r3, [sp, #16]
  40b208:	9005      	str	r0, [sp, #20]
  40b20a:	1b5b      	subs	r3, r3, r5
  40b20c:	9304      	str	r3, [sp, #16]
  40b20e:	f100 0314 	add.w	r3, r0, #20
  40b212:	9308      	str	r3, [sp, #32]
  40b214:	2600      	movs	r6, #0
  40b216:	e6fa      	b.n	40b00e <__gethex+0x176>
  40b218:	2700      	movs	r7, #0
  40b21a:	e660      	b.n	40aede <__gethex+0x46>
  40b21c:	9204      	str	r2, [sp, #16]
  40b21e:	f04f 0901 	mov.w	r9, #1
  40b222:	e680      	b.n	40af26 <__gethex+0x8e>
  40b224:	4606      	mov	r6, r0
  40b226:	e7dd      	b.n	40b1e4 <__gethex+0x34c>
  40b228:	462c      	mov	r4, r5
  40b22a:	e66c      	b.n	40af06 <__gethex+0x6e>
  40b22c:	1e6f      	subs	r7, r5, #1
  40b22e:	2e00      	cmp	r6, #0
  40b230:	d158      	bne.n	40b2e4 <__gethex+0x44c>
  40b232:	2f00      	cmp	r7, #0
  40b234:	dd04      	ble.n	40b240 <__gethex+0x3a8>
  40b236:	9805      	ldr	r0, [sp, #20]
  40b238:	4639      	mov	r1, r7
  40b23a:	f000 fdbd 	bl	40bdb8 <__any_on>
  40b23e:	4606      	mov	r6, r0
  40b240:	9808      	ldr	r0, [sp, #32]
  40b242:	117b      	asrs	r3, r7, #5
  40b244:	2201      	movs	r2, #1
  40b246:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  40b24a:	9805      	ldr	r0, [sp, #20]
  40b24c:	f007 071f 	and.w	r7, r7, #31
  40b250:	40ba      	lsls	r2, r7
  40b252:	421a      	tst	r2, r3
  40b254:	4629      	mov	r1, r5
  40b256:	bf18      	it	ne
  40b258:	f046 0602 	orrne.w	r6, r6, #2
  40b25c:	f7ff fdcc 	bl	40adf8 <rshift>
  40b260:	9b06      	ldr	r3, [sp, #24]
  40b262:	685b      	ldr	r3, [r3, #4]
  40b264:	9304      	str	r3, [sp, #16]
  40b266:	1b64      	subs	r4, r4, r5
  40b268:	2502      	movs	r5, #2
  40b26a:	e77f      	b.n	40b16c <__gethex+0x2d4>
  40b26c:	9903      	ldr	r1, [sp, #12]
  40b26e:	5c63      	ldrb	r3, [r4, r1]
  40b270:	5cf2      	ldrb	r2, [r6, r3]
  40b272:	468b      	mov	fp, r1
  40b274:	44a3      	add	fp, r4
  40b276:	2a00      	cmp	r2, #0
  40b278:	f000 8081 	beq.w	40b37e <__gethex+0x4e6>
  40b27c:	f10b 0201 	add.w	r2, fp, #1
  40b280:	4614      	mov	r4, r2
  40b282:	3201      	adds	r2, #1
  40b284:	7823      	ldrb	r3, [r4, #0]
  40b286:	5cf1      	ldrb	r1, [r6, r3]
  40b288:	2900      	cmp	r1, #0
  40b28a:	d1f9      	bne.n	40b280 <__gethex+0x3e8>
  40b28c:	e646      	b.n	40af1c <__gethex+0x84>
  40b28e:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40b290:	f1c2 0201 	rsb	r2, r2, #1
  40b294:	9215      	str	r2, [sp, #84]	; 0x54
  40b296:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40b298:	2b00      	cmp	r3, #0
  40b29a:	f43f af73 	beq.w	40b184 <__gethex+0x2ec>
  40b29e:	9b05      	ldr	r3, [sp, #20]
  40b2a0:	9f08      	ldr	r7, [sp, #32]
  40b2a2:	691e      	ldr	r6, [r3, #16]
  40b2a4:	9b08      	ldr	r3, [sp, #32]
  40b2a6:	ea4f 0886 	mov.w	r8, r6, lsl #2
  40b2aa:	4447      	add	r7, r8
  40b2ac:	2000      	movs	r0, #0
  40b2ae:	e003      	b.n	40b2b8 <__gethex+0x420>
  40b2b0:	429f      	cmp	r7, r3
  40b2b2:	f843 0c04 	str.w	r0, [r3, #-4]
  40b2b6:	d94a      	bls.n	40b34e <__gethex+0x4b6>
  40b2b8:	4619      	mov	r1, r3
  40b2ba:	f853 2b04 	ldr.w	r2, [r3], #4
  40b2be:	f1b2 3fff 	cmp.w	r2, #4294967295
  40b2c2:	d0f5      	beq.n	40b2b0 <__gethex+0x418>
  40b2c4:	3201      	adds	r2, #1
  40b2c6:	9f08      	ldr	r7, [sp, #32]
  40b2c8:	600a      	str	r2, [r1, #0]
  40b2ca:	2d02      	cmp	r5, #2
  40b2cc:	d04d      	beq.n	40b36a <__gethex+0x4d2>
  40b2ce:	9a05      	ldr	r2, [sp, #20]
  40b2d0:	6913      	ldr	r3, [r2, #16]
  40b2d2:	429e      	cmp	r6, r3
  40b2d4:	f6ff af27 	blt.w	40b126 <__gethex+0x28e>
  40b2d8:	f014 041f 	ands.w	r4, r4, #31
  40b2dc:	f47f af19 	bne.w	40b112 <__gethex+0x27a>
  40b2e0:	2521      	movs	r5, #33	; 0x21
  40b2e2:	e751      	b.n	40b188 <__gethex+0x2f0>
  40b2e4:	2601      	movs	r6, #1
  40b2e6:	e7ab      	b.n	40b240 <__gethex+0x3a8>
  40b2e8:	9915      	ldr	r1, [sp, #84]	; 0x54
  40b2ea:	2900      	cmp	r1, #0
  40b2ec:	f43f aea9 	beq.w	40b042 <__gethex+0x1aa>
  40b2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
  40b2f2:	9914      	ldr	r1, [sp, #80]	; 0x50
  40b2f4:	6003      	str	r3, [r0, #0]
  40b2f6:	9b05      	ldr	r3, [sp, #20]
  40b2f8:	2201      	movs	r2, #1
  40b2fa:	611a      	str	r2, [r3, #16]
  40b2fc:	9b08      	ldr	r3, [sp, #32]
  40b2fe:	601a      	str	r2, [r3, #0]
  40b300:	9b05      	ldr	r3, [sp, #20]
  40b302:	600b      	str	r3, [r1, #0]
  40b304:	2062      	movs	r0, #98	; 0x62
  40b306:	e61e      	b.n	40af46 <__gethex+0xae>
  40b308:	07b2      	lsls	r2, r6, #30
  40b30a:	f57f af3b 	bpl.w	40b184 <__gethex+0x2ec>
  40b30e:	9908      	ldr	r1, [sp, #32]
  40b310:	680b      	ldr	r3, [r1, #0]
  40b312:	4333      	orrs	r3, r6
  40b314:	07db      	lsls	r3, r3, #31
  40b316:	d4c2      	bmi.n	40b29e <__gethex+0x406>
  40b318:	e734      	b.n	40b184 <__gethex+0x2ec>
  40b31a:	f8dd b020 	ldr.w	fp, [sp, #32]
  40b31e:	f04f 0900 	mov.w	r9, #0
  40b322:	e65e      	b.n	40afe2 <__gethex+0x14a>
  40b324:	2602      	movs	r6, #2
  40b326:	e75d      	b.n	40b1e4 <__gethex+0x34c>
  40b328:	42a5      	cmp	r5, r4
  40b32a:	f47f ae8a 	bne.w	40b042 <__gethex+0x1aa>
  40b32e:	2c01      	cmp	r4, #1
  40b330:	ddde      	ble.n	40b2f0 <__gethex+0x458>
  40b332:	1e61      	subs	r1, r4, #1
  40b334:	9805      	ldr	r0, [sp, #20]
  40b336:	f000 fd3f 	bl	40bdb8 <__any_on>
  40b33a:	2800      	cmp	r0, #0
  40b33c:	f43f ae81 	beq.w	40b042 <__gethex+0x1aa>
  40b340:	9a06      	ldr	r2, [sp, #24]
  40b342:	6853      	ldr	r3, [r2, #4]
  40b344:	e7d4      	b.n	40b2f0 <__gethex+0x458>
  40b346:	9815      	ldr	r0, [sp, #84]	; 0x54
  40b348:	2800      	cmp	r0, #0
  40b34a:	d0d1      	beq.n	40b2f0 <__gethex+0x458>
  40b34c:	e679      	b.n	40b042 <__gethex+0x1aa>
  40b34e:	9805      	ldr	r0, [sp, #20]
  40b350:	6883      	ldr	r3, [r0, #8]
  40b352:	429e      	cmp	r6, r3
  40b354:	da15      	bge.n	40b382 <__gethex+0x4ea>
  40b356:	9f08      	ldr	r7, [sp, #32]
  40b358:	4633      	mov	r3, r6
  40b35a:	9805      	ldr	r0, [sp, #20]
  40b35c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
  40b360:	2101      	movs	r1, #1
  40b362:	3301      	adds	r3, #1
  40b364:	6103      	str	r3, [r0, #16]
  40b366:	6151      	str	r1, [r2, #20]
  40b368:	e7af      	b.n	40b2ca <__gethex+0x432>
  40b36a:	9906      	ldr	r1, [sp, #24]
  40b36c:	680b      	ldr	r3, [r1, #0]
  40b36e:	3b01      	subs	r3, #1
  40b370:	42a3      	cmp	r3, r4
  40b372:	d01c      	beq.n	40b3ae <__gethex+0x516>
  40b374:	2522      	movs	r5, #34	; 0x22
  40b376:	e707      	b.n	40b188 <__gethex+0x2f0>
  40b378:	4613      	mov	r3, r2
  40b37a:	4625      	mov	r5, r4
  40b37c:	e6c1      	b.n	40b102 <__gethex+0x26a>
  40b37e:	465c      	mov	r4, fp
  40b380:	e5cc      	b.n	40af1c <__gethex+0x84>
  40b382:	6841      	ldr	r1, [r0, #4]
  40b384:	9807      	ldr	r0, [sp, #28]
  40b386:	3101      	adds	r1, #1
  40b388:	f000 f8fa 	bl	40b580 <_Balloc>
  40b38c:	9905      	ldr	r1, [sp, #20]
  40b38e:	690b      	ldr	r3, [r1, #16]
  40b390:	1c9a      	adds	r2, r3, #2
  40b392:	4607      	mov	r7, r0
  40b394:	0092      	lsls	r2, r2, #2
  40b396:	310c      	adds	r1, #12
  40b398:	300c      	adds	r0, #12
  40b39a:	f7f8 f93b 	bl	403614 <memcpy>
  40b39e:	9807      	ldr	r0, [sp, #28]
  40b3a0:	9905      	ldr	r1, [sp, #20]
  40b3a2:	f000 f913 	bl	40b5cc <_Bfree>
  40b3a6:	9705      	str	r7, [sp, #20]
  40b3a8:	693b      	ldr	r3, [r7, #16]
  40b3aa:	3714      	adds	r7, #20
  40b3ac:	e7d5      	b.n	40b35a <__gethex+0x4c2>
  40b3ae:	1163      	asrs	r3, r4, #5
  40b3b0:	2201      	movs	r2, #1
  40b3b2:	f004 041f 	and.w	r4, r4, #31
  40b3b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
  40b3ba:	40a2      	lsls	r2, r4
  40b3bc:	421a      	tst	r2, r3
  40b3be:	bf14      	ite	ne
  40b3c0:	2521      	movne	r5, #33	; 0x21
  40b3c2:	2522      	moveq	r5, #34	; 0x22
  40b3c4:	e6e0      	b.n	40b188 <__gethex+0x2f0>
  40b3c6:	bf00      	nop

0040b3c8 <__hexnan>:
  40b3c8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40b3cc:	680b      	ldr	r3, [r1, #0]
  40b3ce:	f8df 8188 	ldr.w	r8, [pc, #392]	; 40b558 <__hexnan+0x190>
  40b3d2:	b084      	sub	sp, #16
  40b3d4:	4691      	mov	r9, r2
  40b3d6:	115a      	asrs	r2, r3, #5
  40b3d8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
  40b3dc:	f013 031f 	ands.w	r3, r3, #31
  40b3e0:	9200      	str	r2, [sp, #0]
  40b3e2:	9001      	str	r0, [sp, #4]
  40b3e4:	bf1c      	itt	ne
  40b3e6:	3204      	addne	r2, #4
  40b3e8:	9200      	strne	r2, [sp, #0]
  40b3ea:	9a01      	ldr	r2, [sp, #4]
  40b3ec:	9800      	ldr	r0, [sp, #0]
  40b3ee:	9303      	str	r3, [sp, #12]
  40b3f0:	6811      	ldr	r1, [r2, #0]
  40b3f2:	2300      	movs	r3, #0
  40b3f4:	f840 3c04 	str.w	r3, [r0, #-4]
  40b3f8:	469a      	mov	sl, r3
  40b3fa:	461d      	mov	r5, r3
  40b3fc:	461e      	mov	r6, r3
  40b3fe:	784b      	ldrb	r3, [r1, #1]
  40b400:	1f07      	subs	r7, r0, #4
  40b402:	46bc      	mov	ip, r7
  40b404:	4638      	mov	r0, r7
  40b406:	9702      	str	r7, [sp, #8]
  40b408:	b33b      	cbz	r3, 40b45a <__hexnan+0x92>
  40b40a:	f818 2003 	ldrb.w	r2, [r8, r3]
  40b40e:	2a00      	cmp	r2, #0
  40b410:	d148      	bne.n	40b4a4 <__hexnan+0xdc>
  40b412:	2b20      	cmp	r3, #32
  40b414:	d866      	bhi.n	40b4e4 <__hexnan+0x11c>
  40b416:	42ae      	cmp	r6, r5
  40b418:	dd1b      	ble.n	40b452 <__hexnan+0x8a>
  40b41a:	4560      	cmp	r0, ip
  40b41c:	d215      	bcs.n	40b44a <__hexnan+0x82>
  40b41e:	f1ba 0f07 	cmp.w	sl, #7
  40b422:	dc12      	bgt.n	40b44a <__hexnan+0x82>
  40b424:	f1ca 0a08 	rsb	sl, sl, #8
  40b428:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
  40b42c:	6802      	ldr	r2, [r0, #0]
  40b42e:	f1ca 0b20 	rsb	fp, sl, #32
  40b432:	4603      	mov	r3, r0
  40b434:	685c      	ldr	r4, [r3, #4]
  40b436:	fa04 f70b 	lsl.w	r7, r4, fp
  40b43a:	4317      	orrs	r7, r2
  40b43c:	fa24 f20a 	lsr.w	r2, r4, sl
  40b440:	601f      	str	r7, [r3, #0]
  40b442:	f843 2f04 	str.w	r2, [r3, #4]!
  40b446:	459c      	cmp	ip, r3
  40b448:	d8f4      	bhi.n	40b434 <__hexnan+0x6c>
  40b44a:	4548      	cmp	r0, r9
  40b44c:	d841      	bhi.n	40b4d2 <__hexnan+0x10a>
  40b44e:	f04f 0a08 	mov.w	sl, #8
  40b452:	3101      	adds	r1, #1
  40b454:	784b      	ldrb	r3, [r1, #1]
  40b456:	2b00      	cmp	r3, #0
  40b458:	d1d7      	bne.n	40b40a <__hexnan+0x42>
  40b45a:	9f02      	ldr	r7, [sp, #8]
  40b45c:	2e00      	cmp	r6, #0
  40b45e:	d044      	beq.n	40b4ea <__hexnan+0x122>
  40b460:	4560      	cmp	r0, ip
  40b462:	d202      	bcs.n	40b46a <__hexnan+0xa2>
  40b464:	f1ba 0f07 	cmp.w	sl, #7
  40b468:	dd62      	ble.n	40b530 <__hexnan+0x168>
  40b46a:	4581      	cmp	r9, r0
  40b46c:	d242      	bcs.n	40b4f4 <__hexnan+0x12c>
  40b46e:	464b      	mov	r3, r9
  40b470:	f850 2b04 	ldr.w	r2, [r0], #4
  40b474:	f843 2b04 	str.w	r2, [r3], #4
  40b478:	4287      	cmp	r7, r0
  40b47a:	d2f9      	bcs.n	40b470 <__hexnan+0xa8>
  40b47c:	2200      	movs	r2, #0
  40b47e:	f843 2b04 	str.w	r2, [r3], #4
  40b482:	429f      	cmp	r7, r3
  40b484:	d2fb      	bcs.n	40b47e <__hexnan+0xb6>
  40b486:	9800      	ldr	r0, [sp, #0]
  40b488:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b48c:	b92b      	cbnz	r3, 40b49a <__hexnan+0xd2>
  40b48e:	45b9      	cmp	r9, r7
  40b490:	d041      	beq.n	40b516 <__hexnan+0x14e>
  40b492:	f857 3d04 	ldr.w	r3, [r7, #-4]!
  40b496:	2b00      	cmp	r3, #0
  40b498:	d0f9      	beq.n	40b48e <__hexnan+0xc6>
  40b49a:	2005      	movs	r0, #5
  40b49c:	b004      	add	sp, #16
  40b49e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40b4a2:	4770      	bx	lr
  40b4a4:	f10a 0a01 	add.w	sl, sl, #1
  40b4a8:	f1ba 0f08 	cmp.w	sl, #8
  40b4ac:	f106 0601 	add.w	r6, r6, #1
  40b4b0:	dc06      	bgt.n	40b4c0 <__hexnan+0xf8>
  40b4b2:	6803      	ldr	r3, [r0, #0]
  40b4b4:	011b      	lsls	r3, r3, #4
  40b4b6:	f002 020f 	and.w	r2, r2, #15
  40b4ba:	431a      	orrs	r2, r3
  40b4bc:	6002      	str	r2, [r0, #0]
  40b4be:	e7c8      	b.n	40b452 <__hexnan+0x8a>
  40b4c0:	4548      	cmp	r0, r9
  40b4c2:	d9c6      	bls.n	40b452 <__hexnan+0x8a>
  40b4c4:	2300      	movs	r3, #0
  40b4c6:	f840 3c04 	str.w	r3, [r0, #-4]
  40b4ca:	f04f 0a01 	mov.w	sl, #1
  40b4ce:	3804      	subs	r0, #4
  40b4d0:	e7f1      	b.n	40b4b6 <__hexnan+0xee>
  40b4d2:	2300      	movs	r3, #0
  40b4d4:	f1a0 0c04 	sub.w	ip, r0, #4
  40b4d8:	f840 3c04 	str.w	r3, [r0, #-4]
  40b4dc:	4635      	mov	r5, r6
  40b4de:	4660      	mov	r0, ip
  40b4e0:	469a      	mov	sl, r3
  40b4e2:	e7b6      	b.n	40b452 <__hexnan+0x8a>
  40b4e4:	2b29      	cmp	r3, #41	; 0x29
  40b4e6:	9f02      	ldr	r7, [sp, #8]
  40b4e8:	d01c      	beq.n	40b524 <__hexnan+0x15c>
  40b4ea:	2004      	movs	r0, #4
  40b4ec:	b004      	add	sp, #16
  40b4ee:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40b4f2:	4770      	bx	lr
  40b4f4:	9a03      	ldr	r2, [sp, #12]
  40b4f6:	2a00      	cmp	r2, #0
  40b4f8:	d0c5      	beq.n	40b486 <__hexnan+0xbe>
  40b4fa:	9b03      	ldr	r3, [sp, #12]
  40b4fc:	9800      	ldr	r0, [sp, #0]
  40b4fe:	f1c3 0220 	rsb	r2, r3, #32
  40b502:	f04f 31ff 	mov.w	r1, #4294967295
  40b506:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b50a:	fa21 f202 	lsr.w	r2, r1, r2
  40b50e:	4013      	ands	r3, r2
  40b510:	f840 3c04 	str.w	r3, [r0, #-4]
  40b514:	e7ba      	b.n	40b48c <__hexnan+0xc4>
  40b516:	2301      	movs	r3, #1
  40b518:	2005      	movs	r0, #5
  40b51a:	603b      	str	r3, [r7, #0]
  40b51c:	b004      	add	sp, #16
  40b51e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40b522:	4770      	bx	lr
  40b524:	9a01      	ldr	r2, [sp, #4]
  40b526:	3102      	adds	r1, #2
  40b528:	6011      	str	r1, [r2, #0]
  40b52a:	2e00      	cmp	r6, #0
  40b52c:	d198      	bne.n	40b460 <__hexnan+0x98>
  40b52e:	e7dc      	b.n	40b4ea <__hexnan+0x122>
  40b530:	f1ca 0508 	rsb	r5, sl, #8
  40b534:	00ad      	lsls	r5, r5, #2
  40b536:	6802      	ldr	r2, [r0, #0]
  40b538:	f1c5 0620 	rsb	r6, r5, #32
  40b53c:	4603      	mov	r3, r0
  40b53e:	6859      	ldr	r1, [r3, #4]
  40b540:	fa01 f406 	lsl.w	r4, r1, r6
  40b544:	4314      	orrs	r4, r2
  40b546:	fa21 f205 	lsr.w	r2, r1, r5
  40b54a:	601c      	str	r4, [r3, #0]
  40b54c:	f843 2f04 	str.w	r2, [r3, #4]!
  40b550:	4563      	cmp	r3, ip
  40b552:	d3f4      	bcc.n	40b53e <__hexnan+0x176>
  40b554:	e789      	b.n	40b46a <__hexnan+0xa2>
  40b556:	bf00      	nop
  40b558:	0040d304 	.word	0x0040d304

0040b55c <_isatty_r>:
  40b55c:	b538      	push	{r3, r4, r5, lr}
  40b55e:	4c07      	ldr	r4, [pc, #28]	; (40b57c <_isatty_r+0x20>)
  40b560:	2300      	movs	r3, #0
  40b562:	4605      	mov	r5, r0
  40b564:	4608      	mov	r0, r1
  40b566:	6023      	str	r3, [r4, #0]
  40b568:	f7f7 fdea 	bl	403140 <_isatty>
  40b56c:	1c43      	adds	r3, r0, #1
  40b56e:	d000      	beq.n	40b572 <_isatty_r+0x16>
  40b570:	bd38      	pop	{r3, r4, r5, pc}
  40b572:	6823      	ldr	r3, [r4, #0]
  40b574:	2b00      	cmp	r3, #0
  40b576:	d0fb      	beq.n	40b570 <_isatty_r+0x14>
  40b578:	602b      	str	r3, [r5, #0]
  40b57a:	bd38      	pop	{r3, r4, r5, pc}
  40b57c:	2000c7bc 	.word	0x2000c7bc

0040b580 <_Balloc>:
  40b580:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  40b582:	b570      	push	{r4, r5, r6, lr}
  40b584:	4605      	mov	r5, r0
  40b586:	460c      	mov	r4, r1
  40b588:	b14a      	cbz	r2, 40b59e <_Balloc+0x1e>
  40b58a:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40b58e:	b180      	cbz	r0, 40b5b2 <_Balloc+0x32>
  40b590:	6801      	ldr	r1, [r0, #0]
  40b592:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40b596:	2200      	movs	r2, #0
  40b598:	6102      	str	r2, [r0, #16]
  40b59a:	60c2      	str	r2, [r0, #12]
  40b59c:	bd70      	pop	{r4, r5, r6, pc}
  40b59e:	2221      	movs	r2, #33	; 0x21
  40b5a0:	2104      	movs	r1, #4
  40b5a2:	f000 fcb9 	bl	40bf18 <_calloc_r>
  40b5a6:	64e8      	str	r0, [r5, #76]	; 0x4c
  40b5a8:	4602      	mov	r2, r0
  40b5aa:	2800      	cmp	r0, #0
  40b5ac:	d1ed      	bne.n	40b58a <_Balloc+0xa>
  40b5ae:	2000      	movs	r0, #0
  40b5b0:	bd70      	pop	{r4, r5, r6, pc}
  40b5b2:	2101      	movs	r1, #1
  40b5b4:	fa01 f604 	lsl.w	r6, r1, r4
  40b5b8:	1d72      	adds	r2, r6, #5
  40b5ba:	4628      	mov	r0, r5
  40b5bc:	0092      	lsls	r2, r2, #2
  40b5be:	f000 fcab 	bl	40bf18 <_calloc_r>
  40b5c2:	2800      	cmp	r0, #0
  40b5c4:	d0f3      	beq.n	40b5ae <_Balloc+0x2e>
  40b5c6:	6044      	str	r4, [r0, #4]
  40b5c8:	6086      	str	r6, [r0, #8]
  40b5ca:	e7e4      	b.n	40b596 <_Balloc+0x16>

0040b5cc <_Bfree>:
  40b5cc:	b131      	cbz	r1, 40b5dc <_Bfree+0x10>
  40b5ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40b5d0:	684a      	ldr	r2, [r1, #4]
  40b5d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40b5d6:	6008      	str	r0, [r1, #0]
  40b5d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40b5dc:	4770      	bx	lr
  40b5de:	bf00      	nop

0040b5e0 <__multadd>:
  40b5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40b5e4:	f8d1 8010 	ldr.w	r8, [r1, #16]
  40b5e8:	b082      	sub	sp, #8
  40b5ea:	4689      	mov	r9, r1
  40b5ec:	4682      	mov	sl, r0
  40b5ee:	f101 0514 	add.w	r5, r1, #20
  40b5f2:	2400      	movs	r4, #0
  40b5f4:	682f      	ldr	r7, [r5, #0]
  40b5f6:	b2be      	uxth	r6, r7
  40b5f8:	0c3f      	lsrs	r7, r7, #16
  40b5fa:	fb02 3606 	mla	r6, r2, r6, r3
  40b5fe:	fb02 f307 	mul.w	r3, r2, r7
  40b602:	eb03 4316 	add.w	r3, r3, r6, lsr #16
  40b606:	3401      	adds	r4, #1
  40b608:	b2b6      	uxth	r6, r6
  40b60a:	eb06 4603 	add.w	r6, r6, r3, lsl #16
  40b60e:	45a0      	cmp	r8, r4
  40b610:	f845 6b04 	str.w	r6, [r5], #4
  40b614:	ea4f 4313 	mov.w	r3, r3, lsr #16
  40b618:	dcec      	bgt.n	40b5f4 <__multadd+0x14>
  40b61a:	b153      	cbz	r3, 40b632 <__multadd+0x52>
  40b61c:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40b620:	4590      	cmp	r8, r2
  40b622:	da0a      	bge.n	40b63a <__multadd+0x5a>
  40b624:	eb09 0188 	add.w	r1, r9, r8, lsl #2
  40b628:	f108 0201 	add.w	r2, r8, #1
  40b62c:	614b      	str	r3, [r1, #20]
  40b62e:	f8c9 2010 	str.w	r2, [r9, #16]
  40b632:	4648      	mov	r0, r9
  40b634:	b002      	add	sp, #8
  40b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40b63a:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40b63e:	9301      	str	r3, [sp, #4]
  40b640:	3101      	adds	r1, #1
  40b642:	4650      	mov	r0, sl
  40b644:	f7ff ff9c 	bl	40b580 <_Balloc>
  40b648:	f8d9 2010 	ldr.w	r2, [r9, #16]
  40b64c:	3202      	adds	r2, #2
  40b64e:	f109 010c 	add.w	r1, r9, #12
  40b652:	4604      	mov	r4, r0
  40b654:	0092      	lsls	r2, r2, #2
  40b656:	300c      	adds	r0, #12
  40b658:	f7f7 ffdc 	bl	403614 <memcpy>
  40b65c:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
  40b660:	f8d9 1004 	ldr.w	r1, [r9, #4]
  40b664:	9b01      	ldr	r3, [sp, #4]
  40b666:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40b66a:	f8c9 0000 	str.w	r0, [r9]
  40b66e:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
  40b672:	46a1      	mov	r9, r4
  40b674:	e7d6      	b.n	40b624 <__multadd+0x44>
  40b676:	bf00      	nop

0040b678 <__s2b>:
  40b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b67c:	4699      	mov	r9, r3
  40b67e:	4b23      	ldr	r3, [pc, #140]	; (40b70c <__s2b+0x94>)
  40b680:	9e08      	ldr	r6, [sp, #32]
  40b682:	f109 0408 	add.w	r4, r9, #8
  40b686:	fb83 5304 	smull	r5, r3, r3, r4
  40b68a:	17e4      	asrs	r4, r4, #31
  40b68c:	ebc4 0363 	rsb	r3, r4, r3, asr #1
  40b690:	2b01      	cmp	r3, #1
  40b692:	4607      	mov	r7, r0
  40b694:	460c      	mov	r4, r1
  40b696:	4690      	mov	r8, r2
  40b698:	dd35      	ble.n	40b706 <__s2b+0x8e>
  40b69a:	2501      	movs	r5, #1
  40b69c:	2100      	movs	r1, #0
  40b69e:	006d      	lsls	r5, r5, #1
  40b6a0:	42ab      	cmp	r3, r5
  40b6a2:	f101 0101 	add.w	r1, r1, #1
  40b6a6:	dcfa      	bgt.n	40b69e <__s2b+0x26>
  40b6a8:	4638      	mov	r0, r7
  40b6aa:	f7ff ff69 	bl	40b580 <_Balloc>
  40b6ae:	2301      	movs	r3, #1
  40b6b0:	f1b8 0f09 	cmp.w	r8, #9
  40b6b4:	6146      	str	r6, [r0, #20]
  40b6b6:	6103      	str	r3, [r0, #16]
  40b6b8:	dd21      	ble.n	40b6fe <__s2b+0x86>
  40b6ba:	f104 0609 	add.w	r6, r4, #9
  40b6be:	4635      	mov	r5, r6
  40b6c0:	4444      	add	r4, r8
  40b6c2:	f815 3b01 	ldrb.w	r3, [r5], #1
  40b6c6:	4601      	mov	r1, r0
  40b6c8:	3b30      	subs	r3, #48	; 0x30
  40b6ca:	4638      	mov	r0, r7
  40b6cc:	220a      	movs	r2, #10
  40b6ce:	f7ff ff87 	bl	40b5e0 <__multadd>
  40b6d2:	42a5      	cmp	r5, r4
  40b6d4:	d1f5      	bne.n	40b6c2 <__s2b+0x4a>
  40b6d6:	eb06 0408 	add.w	r4, r6, r8
  40b6da:	3c08      	subs	r4, #8
  40b6dc:	45c1      	cmp	r9, r8
  40b6de:	dd0c      	ble.n	40b6fa <__s2b+0x82>
  40b6e0:	ebc8 0809 	rsb	r8, r8, r9
  40b6e4:	44a0      	add	r8, r4
  40b6e6:	f814 3b01 	ldrb.w	r3, [r4], #1
  40b6ea:	4601      	mov	r1, r0
  40b6ec:	3b30      	subs	r3, #48	; 0x30
  40b6ee:	4638      	mov	r0, r7
  40b6f0:	220a      	movs	r2, #10
  40b6f2:	f7ff ff75 	bl	40b5e0 <__multadd>
  40b6f6:	4544      	cmp	r4, r8
  40b6f8:	d1f5      	bne.n	40b6e6 <__s2b+0x6e>
  40b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b6fe:	340a      	adds	r4, #10
  40b700:	f04f 0809 	mov.w	r8, #9
  40b704:	e7ea      	b.n	40b6dc <__s2b+0x64>
  40b706:	2100      	movs	r1, #0
  40b708:	e7ce      	b.n	40b6a8 <__s2b+0x30>
  40b70a:	bf00      	nop
  40b70c:	38e38e39 	.word	0x38e38e39

0040b710 <__hi0bits>:
  40b710:	0c03      	lsrs	r3, r0, #16
  40b712:	041b      	lsls	r3, r3, #16
  40b714:	b9b3      	cbnz	r3, 40b744 <__hi0bits+0x34>
  40b716:	0400      	lsls	r0, r0, #16
  40b718:	2310      	movs	r3, #16
  40b71a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40b71e:	bf04      	itt	eq
  40b720:	0200      	lsleq	r0, r0, #8
  40b722:	3308      	addeq	r3, #8
  40b724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  40b728:	bf04      	itt	eq
  40b72a:	0100      	lsleq	r0, r0, #4
  40b72c:	3304      	addeq	r3, #4
  40b72e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40b732:	bf04      	itt	eq
  40b734:	0080      	lsleq	r0, r0, #2
  40b736:	3302      	addeq	r3, #2
  40b738:	2800      	cmp	r0, #0
  40b73a:	db07      	blt.n	40b74c <__hi0bits+0x3c>
  40b73c:	0042      	lsls	r2, r0, #1
  40b73e:	d403      	bmi.n	40b748 <__hi0bits+0x38>
  40b740:	2020      	movs	r0, #32
  40b742:	4770      	bx	lr
  40b744:	2300      	movs	r3, #0
  40b746:	e7e8      	b.n	40b71a <__hi0bits+0xa>
  40b748:	1c58      	adds	r0, r3, #1
  40b74a:	4770      	bx	lr
  40b74c:	4618      	mov	r0, r3
  40b74e:	4770      	bx	lr

0040b750 <__lo0bits>:
  40b750:	6803      	ldr	r3, [r0, #0]
  40b752:	f013 0207 	ands.w	r2, r3, #7
  40b756:	d007      	beq.n	40b768 <__lo0bits+0x18>
  40b758:	07d9      	lsls	r1, r3, #31
  40b75a:	d420      	bmi.n	40b79e <__lo0bits+0x4e>
  40b75c:	079a      	lsls	r2, r3, #30
  40b75e:	d420      	bmi.n	40b7a2 <__lo0bits+0x52>
  40b760:	089b      	lsrs	r3, r3, #2
  40b762:	6003      	str	r3, [r0, #0]
  40b764:	2002      	movs	r0, #2
  40b766:	4770      	bx	lr
  40b768:	b299      	uxth	r1, r3
  40b76a:	b909      	cbnz	r1, 40b770 <__lo0bits+0x20>
  40b76c:	0c1b      	lsrs	r3, r3, #16
  40b76e:	2210      	movs	r2, #16
  40b770:	f013 0fff 	tst.w	r3, #255	; 0xff
  40b774:	bf04      	itt	eq
  40b776:	0a1b      	lsreq	r3, r3, #8
  40b778:	3208      	addeq	r2, #8
  40b77a:	0719      	lsls	r1, r3, #28
  40b77c:	bf04      	itt	eq
  40b77e:	091b      	lsreq	r3, r3, #4
  40b780:	3204      	addeq	r2, #4
  40b782:	0799      	lsls	r1, r3, #30
  40b784:	bf04      	itt	eq
  40b786:	089b      	lsreq	r3, r3, #2
  40b788:	3202      	addeq	r2, #2
  40b78a:	07d9      	lsls	r1, r3, #31
  40b78c:	d404      	bmi.n	40b798 <__lo0bits+0x48>
  40b78e:	085b      	lsrs	r3, r3, #1
  40b790:	d101      	bne.n	40b796 <__lo0bits+0x46>
  40b792:	2020      	movs	r0, #32
  40b794:	4770      	bx	lr
  40b796:	3201      	adds	r2, #1
  40b798:	6003      	str	r3, [r0, #0]
  40b79a:	4610      	mov	r0, r2
  40b79c:	4770      	bx	lr
  40b79e:	2000      	movs	r0, #0
  40b7a0:	4770      	bx	lr
  40b7a2:	085b      	lsrs	r3, r3, #1
  40b7a4:	6003      	str	r3, [r0, #0]
  40b7a6:	2001      	movs	r0, #1
  40b7a8:	4770      	bx	lr
  40b7aa:	bf00      	nop

0040b7ac <__i2b>:
  40b7ac:	b510      	push	{r4, lr}
  40b7ae:	460c      	mov	r4, r1
  40b7b0:	2101      	movs	r1, #1
  40b7b2:	f7ff fee5 	bl	40b580 <_Balloc>
  40b7b6:	2201      	movs	r2, #1
  40b7b8:	6144      	str	r4, [r0, #20]
  40b7ba:	6102      	str	r2, [r0, #16]
  40b7bc:	bd10      	pop	{r4, pc}
  40b7be:	bf00      	nop

0040b7c0 <__multiply>:
  40b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7c4:	690d      	ldr	r5, [r1, #16]
  40b7c6:	f8d2 9010 	ldr.w	r9, [r2, #16]
  40b7ca:	454d      	cmp	r5, r9
  40b7cc:	b085      	sub	sp, #20
  40b7ce:	460c      	mov	r4, r1
  40b7d0:	4692      	mov	sl, r2
  40b7d2:	da04      	bge.n	40b7de <__multiply+0x1e>
  40b7d4:	462a      	mov	r2, r5
  40b7d6:	4654      	mov	r4, sl
  40b7d8:	464d      	mov	r5, r9
  40b7da:	468a      	mov	sl, r1
  40b7dc:	4691      	mov	r9, r2
  40b7de:	68a3      	ldr	r3, [r4, #8]
  40b7e0:	6861      	ldr	r1, [r4, #4]
  40b7e2:	eb05 0709 	add.w	r7, r5, r9
  40b7e6:	429f      	cmp	r7, r3
  40b7e8:	bfc8      	it	gt
  40b7ea:	3101      	addgt	r1, #1
  40b7ec:	f7ff fec8 	bl	40b580 <_Balloc>
  40b7f0:	f100 0614 	add.w	r6, r0, #20
  40b7f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  40b7f8:	4546      	cmp	r6, r8
  40b7fa:	9001      	str	r0, [sp, #4]
  40b7fc:	d205      	bcs.n	40b80a <__multiply+0x4a>
  40b7fe:	4633      	mov	r3, r6
  40b800:	2000      	movs	r0, #0
  40b802:	f843 0b04 	str.w	r0, [r3], #4
  40b806:	4598      	cmp	r8, r3
  40b808:	d8fb      	bhi.n	40b802 <__multiply+0x42>
  40b80a:	f10a 0c14 	add.w	ip, sl, #20
  40b80e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  40b812:	3414      	adds	r4, #20
  40b814:	45cc      	cmp	ip, r9
  40b816:	9400      	str	r4, [sp, #0]
  40b818:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  40b81c:	d25b      	bcs.n	40b8d6 <__multiply+0x116>
  40b81e:	f8cd 8008 	str.w	r8, [sp, #8]
  40b822:	9703      	str	r7, [sp, #12]
  40b824:	46c8      	mov	r8, r9
  40b826:	f85c 3b04 	ldr.w	r3, [ip], #4
  40b82a:	b29c      	uxth	r4, r3
  40b82c:	b324      	cbz	r4, 40b878 <__multiply+0xb8>
  40b82e:	9a00      	ldr	r2, [sp, #0]
  40b830:	4633      	mov	r3, r6
  40b832:	f04f 0900 	mov.w	r9, #0
  40b836:	e000      	b.n	40b83a <__multiply+0x7a>
  40b838:	460b      	mov	r3, r1
  40b83a:	f852 7b04 	ldr.w	r7, [r2], #4
  40b83e:	6819      	ldr	r1, [r3, #0]
  40b840:	fa1f fb87 	uxth.w	fp, r7
  40b844:	fa1f fa81 	uxth.w	sl, r1
  40b848:	0c38      	lsrs	r0, r7, #16
  40b84a:	0c09      	lsrs	r1, r1, #16
  40b84c:	fb04 a70b 	mla	r7, r4, fp, sl
  40b850:	44b9      	add	r9, r7
  40b852:	fb04 1000 	mla	r0, r4, r0, r1
  40b856:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  40b85a:	4619      	mov	r1, r3
  40b85c:	fa1f f989 	uxth.w	r9, r9
  40b860:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  40b864:	4295      	cmp	r5, r2
  40b866:	ea4f 4910 	mov.w	r9, r0, lsr #16
  40b86a:	f841 7b04 	str.w	r7, [r1], #4
  40b86e:	d8e3      	bhi.n	40b838 <__multiply+0x78>
  40b870:	f8c3 9004 	str.w	r9, [r3, #4]
  40b874:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  40b878:	ea5f 4913 	movs.w	r9, r3, lsr #16
  40b87c:	d024      	beq.n	40b8c8 <__multiply+0x108>
  40b87e:	f8d6 a000 	ldr.w	sl, [r6]
  40b882:	9b00      	ldr	r3, [sp, #0]
  40b884:	4650      	mov	r0, sl
  40b886:	4631      	mov	r1, r6
  40b888:	f04f 0b00 	mov.w	fp, #0
  40b88c:	e000      	b.n	40b890 <__multiply+0xd0>
  40b88e:	4611      	mov	r1, r2
  40b890:	881a      	ldrh	r2, [r3, #0]
  40b892:	0c00      	lsrs	r0, r0, #16
  40b894:	fb09 0002 	mla	r0, r9, r2, r0
  40b898:	4483      	add	fp, r0
  40b89a:	fa1f fa8a 	uxth.w	sl, sl
  40b89e:	460a      	mov	r2, r1
  40b8a0:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  40b8a4:	f842 0b04 	str.w	r0, [r2], #4
  40b8a8:	f853 7b04 	ldr.w	r7, [r3], #4
  40b8ac:	6848      	ldr	r0, [r1, #4]
  40b8ae:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40b8b2:	b284      	uxth	r4, r0
  40b8b4:	fb09 4a0a 	mla	sl, r9, sl, r4
  40b8b8:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  40b8bc:	429d      	cmp	r5, r3
  40b8be:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  40b8c2:	d8e4      	bhi.n	40b88e <__multiply+0xce>
  40b8c4:	f8c1 a004 	str.w	sl, [r1, #4]
  40b8c8:	45e0      	cmp	r8, ip
  40b8ca:	f106 0604 	add.w	r6, r6, #4
  40b8ce:	d8aa      	bhi.n	40b826 <__multiply+0x66>
  40b8d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
  40b8d4:	9f03      	ldr	r7, [sp, #12]
  40b8d6:	2f00      	cmp	r7, #0
  40b8d8:	dd0a      	ble.n	40b8f0 <__multiply+0x130>
  40b8da:	f858 3c04 	ldr.w	r3, [r8, #-4]
  40b8de:	f1a8 0804 	sub.w	r8, r8, #4
  40b8e2:	b11b      	cbz	r3, 40b8ec <__multiply+0x12c>
  40b8e4:	e004      	b.n	40b8f0 <__multiply+0x130>
  40b8e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  40b8ea:	b90b      	cbnz	r3, 40b8f0 <__multiply+0x130>
  40b8ec:	3f01      	subs	r7, #1
  40b8ee:	d1fa      	bne.n	40b8e6 <__multiply+0x126>
  40b8f0:	9b01      	ldr	r3, [sp, #4]
  40b8f2:	4618      	mov	r0, r3
  40b8f4:	611f      	str	r7, [r3, #16]
  40b8f6:	b005      	add	sp, #20
  40b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b8fc <__pow5mult>:
  40b8fc:	f012 0303 	ands.w	r3, r2, #3
  40b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b904:	4614      	mov	r4, r2
  40b906:	4607      	mov	r7, r0
  40b908:	460e      	mov	r6, r1
  40b90a:	d12c      	bne.n	40b966 <__pow5mult+0x6a>
  40b90c:	10a4      	asrs	r4, r4, #2
  40b90e:	d01c      	beq.n	40b94a <__pow5mult+0x4e>
  40b910:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  40b912:	2d00      	cmp	r5, #0
  40b914:	d030      	beq.n	40b978 <__pow5mult+0x7c>
  40b916:	f04f 0800 	mov.w	r8, #0
  40b91a:	e004      	b.n	40b926 <__pow5mult+0x2a>
  40b91c:	1064      	asrs	r4, r4, #1
  40b91e:	d014      	beq.n	40b94a <__pow5mult+0x4e>
  40b920:	6828      	ldr	r0, [r5, #0]
  40b922:	b1a8      	cbz	r0, 40b950 <__pow5mult+0x54>
  40b924:	4605      	mov	r5, r0
  40b926:	07e3      	lsls	r3, r4, #31
  40b928:	d5f8      	bpl.n	40b91c <__pow5mult+0x20>
  40b92a:	4638      	mov	r0, r7
  40b92c:	4631      	mov	r1, r6
  40b92e:	462a      	mov	r2, r5
  40b930:	f7ff ff46 	bl	40b7c0 <__multiply>
  40b934:	b1ae      	cbz	r6, 40b962 <__pow5mult+0x66>
  40b936:	6872      	ldr	r2, [r6, #4]
  40b938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40b93a:	1064      	asrs	r4, r4, #1
  40b93c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40b940:	6031      	str	r1, [r6, #0]
  40b942:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40b946:	4606      	mov	r6, r0
  40b948:	d1ea      	bne.n	40b920 <__pow5mult+0x24>
  40b94a:	4630      	mov	r0, r6
  40b94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40b950:	4638      	mov	r0, r7
  40b952:	4629      	mov	r1, r5
  40b954:	462a      	mov	r2, r5
  40b956:	f7ff ff33 	bl	40b7c0 <__multiply>
  40b95a:	6028      	str	r0, [r5, #0]
  40b95c:	f8c0 8000 	str.w	r8, [r0]
  40b960:	e7e0      	b.n	40b924 <__pow5mult+0x28>
  40b962:	4606      	mov	r6, r0
  40b964:	e7da      	b.n	40b91c <__pow5mult+0x20>
  40b966:	1e5d      	subs	r5, r3, #1
  40b968:	4a0a      	ldr	r2, [pc, #40]	; (40b994 <__pow5mult+0x98>)
  40b96a:	2300      	movs	r3, #0
  40b96c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
  40b970:	f7ff fe36 	bl	40b5e0 <__multadd>
  40b974:	4606      	mov	r6, r0
  40b976:	e7c9      	b.n	40b90c <__pow5mult+0x10>
  40b978:	2101      	movs	r1, #1
  40b97a:	4638      	mov	r0, r7
  40b97c:	f7ff fe00 	bl	40b580 <_Balloc>
  40b980:	f240 2171 	movw	r1, #625	; 0x271
  40b984:	2201      	movs	r2, #1
  40b986:	2300      	movs	r3, #0
  40b988:	6141      	str	r1, [r0, #20]
  40b98a:	6102      	str	r2, [r0, #16]
  40b98c:	4605      	mov	r5, r0
  40b98e:	64b8      	str	r0, [r7, #72]	; 0x48
  40b990:	6003      	str	r3, [r0, #0]
  40b992:	e7c0      	b.n	40b916 <__pow5mult+0x1a>
  40b994:	0040d4f8 	.word	0x0040d4f8

0040b998 <__lshift>:
  40b998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b99c:	4693      	mov	fp, r2
  40b99e:	690a      	ldr	r2, [r1, #16]
  40b9a0:	688b      	ldr	r3, [r1, #8]
  40b9a2:	ea4f 1a6b 	mov.w	sl, fp, asr #5
  40b9a6:	eb0a 0902 	add.w	r9, sl, r2
  40b9aa:	f109 0601 	add.w	r6, r9, #1
  40b9ae:	429e      	cmp	r6, r3
  40b9b0:	460f      	mov	r7, r1
  40b9b2:	4680      	mov	r8, r0
  40b9b4:	6849      	ldr	r1, [r1, #4]
  40b9b6:	dd04      	ble.n	40b9c2 <__lshift+0x2a>
  40b9b8:	005b      	lsls	r3, r3, #1
  40b9ba:	429e      	cmp	r6, r3
  40b9bc:	f101 0101 	add.w	r1, r1, #1
  40b9c0:	dcfa      	bgt.n	40b9b8 <__lshift+0x20>
  40b9c2:	4640      	mov	r0, r8
  40b9c4:	f7ff fddc 	bl	40b580 <_Balloc>
  40b9c8:	f1ba 0f00 	cmp.w	sl, #0
  40b9cc:	f100 0414 	add.w	r4, r0, #20
  40b9d0:	dd09      	ble.n	40b9e6 <__lshift+0x4e>
  40b9d2:	2300      	movs	r3, #0
  40b9d4:	461a      	mov	r2, r3
  40b9d6:	4625      	mov	r5, r4
  40b9d8:	3301      	adds	r3, #1
  40b9da:	4553      	cmp	r3, sl
  40b9dc:	f845 2b04 	str.w	r2, [r5], #4
  40b9e0:	d1fa      	bne.n	40b9d8 <__lshift+0x40>
  40b9e2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  40b9e6:	693a      	ldr	r2, [r7, #16]
  40b9e8:	f107 0314 	add.w	r3, r7, #20
  40b9ec:	f01b 0b1f 	ands.w	fp, fp, #31
  40b9f0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  40b9f4:	d021      	beq.n	40ba3a <__lshift+0xa2>
  40b9f6:	f1cb 0a20 	rsb	sl, fp, #32
  40b9fa:	2200      	movs	r2, #0
  40b9fc:	e000      	b.n	40ba00 <__lshift+0x68>
  40b9fe:	462c      	mov	r4, r5
  40ba00:	6819      	ldr	r1, [r3, #0]
  40ba02:	4625      	mov	r5, r4
  40ba04:	fa01 f10b 	lsl.w	r1, r1, fp
  40ba08:	430a      	orrs	r2, r1
  40ba0a:	f845 2b04 	str.w	r2, [r5], #4
  40ba0e:	f853 2b04 	ldr.w	r2, [r3], #4
  40ba12:	4563      	cmp	r3, ip
  40ba14:	fa22 f20a 	lsr.w	r2, r2, sl
  40ba18:	d3f1      	bcc.n	40b9fe <__lshift+0x66>
  40ba1a:	6062      	str	r2, [r4, #4]
  40ba1c:	b10a      	cbz	r2, 40ba22 <__lshift+0x8a>
  40ba1e:	f109 0602 	add.w	r6, r9, #2
  40ba22:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  40ba26:	687a      	ldr	r2, [r7, #4]
  40ba28:	3e01      	subs	r6, #1
  40ba2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ba2e:	6106      	str	r6, [r0, #16]
  40ba30:	6039      	str	r1, [r7, #0]
  40ba32:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40ba36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ba3a:	f853 2b04 	ldr.w	r2, [r3], #4
  40ba3e:	f844 2b04 	str.w	r2, [r4], #4
  40ba42:	459c      	cmp	ip, r3
  40ba44:	d9ed      	bls.n	40ba22 <__lshift+0x8a>
  40ba46:	f853 2b04 	ldr.w	r2, [r3], #4
  40ba4a:	f844 2b04 	str.w	r2, [r4], #4
  40ba4e:	459c      	cmp	ip, r3
  40ba50:	d8f3      	bhi.n	40ba3a <__lshift+0xa2>
  40ba52:	e7e6      	b.n	40ba22 <__lshift+0x8a>

0040ba54 <__mcmp>:
  40ba54:	6902      	ldr	r2, [r0, #16]
  40ba56:	690b      	ldr	r3, [r1, #16]
  40ba58:	1ad2      	subs	r2, r2, r3
  40ba5a:	b410      	push	{r4}
  40ba5c:	d115      	bne.n	40ba8a <__mcmp+0x36>
  40ba5e:	009b      	lsls	r3, r3, #2
  40ba60:	3014      	adds	r0, #20
  40ba62:	3114      	adds	r1, #20
  40ba64:	4419      	add	r1, r3
  40ba66:	4403      	add	r3, r0
  40ba68:	e001      	b.n	40ba6e <__mcmp+0x1a>
  40ba6a:	4298      	cmp	r0, r3
  40ba6c:	d211      	bcs.n	40ba92 <__mcmp+0x3e>
  40ba6e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40ba72:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40ba76:	42a2      	cmp	r2, r4
  40ba78:	d0f7      	beq.n	40ba6a <__mcmp+0x16>
  40ba7a:	4294      	cmp	r4, r2
  40ba7c:	bf94      	ite	ls
  40ba7e:	2001      	movls	r0, #1
  40ba80:	f04f 30ff 	movhi.w	r0, #4294967295
  40ba84:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ba88:	4770      	bx	lr
  40ba8a:	4610      	mov	r0, r2
  40ba8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ba90:	4770      	bx	lr
  40ba92:	2000      	movs	r0, #0
  40ba94:	f85d 4b04 	ldr.w	r4, [sp], #4
  40ba98:	4770      	bx	lr
  40ba9a:	bf00      	nop

0040ba9c <__mdiff>:
  40ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40baa0:	460d      	mov	r5, r1
  40baa2:	4604      	mov	r4, r0
  40baa4:	4611      	mov	r1, r2
  40baa6:	4628      	mov	r0, r5
  40baa8:	4616      	mov	r6, r2
  40baaa:	f7ff ffd3 	bl	40ba54 <__mcmp>
  40baae:	1e07      	subs	r7, r0, #0
  40bab0:	d055      	beq.n	40bb5e <__mdiff+0xc2>
  40bab2:	db4e      	blt.n	40bb52 <__mdiff+0xb6>
  40bab4:	f04f 0800 	mov.w	r8, #0
  40bab8:	6869      	ldr	r1, [r5, #4]
  40baba:	4620      	mov	r0, r4
  40babc:	f7ff fd60 	bl	40b580 <_Balloc>
  40bac0:	692f      	ldr	r7, [r5, #16]
  40bac2:	6932      	ldr	r2, [r6, #16]
  40bac4:	f8c0 800c 	str.w	r8, [r0, #12]
  40bac8:	3514      	adds	r5, #20
  40baca:	3614      	adds	r6, #20
  40bacc:	f100 0314 	add.w	r3, r0, #20
  40bad0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  40bad4:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  40bad8:	2100      	movs	r1, #0
  40bada:	f856 2b04 	ldr.w	r2, [r6], #4
  40bade:	f855 4b04 	ldr.w	r4, [r5], #4
  40bae2:	fa1f f982 	uxth.w	r9, r2
  40bae6:	fa11 fa84 	uxtah	sl, r1, r4
  40baea:	0c11      	lsrs	r1, r2, #16
  40baec:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  40baf0:	ebc9 020a 	rsb	r2, r9, sl
  40baf4:	eb01 4122 	add.w	r1, r1, r2, asr #16
  40baf8:	b292      	uxth	r2, r2
  40bafa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40bafe:	45b0      	cmp	r8, r6
  40bb00:	f843 2b04 	str.w	r2, [r3], #4
  40bb04:	ea4f 4121 	mov.w	r1, r1, asr #16
  40bb08:	462c      	mov	r4, r5
  40bb0a:	d8e6      	bhi.n	40bada <__mdiff+0x3e>
  40bb0c:	45ac      	cmp	ip, r5
  40bb0e:	4698      	mov	r8, r3
  40bb10:	d915      	bls.n	40bb3e <__mdiff+0xa2>
  40bb12:	f854 6b04 	ldr.w	r6, [r4], #4
  40bb16:	fa11 f186 	uxtah	r1, r1, r6
  40bb1a:	0c36      	lsrs	r6, r6, #16
  40bb1c:	eb06 4621 	add.w	r6, r6, r1, asr #16
  40bb20:	b289      	uxth	r1, r1
  40bb22:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  40bb26:	45a4      	cmp	ip, r4
  40bb28:	f843 2b04 	str.w	r2, [r3], #4
  40bb2c:	ea4f 4126 	mov.w	r1, r6, asr #16
  40bb30:	d8ef      	bhi.n	40bb12 <__mdiff+0x76>
  40bb32:	43eb      	mvns	r3, r5
  40bb34:	4463      	add	r3, ip
  40bb36:	f023 0303 	bic.w	r3, r3, #3
  40bb3a:	3304      	adds	r3, #4
  40bb3c:	4443      	add	r3, r8
  40bb3e:	3b04      	subs	r3, #4
  40bb40:	b922      	cbnz	r2, 40bb4c <__mdiff+0xb0>
  40bb42:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40bb46:	3f01      	subs	r7, #1
  40bb48:	2a00      	cmp	r2, #0
  40bb4a:	d0fa      	beq.n	40bb42 <__mdiff+0xa6>
  40bb4c:	6107      	str	r7, [r0, #16]
  40bb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40bb52:	462b      	mov	r3, r5
  40bb54:	f04f 0801 	mov.w	r8, #1
  40bb58:	4635      	mov	r5, r6
  40bb5a:	461e      	mov	r6, r3
  40bb5c:	e7ac      	b.n	40bab8 <__mdiff+0x1c>
  40bb5e:	4620      	mov	r0, r4
  40bb60:	4639      	mov	r1, r7
  40bb62:	f7ff fd0d 	bl	40b580 <_Balloc>
  40bb66:	2301      	movs	r3, #1
  40bb68:	6147      	str	r7, [r0, #20]
  40bb6a:	6103      	str	r3, [r0, #16]
  40bb6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0040bb70 <__ulp>:
  40bb70:	4b0e      	ldr	r3, [pc, #56]	; (40bbac <__ulp+0x3c>)
  40bb72:	400b      	ands	r3, r1
  40bb74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  40bb78:	2b00      	cmp	r3, #0
  40bb7a:	dd02      	ble.n	40bb82 <__ulp+0x12>
  40bb7c:	4619      	mov	r1, r3
  40bb7e:	2000      	movs	r0, #0
  40bb80:	4770      	bx	lr
  40bb82:	425b      	negs	r3, r3
  40bb84:	151b      	asrs	r3, r3, #20
  40bb86:	2b13      	cmp	r3, #19
  40bb88:	dd0a      	ble.n	40bba0 <__ulp+0x30>
  40bb8a:	2b32      	cmp	r3, #50	; 0x32
  40bb8c:	bfdd      	ittte	le
  40bb8e:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  40bb92:	2201      	movle	r2, #1
  40bb94:	fa02 f303 	lslle.w	r3, r2, r3
  40bb98:	2301      	movgt	r3, #1
  40bb9a:	2100      	movs	r1, #0
  40bb9c:	4618      	mov	r0, r3
  40bb9e:	4770      	bx	lr
  40bba0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40bba4:	fa42 f103 	asr.w	r1, r2, r3
  40bba8:	2000      	movs	r0, #0
  40bbaa:	4770      	bx	lr
  40bbac:	7ff00000 	.word	0x7ff00000

0040bbb0 <__b2d>:
  40bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40bbb2:	6904      	ldr	r4, [r0, #16]
  40bbb4:	f100 0614 	add.w	r6, r0, #20
  40bbb8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
  40bbbc:	460f      	mov	r7, r1
  40bbbe:	f854 5c04 	ldr.w	r5, [r4, #-4]
  40bbc2:	4628      	mov	r0, r5
  40bbc4:	f7ff fda4 	bl	40b710 <__hi0bits>
  40bbc8:	f1c0 0320 	rsb	r3, r0, #32
  40bbcc:	280a      	cmp	r0, #10
  40bbce:	603b      	str	r3, [r7, #0]
  40bbd0:	f1a4 0104 	sub.w	r1, r4, #4
  40bbd4:	dc19      	bgt.n	40bc0a <__b2d+0x5a>
  40bbd6:	428e      	cmp	r6, r1
  40bbd8:	f1c0 070b 	rsb	r7, r0, #11
  40bbdc:	bf38      	it	cc
  40bbde:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
  40bbe2:	fa25 fc07 	lsr.w	ip, r5, r7
  40bbe6:	f100 0015 	add.w	r0, r0, #21
  40bbea:	bf38      	it	cc
  40bbec:	fa21 f707 	lsrcc.w	r7, r1, r7
  40bbf0:	fa05 f500 	lsl.w	r5, r5, r0
  40bbf4:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  40bbf8:	bf28      	it	cs
  40bbfa:	2700      	movcs	r7, #0
  40bbfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40bc00:	ea47 0205 	orr.w	r2, r7, r5
  40bc04:	4610      	mov	r0, r2
  40bc06:	4619      	mov	r1, r3
  40bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bc0a:	428e      	cmp	r6, r1
  40bc0c:	bf36      	itet	cc
  40bc0e:	f1a4 0108 	subcc.w	r1, r4, #8
  40bc12:	2400      	movcs	r4, #0
  40bc14:	f854 4c08 	ldrcc.w	r4, [r4, #-8]
  40bc18:	f1b0 070b 	subs.w	r7, r0, #11
  40bc1c:	d019      	beq.n	40bc52 <__b2d+0xa2>
  40bc1e:	42b1      	cmp	r1, r6
  40bc20:	bf88      	it	hi
  40bc22:	f851 1c04 	ldrhi.w	r1, [r1, #-4]
  40bc26:	fa05 f507 	lsl.w	r5, r5, r7
  40bc2a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  40bc2e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
  40bc32:	fa24 fc00 	lsr.w	ip, r4, r0
  40bc36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
  40bc3a:	bf8c      	ite	hi
  40bc3c:	fa21 f000 	lsrhi.w	r0, r1, r0
  40bc40:	2000      	movls	r0, #0
  40bc42:	40bc      	lsls	r4, r7
  40bc44:	ea45 030c 	orr.w	r3, r5, ip
  40bc48:	ea40 0204 	orr.w	r2, r0, r4
  40bc4c:	4610      	mov	r0, r2
  40bc4e:	4619      	mov	r1, r3
  40bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bc52:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
  40bc56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  40bc5a:	4622      	mov	r2, r4
  40bc5c:	4610      	mov	r0, r2
  40bc5e:	4619      	mov	r1, r3
  40bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40bc62:	bf00      	nop

0040bc64 <__d2b>:
  40bc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40bc68:	b083      	sub	sp, #12
  40bc6a:	2101      	movs	r1, #1
  40bc6c:	461d      	mov	r5, r3
  40bc6e:	f3c3 560a 	ubfx	r6, r3, #20, #11
  40bc72:	4614      	mov	r4, r2
  40bc74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40bc76:	f7ff fc83 	bl	40b580 <_Balloc>
  40bc7a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40bc7e:	4680      	mov	r8, r0
  40bc80:	b10e      	cbz	r6, 40bc86 <__d2b+0x22>
  40bc82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40bc86:	9301      	str	r3, [sp, #4]
  40bc88:	b324      	cbz	r4, 40bcd4 <__d2b+0x70>
  40bc8a:	a802      	add	r0, sp, #8
  40bc8c:	f840 4d08 	str.w	r4, [r0, #-8]!
  40bc90:	4668      	mov	r0, sp
  40bc92:	f7ff fd5d 	bl	40b750 <__lo0bits>
  40bc96:	2800      	cmp	r0, #0
  40bc98:	d135      	bne.n	40bd06 <__d2b+0xa2>
  40bc9a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40bc9e:	f8c8 2014 	str.w	r2, [r8, #20]
  40bca2:	2b00      	cmp	r3, #0
  40bca4:	bf0c      	ite	eq
  40bca6:	2401      	moveq	r4, #1
  40bca8:	2402      	movne	r4, #2
  40bcaa:	f8c8 3018 	str.w	r3, [r8, #24]
  40bcae:	f8c8 4010 	str.w	r4, [r8, #16]
  40bcb2:	b9de      	cbnz	r6, 40bcec <__d2b+0x88>
  40bcb4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  40bcb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40bcbc:	6038      	str	r0, [r7, #0]
  40bcbe:	6918      	ldr	r0, [r3, #16]
  40bcc0:	f7ff fd26 	bl	40b710 <__hi0bits>
  40bcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bcc6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  40bcca:	6018      	str	r0, [r3, #0]
  40bccc:	4640      	mov	r0, r8
  40bcce:	b003      	add	sp, #12
  40bcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40bcd4:	a801      	add	r0, sp, #4
  40bcd6:	f7ff fd3b 	bl	40b750 <__lo0bits>
  40bcda:	2401      	movs	r4, #1
  40bcdc:	9b01      	ldr	r3, [sp, #4]
  40bcde:	f8c8 3014 	str.w	r3, [r8, #20]
  40bce2:	3020      	adds	r0, #32
  40bce4:	f8c8 4010 	str.w	r4, [r8, #16]
  40bce8:	2e00      	cmp	r6, #0
  40bcea:	d0e3      	beq.n	40bcb4 <__d2b+0x50>
  40bcec:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  40bcf0:	eb09 0300 	add.w	r3, r9, r0
  40bcf4:	603b      	str	r3, [r7, #0]
  40bcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40bcf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40bcfc:	6018      	str	r0, [r3, #0]
  40bcfe:	4640      	mov	r0, r8
  40bd00:	b003      	add	sp, #12
  40bd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40bd06:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40bd0a:	f1c0 0120 	rsb	r1, r0, #32
  40bd0e:	fa03 f101 	lsl.w	r1, r3, r1
  40bd12:	430a      	orrs	r2, r1
  40bd14:	40c3      	lsrs	r3, r0
  40bd16:	9301      	str	r3, [sp, #4]
  40bd18:	f8c8 2014 	str.w	r2, [r8, #20]
  40bd1c:	e7c1      	b.n	40bca2 <__d2b+0x3e>
  40bd1e:	bf00      	nop

0040bd20 <__ratio>:
  40bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
  40bd22:	b083      	sub	sp, #12
  40bd24:	460e      	mov	r6, r1
  40bd26:	4669      	mov	r1, sp
  40bd28:	4607      	mov	r7, r0
  40bd2a:	f7ff ff41 	bl	40bbb0 <__b2d>
  40bd2e:	4604      	mov	r4, r0
  40bd30:	460d      	mov	r5, r1
  40bd32:	4630      	mov	r0, r6
  40bd34:	a901      	add	r1, sp, #4
  40bd36:	f7ff ff3b 	bl	40bbb0 <__b2d>
  40bd3a:	4602      	mov	r2, r0
  40bd3c:	460b      	mov	r3, r1
  40bd3e:	e89d 0003 	ldmia.w	sp, {r0, r1}
  40bd42:	693f      	ldr	r7, [r7, #16]
  40bd44:	6936      	ldr	r6, [r6, #16]
  40bd46:	1a41      	subs	r1, r0, r1
  40bd48:	ebc6 0e07 	rsb	lr, r6, r7
  40bd4c:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
  40bd50:	f1be 0f00 	cmp.w	lr, #0
  40bd54:	dd08      	ble.n	40bd68 <__ratio+0x48>
  40bd56:	eb05 510e 	add.w	r1, r5, lr, lsl #20
  40bd5a:	460d      	mov	r5, r1
  40bd5c:	4620      	mov	r0, r4
  40bd5e:	4629      	mov	r1, r5
  40bd60:	f000 fbec 	bl	40c53c <__aeabi_ddiv>
  40bd64:	b003      	add	sp, #12
  40bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40bd68:	eba3 570e 	sub.w	r7, r3, lr, lsl #20
  40bd6c:	463b      	mov	r3, r7
  40bd6e:	e7f5      	b.n	40bd5c <__ratio+0x3c>

0040bd70 <__copybits>:
  40bd70:	b470      	push	{r4, r5, r6}
  40bd72:	6915      	ldr	r5, [r2, #16]
  40bd74:	f102 0314 	add.w	r3, r2, #20
  40bd78:	3901      	subs	r1, #1
  40bd7a:	114e      	asrs	r6, r1, #5
  40bd7c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
  40bd80:	3601      	adds	r6, #1
  40bd82:	42ab      	cmp	r3, r5
  40bd84:	eb00 0686 	add.w	r6, r0, r6, lsl #2
  40bd88:	d20c      	bcs.n	40bda4 <__copybits+0x34>
  40bd8a:	4601      	mov	r1, r0
  40bd8c:	f853 4b04 	ldr.w	r4, [r3], #4
  40bd90:	f841 4b04 	str.w	r4, [r1], #4
  40bd94:	429d      	cmp	r5, r3
  40bd96:	d8f9      	bhi.n	40bd8c <__copybits+0x1c>
  40bd98:	1aab      	subs	r3, r5, r2
  40bd9a:	3b15      	subs	r3, #21
  40bd9c:	f023 0303 	bic.w	r3, r3, #3
  40bda0:	3304      	adds	r3, #4
  40bda2:	4418      	add	r0, r3
  40bda4:	4286      	cmp	r6, r0
  40bda6:	d904      	bls.n	40bdb2 <__copybits+0x42>
  40bda8:	2300      	movs	r3, #0
  40bdaa:	f840 3b04 	str.w	r3, [r0], #4
  40bdae:	4286      	cmp	r6, r0
  40bdb0:	d8fb      	bhi.n	40bdaa <__copybits+0x3a>
  40bdb2:	bc70      	pop	{r4, r5, r6}
  40bdb4:	4770      	bx	lr
  40bdb6:	bf00      	nop

0040bdb8 <__any_on>:
  40bdb8:	6903      	ldr	r3, [r0, #16]
  40bdba:	114a      	asrs	r2, r1, #5
  40bdbc:	4293      	cmp	r3, r2
  40bdbe:	b410      	push	{r4}
  40bdc0:	f100 0414 	add.w	r4, r0, #20
  40bdc4:	da10      	bge.n	40bde8 <__any_on+0x30>
  40bdc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  40bdca:	429c      	cmp	r4, r3
  40bdcc:	d221      	bcs.n	40be12 <__any_on+0x5a>
  40bdce:	f853 0c04 	ldr.w	r0, [r3, #-4]
  40bdd2:	3b04      	subs	r3, #4
  40bdd4:	b118      	cbz	r0, 40bdde <__any_on+0x26>
  40bdd6:	e015      	b.n	40be04 <__any_on+0x4c>
  40bdd8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40bddc:	b992      	cbnz	r2, 40be04 <__any_on+0x4c>
  40bdde:	429c      	cmp	r4, r3
  40bde0:	d3fa      	bcc.n	40bdd8 <__any_on+0x20>
  40bde2:	f85d 4b04 	ldr.w	r4, [sp], #4
  40bde6:	4770      	bx	lr
  40bde8:	dd10      	ble.n	40be0c <__any_on+0x54>
  40bdea:	f011 011f 	ands.w	r1, r1, #31
  40bdee:	d00d      	beq.n	40be0c <__any_on+0x54>
  40bdf0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
  40bdf4:	fa20 f301 	lsr.w	r3, r0, r1
  40bdf8:	fa03 f101 	lsl.w	r1, r3, r1
  40bdfc:	4281      	cmp	r1, r0
  40bdfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  40be02:	d0e2      	beq.n	40bdca <__any_on+0x12>
  40be04:	2001      	movs	r0, #1
  40be06:	f85d 4b04 	ldr.w	r4, [sp], #4
  40be0a:	4770      	bx	lr
  40be0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  40be10:	e7db      	b.n	40bdca <__any_on+0x12>
  40be12:	2000      	movs	r0, #0
  40be14:	e7e5      	b.n	40bde2 <__any_on+0x2a>
  40be16:	bf00      	nop

0040be18 <__ssprint_r>:
  40be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40be1c:	6894      	ldr	r4, [r2, #8]
  40be1e:	6816      	ldr	r6, [r2, #0]
  40be20:	b083      	sub	sp, #12
  40be22:	4692      	mov	sl, r2
  40be24:	4680      	mov	r8, r0
  40be26:	460d      	mov	r5, r1
  40be28:	2c00      	cmp	r4, #0
  40be2a:	d06f      	beq.n	40bf0c <__ssprint_r+0xf4>
  40be2c:	f04f 0b00 	mov.w	fp, #0
  40be30:	6808      	ldr	r0, [r1, #0]
  40be32:	688b      	ldr	r3, [r1, #8]
  40be34:	465c      	mov	r4, fp
  40be36:	2c00      	cmp	r4, #0
  40be38:	d043      	beq.n	40bec2 <__ssprint_r+0xaa>
  40be3a:	429c      	cmp	r4, r3
  40be3c:	461f      	mov	r7, r3
  40be3e:	d345      	bcc.n	40becc <__ssprint_r+0xb4>
  40be40:	89ab      	ldrh	r3, [r5, #12]
  40be42:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40be46:	d044      	beq.n	40bed2 <__ssprint_r+0xba>
  40be48:	696f      	ldr	r7, [r5, #20]
  40be4a:	6929      	ldr	r1, [r5, #16]
  40be4c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40be50:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  40be54:	ebc1 0900 	rsb	r9, r1, r0
  40be58:	1c62      	adds	r2, r4, #1
  40be5a:	107f      	asrs	r7, r7, #1
  40be5c:	444a      	add	r2, r9
  40be5e:	4297      	cmp	r7, r2
  40be60:	bf34      	ite	cc
  40be62:	4617      	movcc	r7, r2
  40be64:	463a      	movcs	r2, r7
  40be66:	055b      	lsls	r3, r3, #21
  40be68:	d535      	bpl.n	40bed6 <__ssprint_r+0xbe>
  40be6a:	4611      	mov	r1, r2
  40be6c:	4640      	mov	r0, r8
  40be6e:	f7fa faed 	bl	40644c <_malloc_r>
  40be72:	2800      	cmp	r0, #0
  40be74:	d039      	beq.n	40beea <__ssprint_r+0xd2>
  40be76:	6929      	ldr	r1, [r5, #16]
  40be78:	9001      	str	r0, [sp, #4]
  40be7a:	464a      	mov	r2, r9
  40be7c:	f7f7 fbca 	bl	403614 <memcpy>
  40be80:	89aa      	ldrh	r2, [r5, #12]
  40be82:	9b01      	ldr	r3, [sp, #4]
  40be84:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40be88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40be8c:	81aa      	strh	r2, [r5, #12]
  40be8e:	ebc9 0207 	rsb	r2, r9, r7
  40be92:	eb03 0009 	add.w	r0, r3, r9
  40be96:	616f      	str	r7, [r5, #20]
  40be98:	612b      	str	r3, [r5, #16]
  40be9a:	6028      	str	r0, [r5, #0]
  40be9c:	60aa      	str	r2, [r5, #8]
  40be9e:	4627      	mov	r7, r4
  40bea0:	46a1      	mov	r9, r4
  40bea2:	464a      	mov	r2, r9
  40bea4:	4659      	mov	r1, fp
  40bea6:	f7fa fdf9 	bl	406a9c <memmove>
  40beaa:	f8da 2008 	ldr.w	r2, [sl, #8]
  40beae:	68ab      	ldr	r3, [r5, #8]
  40beb0:	6828      	ldr	r0, [r5, #0]
  40beb2:	1bdb      	subs	r3, r3, r7
  40beb4:	4448      	add	r0, r9
  40beb6:	1b14      	subs	r4, r2, r4
  40beb8:	60ab      	str	r3, [r5, #8]
  40beba:	6028      	str	r0, [r5, #0]
  40bebc:	f8ca 4008 	str.w	r4, [sl, #8]
  40bec0:	b324      	cbz	r4, 40bf0c <__ssprint_r+0xf4>
  40bec2:	f8d6 b000 	ldr.w	fp, [r6]
  40bec6:	6874      	ldr	r4, [r6, #4]
  40bec8:	3608      	adds	r6, #8
  40beca:	e7b4      	b.n	40be36 <__ssprint_r+0x1e>
  40becc:	4627      	mov	r7, r4
  40bece:	46a1      	mov	r9, r4
  40bed0:	e7e7      	b.n	40bea2 <__ssprint_r+0x8a>
  40bed2:	46b9      	mov	r9, r7
  40bed4:	e7e5      	b.n	40bea2 <__ssprint_r+0x8a>
  40bed6:	4640      	mov	r0, r8
  40bed8:	f7fa fe58 	bl	406b8c <_realloc_r>
  40bedc:	4603      	mov	r3, r0
  40bede:	2800      	cmp	r0, #0
  40bee0:	d1d5      	bne.n	40be8e <__ssprint_r+0x76>
  40bee2:	4640      	mov	r0, r8
  40bee4:	6929      	ldr	r1, [r5, #16]
  40bee6:	f7f9 ff89 	bl	405dfc <_free_r>
  40beea:	89aa      	ldrh	r2, [r5, #12]
  40beec:	230c      	movs	r3, #12
  40beee:	f8c8 3000 	str.w	r3, [r8]
  40bef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40bef6:	2300      	movs	r3, #0
  40bef8:	f04f 30ff 	mov.w	r0, #4294967295
  40befc:	81aa      	strh	r2, [r5, #12]
  40befe:	f8ca 3008 	str.w	r3, [sl, #8]
  40bf02:	f8ca 3004 	str.w	r3, [sl, #4]
  40bf06:	b003      	add	sp, #12
  40bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40bf0c:	4620      	mov	r0, r4
  40bf0e:	f8ca 4004 	str.w	r4, [sl, #4]
  40bf12:	b003      	add	sp, #12
  40bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040bf18 <_calloc_r>:
  40bf18:	b510      	push	{r4, lr}
  40bf1a:	fb02 f101 	mul.w	r1, r2, r1
  40bf1e:	f7fa fa95 	bl	40644c <_malloc_r>
  40bf22:	4604      	mov	r4, r0
  40bf24:	b168      	cbz	r0, 40bf42 <_calloc_r+0x2a>
  40bf26:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40bf2a:	f022 0203 	bic.w	r2, r2, #3
  40bf2e:	3a04      	subs	r2, #4
  40bf30:	2a24      	cmp	r2, #36	; 0x24
  40bf32:	d818      	bhi.n	40bf66 <_calloc_r+0x4e>
  40bf34:	2a13      	cmp	r2, #19
  40bf36:	d806      	bhi.n	40bf46 <_calloc_r+0x2e>
  40bf38:	4603      	mov	r3, r0
  40bf3a:	2200      	movs	r2, #0
  40bf3c:	601a      	str	r2, [r3, #0]
  40bf3e:	605a      	str	r2, [r3, #4]
  40bf40:	609a      	str	r2, [r3, #8]
  40bf42:	4620      	mov	r0, r4
  40bf44:	bd10      	pop	{r4, pc}
  40bf46:	2300      	movs	r3, #0
  40bf48:	2a1b      	cmp	r2, #27
  40bf4a:	6003      	str	r3, [r0, #0]
  40bf4c:	6043      	str	r3, [r0, #4]
  40bf4e:	d90f      	bls.n	40bf70 <_calloc_r+0x58>
  40bf50:	2a24      	cmp	r2, #36	; 0x24
  40bf52:	6083      	str	r3, [r0, #8]
  40bf54:	60c3      	str	r3, [r0, #12]
  40bf56:	bf05      	ittet	eq
  40bf58:	6103      	streq	r3, [r0, #16]
  40bf5a:	6143      	streq	r3, [r0, #20]
  40bf5c:	f100 0310 	addne.w	r3, r0, #16
  40bf60:	f100 0318 	addeq.w	r3, r0, #24
  40bf64:	e7e9      	b.n	40bf3a <_calloc_r+0x22>
  40bf66:	2100      	movs	r1, #0
  40bf68:	f7f7 fbee 	bl	403748 <memset>
  40bf6c:	4620      	mov	r0, r4
  40bf6e:	bd10      	pop	{r4, pc}
  40bf70:	f100 0308 	add.w	r3, r0, #8
  40bf74:	e7e1      	b.n	40bf3a <_calloc_r+0x22>
  40bf76:	bf00      	nop

0040bf78 <__aeabi_drsub>:
  40bf78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40bf7c:	e002      	b.n	40bf84 <__adddf3>
  40bf7e:	bf00      	nop

0040bf80 <__aeabi_dsub>:
  40bf80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040bf84 <__adddf3>:
  40bf84:	b530      	push	{r4, r5, lr}
  40bf86:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40bf8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40bf8e:	ea94 0f05 	teq	r4, r5
  40bf92:	bf08      	it	eq
  40bf94:	ea90 0f02 	teqeq	r0, r2
  40bf98:	bf1f      	itttt	ne
  40bf9a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40bf9e:	ea55 0c02 	orrsne.w	ip, r5, r2
  40bfa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40bfa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40bfaa:	f000 80e2 	beq.w	40c172 <__adddf3+0x1ee>
  40bfae:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40bfb2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40bfb6:	bfb8      	it	lt
  40bfb8:	426d      	neglt	r5, r5
  40bfba:	dd0c      	ble.n	40bfd6 <__adddf3+0x52>
  40bfbc:	442c      	add	r4, r5
  40bfbe:	ea80 0202 	eor.w	r2, r0, r2
  40bfc2:	ea81 0303 	eor.w	r3, r1, r3
  40bfc6:	ea82 0000 	eor.w	r0, r2, r0
  40bfca:	ea83 0101 	eor.w	r1, r3, r1
  40bfce:	ea80 0202 	eor.w	r2, r0, r2
  40bfd2:	ea81 0303 	eor.w	r3, r1, r3
  40bfd6:	2d36      	cmp	r5, #54	; 0x36
  40bfd8:	bf88      	it	hi
  40bfda:	bd30      	pophi	{r4, r5, pc}
  40bfdc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40bfe0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40bfe4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40bfe8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40bfec:	d002      	beq.n	40bff4 <__adddf3+0x70>
  40bfee:	4240      	negs	r0, r0
  40bff0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40bff4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40bff8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40bffc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40c000:	d002      	beq.n	40c008 <__adddf3+0x84>
  40c002:	4252      	negs	r2, r2
  40c004:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40c008:	ea94 0f05 	teq	r4, r5
  40c00c:	f000 80a7 	beq.w	40c15e <__adddf3+0x1da>
  40c010:	f1a4 0401 	sub.w	r4, r4, #1
  40c014:	f1d5 0e20 	rsbs	lr, r5, #32
  40c018:	db0d      	blt.n	40c036 <__adddf3+0xb2>
  40c01a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40c01e:	fa22 f205 	lsr.w	r2, r2, r5
  40c022:	1880      	adds	r0, r0, r2
  40c024:	f141 0100 	adc.w	r1, r1, #0
  40c028:	fa03 f20e 	lsl.w	r2, r3, lr
  40c02c:	1880      	adds	r0, r0, r2
  40c02e:	fa43 f305 	asr.w	r3, r3, r5
  40c032:	4159      	adcs	r1, r3
  40c034:	e00e      	b.n	40c054 <__adddf3+0xd0>
  40c036:	f1a5 0520 	sub.w	r5, r5, #32
  40c03a:	f10e 0e20 	add.w	lr, lr, #32
  40c03e:	2a01      	cmp	r2, #1
  40c040:	fa03 fc0e 	lsl.w	ip, r3, lr
  40c044:	bf28      	it	cs
  40c046:	f04c 0c02 	orrcs.w	ip, ip, #2
  40c04a:	fa43 f305 	asr.w	r3, r3, r5
  40c04e:	18c0      	adds	r0, r0, r3
  40c050:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40c054:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c058:	d507      	bpl.n	40c06a <__adddf3+0xe6>
  40c05a:	f04f 0e00 	mov.w	lr, #0
  40c05e:	f1dc 0c00 	rsbs	ip, ip, #0
  40c062:	eb7e 0000 	sbcs.w	r0, lr, r0
  40c066:	eb6e 0101 	sbc.w	r1, lr, r1
  40c06a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40c06e:	d31b      	bcc.n	40c0a8 <__adddf3+0x124>
  40c070:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40c074:	d30c      	bcc.n	40c090 <__adddf3+0x10c>
  40c076:	0849      	lsrs	r1, r1, #1
  40c078:	ea5f 0030 	movs.w	r0, r0, rrx
  40c07c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40c080:	f104 0401 	add.w	r4, r4, #1
  40c084:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40c088:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40c08c:	f080 809a 	bcs.w	40c1c4 <__adddf3+0x240>
  40c090:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40c094:	bf08      	it	eq
  40c096:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c09a:	f150 0000 	adcs.w	r0, r0, #0
  40c09e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c0a2:	ea41 0105 	orr.w	r1, r1, r5
  40c0a6:	bd30      	pop	{r4, r5, pc}
  40c0a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40c0ac:	4140      	adcs	r0, r0
  40c0ae:	eb41 0101 	adc.w	r1, r1, r1
  40c0b2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c0b6:	f1a4 0401 	sub.w	r4, r4, #1
  40c0ba:	d1e9      	bne.n	40c090 <__adddf3+0x10c>
  40c0bc:	f091 0f00 	teq	r1, #0
  40c0c0:	bf04      	itt	eq
  40c0c2:	4601      	moveq	r1, r0
  40c0c4:	2000      	moveq	r0, #0
  40c0c6:	fab1 f381 	clz	r3, r1
  40c0ca:	bf08      	it	eq
  40c0cc:	3320      	addeq	r3, #32
  40c0ce:	f1a3 030b 	sub.w	r3, r3, #11
  40c0d2:	f1b3 0220 	subs.w	r2, r3, #32
  40c0d6:	da0c      	bge.n	40c0f2 <__adddf3+0x16e>
  40c0d8:	320c      	adds	r2, #12
  40c0da:	dd08      	ble.n	40c0ee <__adddf3+0x16a>
  40c0dc:	f102 0c14 	add.w	ip, r2, #20
  40c0e0:	f1c2 020c 	rsb	r2, r2, #12
  40c0e4:	fa01 f00c 	lsl.w	r0, r1, ip
  40c0e8:	fa21 f102 	lsr.w	r1, r1, r2
  40c0ec:	e00c      	b.n	40c108 <__adddf3+0x184>
  40c0ee:	f102 0214 	add.w	r2, r2, #20
  40c0f2:	bfd8      	it	le
  40c0f4:	f1c2 0c20 	rsble	ip, r2, #32
  40c0f8:	fa01 f102 	lsl.w	r1, r1, r2
  40c0fc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c100:	bfdc      	itt	le
  40c102:	ea41 010c 	orrle.w	r1, r1, ip
  40c106:	4090      	lslle	r0, r2
  40c108:	1ae4      	subs	r4, r4, r3
  40c10a:	bfa2      	ittt	ge
  40c10c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40c110:	4329      	orrge	r1, r5
  40c112:	bd30      	popge	{r4, r5, pc}
  40c114:	ea6f 0404 	mvn.w	r4, r4
  40c118:	3c1f      	subs	r4, #31
  40c11a:	da1c      	bge.n	40c156 <__adddf3+0x1d2>
  40c11c:	340c      	adds	r4, #12
  40c11e:	dc0e      	bgt.n	40c13e <__adddf3+0x1ba>
  40c120:	f104 0414 	add.w	r4, r4, #20
  40c124:	f1c4 0220 	rsb	r2, r4, #32
  40c128:	fa20 f004 	lsr.w	r0, r0, r4
  40c12c:	fa01 f302 	lsl.w	r3, r1, r2
  40c130:	ea40 0003 	orr.w	r0, r0, r3
  40c134:	fa21 f304 	lsr.w	r3, r1, r4
  40c138:	ea45 0103 	orr.w	r1, r5, r3
  40c13c:	bd30      	pop	{r4, r5, pc}
  40c13e:	f1c4 040c 	rsb	r4, r4, #12
  40c142:	f1c4 0220 	rsb	r2, r4, #32
  40c146:	fa20 f002 	lsr.w	r0, r0, r2
  40c14a:	fa01 f304 	lsl.w	r3, r1, r4
  40c14e:	ea40 0003 	orr.w	r0, r0, r3
  40c152:	4629      	mov	r1, r5
  40c154:	bd30      	pop	{r4, r5, pc}
  40c156:	fa21 f004 	lsr.w	r0, r1, r4
  40c15a:	4629      	mov	r1, r5
  40c15c:	bd30      	pop	{r4, r5, pc}
  40c15e:	f094 0f00 	teq	r4, #0
  40c162:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40c166:	bf06      	itte	eq
  40c168:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40c16c:	3401      	addeq	r4, #1
  40c16e:	3d01      	subne	r5, #1
  40c170:	e74e      	b.n	40c010 <__adddf3+0x8c>
  40c172:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c176:	bf18      	it	ne
  40c178:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40c17c:	d029      	beq.n	40c1d2 <__adddf3+0x24e>
  40c17e:	ea94 0f05 	teq	r4, r5
  40c182:	bf08      	it	eq
  40c184:	ea90 0f02 	teqeq	r0, r2
  40c188:	d005      	beq.n	40c196 <__adddf3+0x212>
  40c18a:	ea54 0c00 	orrs.w	ip, r4, r0
  40c18e:	bf04      	itt	eq
  40c190:	4619      	moveq	r1, r3
  40c192:	4610      	moveq	r0, r2
  40c194:	bd30      	pop	{r4, r5, pc}
  40c196:	ea91 0f03 	teq	r1, r3
  40c19a:	bf1e      	ittt	ne
  40c19c:	2100      	movne	r1, #0
  40c19e:	2000      	movne	r0, #0
  40c1a0:	bd30      	popne	{r4, r5, pc}
  40c1a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40c1a6:	d105      	bne.n	40c1b4 <__adddf3+0x230>
  40c1a8:	0040      	lsls	r0, r0, #1
  40c1aa:	4149      	adcs	r1, r1
  40c1ac:	bf28      	it	cs
  40c1ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40c1b2:	bd30      	pop	{r4, r5, pc}
  40c1b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40c1b8:	bf3c      	itt	cc
  40c1ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40c1be:	bd30      	popcc	{r4, r5, pc}
  40c1c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c1c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40c1c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c1cc:	f04f 0000 	mov.w	r0, #0
  40c1d0:	bd30      	pop	{r4, r5, pc}
  40c1d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40c1d6:	bf1a      	itte	ne
  40c1d8:	4619      	movne	r1, r3
  40c1da:	4610      	movne	r0, r2
  40c1dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40c1e0:	bf1c      	itt	ne
  40c1e2:	460b      	movne	r3, r1
  40c1e4:	4602      	movne	r2, r0
  40c1e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c1ea:	bf06      	itte	eq
  40c1ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40c1f0:	ea91 0f03 	teqeq	r1, r3
  40c1f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40c1f8:	bd30      	pop	{r4, r5, pc}
  40c1fa:	bf00      	nop

0040c1fc <__aeabi_ui2d>:
  40c1fc:	f090 0f00 	teq	r0, #0
  40c200:	bf04      	itt	eq
  40c202:	2100      	moveq	r1, #0
  40c204:	4770      	bxeq	lr
  40c206:	b530      	push	{r4, r5, lr}
  40c208:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c20c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c210:	f04f 0500 	mov.w	r5, #0
  40c214:	f04f 0100 	mov.w	r1, #0
  40c218:	e750      	b.n	40c0bc <__adddf3+0x138>
  40c21a:	bf00      	nop

0040c21c <__aeabi_i2d>:
  40c21c:	f090 0f00 	teq	r0, #0
  40c220:	bf04      	itt	eq
  40c222:	2100      	moveq	r1, #0
  40c224:	4770      	bxeq	lr
  40c226:	b530      	push	{r4, r5, lr}
  40c228:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c22c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c230:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40c234:	bf48      	it	mi
  40c236:	4240      	negmi	r0, r0
  40c238:	f04f 0100 	mov.w	r1, #0
  40c23c:	e73e      	b.n	40c0bc <__adddf3+0x138>
  40c23e:	bf00      	nop

0040c240 <__aeabi_f2d>:
  40c240:	0042      	lsls	r2, r0, #1
  40c242:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40c246:	ea4f 0131 	mov.w	r1, r1, rrx
  40c24a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40c24e:	bf1f      	itttt	ne
  40c250:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40c254:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c258:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40c25c:	4770      	bxne	lr
  40c25e:	f092 0f00 	teq	r2, #0
  40c262:	bf14      	ite	ne
  40c264:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40c268:	4770      	bxeq	lr
  40c26a:	b530      	push	{r4, r5, lr}
  40c26c:	f44f 7460 	mov.w	r4, #896	; 0x380
  40c270:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40c274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c278:	e720      	b.n	40c0bc <__adddf3+0x138>
  40c27a:	bf00      	nop

0040c27c <__aeabi_ul2d>:
  40c27c:	ea50 0201 	orrs.w	r2, r0, r1
  40c280:	bf08      	it	eq
  40c282:	4770      	bxeq	lr
  40c284:	b530      	push	{r4, r5, lr}
  40c286:	f04f 0500 	mov.w	r5, #0
  40c28a:	e00a      	b.n	40c2a2 <__aeabi_l2d+0x16>

0040c28c <__aeabi_l2d>:
  40c28c:	ea50 0201 	orrs.w	r2, r0, r1
  40c290:	bf08      	it	eq
  40c292:	4770      	bxeq	lr
  40c294:	b530      	push	{r4, r5, lr}
  40c296:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40c29a:	d502      	bpl.n	40c2a2 <__aeabi_l2d+0x16>
  40c29c:	4240      	negs	r0, r0
  40c29e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40c2a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40c2a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40c2aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40c2ae:	f43f aedc 	beq.w	40c06a <__adddf3+0xe6>
  40c2b2:	f04f 0203 	mov.w	r2, #3
  40c2b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c2ba:	bf18      	it	ne
  40c2bc:	3203      	addne	r2, #3
  40c2be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40c2c2:	bf18      	it	ne
  40c2c4:	3203      	addne	r2, #3
  40c2c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40c2ca:	f1c2 0320 	rsb	r3, r2, #32
  40c2ce:	fa00 fc03 	lsl.w	ip, r0, r3
  40c2d2:	fa20 f002 	lsr.w	r0, r0, r2
  40c2d6:	fa01 fe03 	lsl.w	lr, r1, r3
  40c2da:	ea40 000e 	orr.w	r0, r0, lr
  40c2de:	fa21 f102 	lsr.w	r1, r1, r2
  40c2e2:	4414      	add	r4, r2
  40c2e4:	e6c1      	b.n	40c06a <__adddf3+0xe6>
  40c2e6:	bf00      	nop

0040c2e8 <__aeabi_dmul>:
  40c2e8:	b570      	push	{r4, r5, r6, lr}
  40c2ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c2ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c2f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c2f6:	bf1d      	ittte	ne
  40c2f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c2fc:	ea94 0f0c 	teqne	r4, ip
  40c300:	ea95 0f0c 	teqne	r5, ip
  40c304:	f000 f8de 	bleq	40c4c4 <__aeabi_dmul+0x1dc>
  40c308:	442c      	add	r4, r5
  40c30a:	ea81 0603 	eor.w	r6, r1, r3
  40c30e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40c312:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40c316:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40c31a:	bf18      	it	ne
  40c31c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40c320:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40c328:	d038      	beq.n	40c39c <__aeabi_dmul+0xb4>
  40c32a:	fba0 ce02 	umull	ip, lr, r0, r2
  40c32e:	f04f 0500 	mov.w	r5, #0
  40c332:	fbe1 e502 	umlal	lr, r5, r1, r2
  40c336:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40c33a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40c33e:	f04f 0600 	mov.w	r6, #0
  40c342:	fbe1 5603 	umlal	r5, r6, r1, r3
  40c346:	f09c 0f00 	teq	ip, #0
  40c34a:	bf18      	it	ne
  40c34c:	f04e 0e01 	orrne.w	lr, lr, #1
  40c350:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40c354:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40c358:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40c35c:	d204      	bcs.n	40c368 <__aeabi_dmul+0x80>
  40c35e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40c362:	416d      	adcs	r5, r5
  40c364:	eb46 0606 	adc.w	r6, r6, r6
  40c368:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40c36c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40c370:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40c374:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40c378:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40c37c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c380:	bf88      	it	hi
  40c382:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c386:	d81e      	bhi.n	40c3c6 <__aeabi_dmul+0xde>
  40c388:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40c38c:	bf08      	it	eq
  40c38e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40c392:	f150 0000 	adcs.w	r0, r0, #0
  40c396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c39a:	bd70      	pop	{r4, r5, r6, pc}
  40c39c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40c3a0:	ea46 0101 	orr.w	r1, r6, r1
  40c3a4:	ea40 0002 	orr.w	r0, r0, r2
  40c3a8:	ea81 0103 	eor.w	r1, r1, r3
  40c3ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40c3b0:	bfc2      	ittt	gt
  40c3b2:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c3b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c3ba:	bd70      	popgt	{r4, r5, r6, pc}
  40c3bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c3c0:	f04f 0e00 	mov.w	lr, #0
  40c3c4:	3c01      	subs	r4, #1
  40c3c6:	f300 80ab 	bgt.w	40c520 <__aeabi_dmul+0x238>
  40c3ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40c3ce:	bfde      	ittt	le
  40c3d0:	2000      	movle	r0, #0
  40c3d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40c3d6:	bd70      	pople	{r4, r5, r6, pc}
  40c3d8:	f1c4 0400 	rsb	r4, r4, #0
  40c3dc:	3c20      	subs	r4, #32
  40c3de:	da35      	bge.n	40c44c <__aeabi_dmul+0x164>
  40c3e0:	340c      	adds	r4, #12
  40c3e2:	dc1b      	bgt.n	40c41c <__aeabi_dmul+0x134>
  40c3e4:	f104 0414 	add.w	r4, r4, #20
  40c3e8:	f1c4 0520 	rsb	r5, r4, #32
  40c3ec:	fa00 f305 	lsl.w	r3, r0, r5
  40c3f0:	fa20 f004 	lsr.w	r0, r0, r4
  40c3f4:	fa01 f205 	lsl.w	r2, r1, r5
  40c3f8:	ea40 0002 	orr.w	r0, r0, r2
  40c3fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40c400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40c404:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c408:	fa21 f604 	lsr.w	r6, r1, r4
  40c40c:	eb42 0106 	adc.w	r1, r2, r6
  40c410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c414:	bf08      	it	eq
  40c416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c41a:	bd70      	pop	{r4, r5, r6, pc}
  40c41c:	f1c4 040c 	rsb	r4, r4, #12
  40c420:	f1c4 0520 	rsb	r5, r4, #32
  40c424:	fa00 f304 	lsl.w	r3, r0, r4
  40c428:	fa20 f005 	lsr.w	r0, r0, r5
  40c42c:	fa01 f204 	lsl.w	r2, r1, r4
  40c430:	ea40 0002 	orr.w	r0, r0, r2
  40c434:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c438:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40c43c:	f141 0100 	adc.w	r1, r1, #0
  40c440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c444:	bf08      	it	eq
  40c446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c44a:	bd70      	pop	{r4, r5, r6, pc}
  40c44c:	f1c4 0520 	rsb	r5, r4, #32
  40c450:	fa00 f205 	lsl.w	r2, r0, r5
  40c454:	ea4e 0e02 	orr.w	lr, lr, r2
  40c458:	fa20 f304 	lsr.w	r3, r0, r4
  40c45c:	fa01 f205 	lsl.w	r2, r1, r5
  40c460:	ea43 0302 	orr.w	r3, r3, r2
  40c464:	fa21 f004 	lsr.w	r0, r1, r4
  40c468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c46c:	fa21 f204 	lsr.w	r2, r1, r4
  40c470:	ea20 0002 	bic.w	r0, r0, r2
  40c474:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40c478:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40c47c:	bf08      	it	eq
  40c47e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40c482:	bd70      	pop	{r4, r5, r6, pc}
  40c484:	f094 0f00 	teq	r4, #0
  40c488:	d10f      	bne.n	40c4aa <__aeabi_dmul+0x1c2>
  40c48a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40c48e:	0040      	lsls	r0, r0, #1
  40c490:	eb41 0101 	adc.w	r1, r1, r1
  40c494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c498:	bf08      	it	eq
  40c49a:	3c01      	subeq	r4, #1
  40c49c:	d0f7      	beq.n	40c48e <__aeabi_dmul+0x1a6>
  40c49e:	ea41 0106 	orr.w	r1, r1, r6
  40c4a2:	f095 0f00 	teq	r5, #0
  40c4a6:	bf18      	it	ne
  40c4a8:	4770      	bxne	lr
  40c4aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40c4ae:	0052      	lsls	r2, r2, #1
  40c4b0:	eb43 0303 	adc.w	r3, r3, r3
  40c4b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40c4b8:	bf08      	it	eq
  40c4ba:	3d01      	subeq	r5, #1
  40c4bc:	d0f7      	beq.n	40c4ae <__aeabi_dmul+0x1c6>
  40c4be:	ea43 0306 	orr.w	r3, r3, r6
  40c4c2:	4770      	bx	lr
  40c4c4:	ea94 0f0c 	teq	r4, ip
  40c4c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c4cc:	bf18      	it	ne
  40c4ce:	ea95 0f0c 	teqne	r5, ip
  40c4d2:	d00c      	beq.n	40c4ee <__aeabi_dmul+0x206>
  40c4d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c4d8:	bf18      	it	ne
  40c4da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c4de:	d1d1      	bne.n	40c484 <__aeabi_dmul+0x19c>
  40c4e0:	ea81 0103 	eor.w	r1, r1, r3
  40c4e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c4e8:	f04f 0000 	mov.w	r0, #0
  40c4ec:	bd70      	pop	{r4, r5, r6, pc}
  40c4ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c4f2:	bf06      	itte	eq
  40c4f4:	4610      	moveq	r0, r2
  40c4f6:	4619      	moveq	r1, r3
  40c4f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c4fc:	d019      	beq.n	40c532 <__aeabi_dmul+0x24a>
  40c4fe:	ea94 0f0c 	teq	r4, ip
  40c502:	d102      	bne.n	40c50a <__aeabi_dmul+0x222>
  40c504:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40c508:	d113      	bne.n	40c532 <__aeabi_dmul+0x24a>
  40c50a:	ea95 0f0c 	teq	r5, ip
  40c50e:	d105      	bne.n	40c51c <__aeabi_dmul+0x234>
  40c510:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40c514:	bf1c      	itt	ne
  40c516:	4610      	movne	r0, r2
  40c518:	4619      	movne	r1, r3
  40c51a:	d10a      	bne.n	40c532 <__aeabi_dmul+0x24a>
  40c51c:	ea81 0103 	eor.w	r1, r1, r3
  40c520:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40c524:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40c52c:	f04f 0000 	mov.w	r0, #0
  40c530:	bd70      	pop	{r4, r5, r6, pc}
  40c532:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40c536:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40c53a:	bd70      	pop	{r4, r5, r6, pc}

0040c53c <__aeabi_ddiv>:
  40c53c:	b570      	push	{r4, r5, r6, lr}
  40c53e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40c542:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40c546:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40c54a:	bf1d      	ittte	ne
  40c54c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40c550:	ea94 0f0c 	teqne	r4, ip
  40c554:	ea95 0f0c 	teqne	r5, ip
  40c558:	f000 f8a7 	bleq	40c6aa <__aeabi_ddiv+0x16e>
  40c55c:	eba4 0405 	sub.w	r4, r4, r5
  40c560:	ea81 0e03 	eor.w	lr, r1, r3
  40c564:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c568:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40c56c:	f000 8088 	beq.w	40c680 <__aeabi_ddiv+0x144>
  40c570:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40c574:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40c578:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40c57c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40c580:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40c584:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40c588:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40c58c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40c590:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40c594:	429d      	cmp	r5, r3
  40c596:	bf08      	it	eq
  40c598:	4296      	cmpeq	r6, r2
  40c59a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40c59e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40c5a2:	d202      	bcs.n	40c5aa <__aeabi_ddiv+0x6e>
  40c5a4:	085b      	lsrs	r3, r3, #1
  40c5a6:	ea4f 0232 	mov.w	r2, r2, rrx
  40c5aa:	1ab6      	subs	r6, r6, r2
  40c5ac:	eb65 0503 	sbc.w	r5, r5, r3
  40c5b0:	085b      	lsrs	r3, r3, #1
  40c5b2:	ea4f 0232 	mov.w	r2, r2, rrx
  40c5b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40c5ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40c5be:	ebb6 0e02 	subs.w	lr, r6, r2
  40c5c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c5c6:	bf22      	ittt	cs
  40c5c8:	1ab6      	subcs	r6, r6, r2
  40c5ca:	4675      	movcs	r5, lr
  40c5cc:	ea40 000c 	orrcs.w	r0, r0, ip
  40c5d0:	085b      	lsrs	r3, r3, #1
  40c5d2:	ea4f 0232 	mov.w	r2, r2, rrx
  40c5d6:	ebb6 0e02 	subs.w	lr, r6, r2
  40c5da:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c5de:	bf22      	ittt	cs
  40c5e0:	1ab6      	subcs	r6, r6, r2
  40c5e2:	4675      	movcs	r5, lr
  40c5e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40c5e8:	085b      	lsrs	r3, r3, #1
  40c5ea:	ea4f 0232 	mov.w	r2, r2, rrx
  40c5ee:	ebb6 0e02 	subs.w	lr, r6, r2
  40c5f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c5f6:	bf22      	ittt	cs
  40c5f8:	1ab6      	subcs	r6, r6, r2
  40c5fa:	4675      	movcs	r5, lr
  40c5fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40c600:	085b      	lsrs	r3, r3, #1
  40c602:	ea4f 0232 	mov.w	r2, r2, rrx
  40c606:	ebb6 0e02 	subs.w	lr, r6, r2
  40c60a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40c60e:	bf22      	ittt	cs
  40c610:	1ab6      	subcs	r6, r6, r2
  40c612:	4675      	movcs	r5, lr
  40c614:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40c618:	ea55 0e06 	orrs.w	lr, r5, r6
  40c61c:	d018      	beq.n	40c650 <__aeabi_ddiv+0x114>
  40c61e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40c622:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40c626:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40c62a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40c62e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40c632:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40c636:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40c63a:	d1c0      	bne.n	40c5be <__aeabi_ddiv+0x82>
  40c63c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c640:	d10b      	bne.n	40c65a <__aeabi_ddiv+0x11e>
  40c642:	ea41 0100 	orr.w	r1, r1, r0
  40c646:	f04f 0000 	mov.w	r0, #0
  40c64a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40c64e:	e7b6      	b.n	40c5be <__aeabi_ddiv+0x82>
  40c650:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40c654:	bf04      	itt	eq
  40c656:	4301      	orreq	r1, r0
  40c658:	2000      	moveq	r0, #0
  40c65a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40c65e:	bf88      	it	hi
  40c660:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40c664:	f63f aeaf 	bhi.w	40c3c6 <__aeabi_dmul+0xde>
  40c668:	ebb5 0c03 	subs.w	ip, r5, r3
  40c66c:	bf04      	itt	eq
  40c66e:	ebb6 0c02 	subseq.w	ip, r6, r2
  40c672:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40c676:	f150 0000 	adcs.w	r0, r0, #0
  40c67a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40c67e:	bd70      	pop	{r4, r5, r6, pc}
  40c680:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40c684:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40c688:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40c68c:	bfc2      	ittt	gt
  40c68e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40c692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40c696:	bd70      	popgt	{r4, r5, r6, pc}
  40c698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c69c:	f04f 0e00 	mov.w	lr, #0
  40c6a0:	3c01      	subs	r4, #1
  40c6a2:	e690      	b.n	40c3c6 <__aeabi_dmul+0xde>
  40c6a4:	ea45 0e06 	orr.w	lr, r5, r6
  40c6a8:	e68d      	b.n	40c3c6 <__aeabi_dmul+0xde>
  40c6aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40c6ae:	ea94 0f0c 	teq	r4, ip
  40c6b2:	bf08      	it	eq
  40c6b4:	ea95 0f0c 	teqeq	r5, ip
  40c6b8:	f43f af3b 	beq.w	40c532 <__aeabi_dmul+0x24a>
  40c6bc:	ea94 0f0c 	teq	r4, ip
  40c6c0:	d10a      	bne.n	40c6d8 <__aeabi_ddiv+0x19c>
  40c6c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40c6c6:	f47f af34 	bne.w	40c532 <__aeabi_dmul+0x24a>
  40c6ca:	ea95 0f0c 	teq	r5, ip
  40c6ce:	f47f af25 	bne.w	40c51c <__aeabi_dmul+0x234>
  40c6d2:	4610      	mov	r0, r2
  40c6d4:	4619      	mov	r1, r3
  40c6d6:	e72c      	b.n	40c532 <__aeabi_dmul+0x24a>
  40c6d8:	ea95 0f0c 	teq	r5, ip
  40c6dc:	d106      	bne.n	40c6ec <__aeabi_ddiv+0x1b0>
  40c6de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40c6e2:	f43f aefd 	beq.w	40c4e0 <__aeabi_dmul+0x1f8>
  40c6e6:	4610      	mov	r0, r2
  40c6e8:	4619      	mov	r1, r3
  40c6ea:	e722      	b.n	40c532 <__aeabi_dmul+0x24a>
  40c6ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40c6f0:	bf18      	it	ne
  40c6f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40c6f6:	f47f aec5 	bne.w	40c484 <__aeabi_dmul+0x19c>
  40c6fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40c6fe:	f47f af0d 	bne.w	40c51c <__aeabi_dmul+0x234>
  40c702:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40c706:	f47f aeeb 	bne.w	40c4e0 <__aeabi_dmul+0x1f8>
  40c70a:	e712      	b.n	40c532 <__aeabi_dmul+0x24a>

0040c70c <__gedf2>:
  40c70c:	f04f 3cff 	mov.w	ip, #4294967295
  40c710:	e006      	b.n	40c720 <__cmpdf2+0x4>
  40c712:	bf00      	nop

0040c714 <__ledf2>:
  40c714:	f04f 0c01 	mov.w	ip, #1
  40c718:	e002      	b.n	40c720 <__cmpdf2+0x4>
  40c71a:	bf00      	nop

0040c71c <__cmpdf2>:
  40c71c:	f04f 0c01 	mov.w	ip, #1
  40c720:	f84d cd04 	str.w	ip, [sp, #-4]!
  40c724:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c728:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c72c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c730:	bf18      	it	ne
  40c732:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c736:	d01b      	beq.n	40c770 <__cmpdf2+0x54>
  40c738:	b001      	add	sp, #4
  40c73a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c73e:	bf0c      	ite	eq
  40c740:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c744:	ea91 0f03 	teqne	r1, r3
  40c748:	bf02      	ittt	eq
  40c74a:	ea90 0f02 	teqeq	r0, r2
  40c74e:	2000      	moveq	r0, #0
  40c750:	4770      	bxeq	lr
  40c752:	f110 0f00 	cmn.w	r0, #0
  40c756:	ea91 0f03 	teq	r1, r3
  40c75a:	bf58      	it	pl
  40c75c:	4299      	cmppl	r1, r3
  40c75e:	bf08      	it	eq
  40c760:	4290      	cmpeq	r0, r2
  40c762:	bf2c      	ite	cs
  40c764:	17d8      	asrcs	r0, r3, #31
  40c766:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c76a:	f040 0001 	orr.w	r0, r0, #1
  40c76e:	4770      	bx	lr
  40c770:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c774:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c778:	d102      	bne.n	40c780 <__cmpdf2+0x64>
  40c77a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c77e:	d107      	bne.n	40c790 <__cmpdf2+0x74>
  40c780:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c788:	d1d6      	bne.n	40c738 <__cmpdf2+0x1c>
  40c78a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c78e:	d0d3      	beq.n	40c738 <__cmpdf2+0x1c>
  40c790:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c794:	4770      	bx	lr
  40c796:	bf00      	nop

0040c798 <__aeabi_cdrcmple>:
  40c798:	4684      	mov	ip, r0
  40c79a:	4610      	mov	r0, r2
  40c79c:	4662      	mov	r2, ip
  40c79e:	468c      	mov	ip, r1
  40c7a0:	4619      	mov	r1, r3
  40c7a2:	4663      	mov	r3, ip
  40c7a4:	e000      	b.n	40c7a8 <__aeabi_cdcmpeq>
  40c7a6:	bf00      	nop

0040c7a8 <__aeabi_cdcmpeq>:
  40c7a8:	b501      	push	{r0, lr}
  40c7aa:	f7ff ffb7 	bl	40c71c <__cmpdf2>
  40c7ae:	2800      	cmp	r0, #0
  40c7b0:	bf48      	it	mi
  40c7b2:	f110 0f00 	cmnmi.w	r0, #0
  40c7b6:	bd01      	pop	{r0, pc}

0040c7b8 <__aeabi_dcmpeq>:
  40c7b8:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c7bc:	f7ff fff4 	bl	40c7a8 <__aeabi_cdcmpeq>
  40c7c0:	bf0c      	ite	eq
  40c7c2:	2001      	moveq	r0, #1
  40c7c4:	2000      	movne	r0, #0
  40c7c6:	f85d fb08 	ldr.w	pc, [sp], #8
  40c7ca:	bf00      	nop

0040c7cc <__aeabi_dcmplt>:
  40c7cc:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c7d0:	f7ff ffea 	bl	40c7a8 <__aeabi_cdcmpeq>
  40c7d4:	bf34      	ite	cc
  40c7d6:	2001      	movcc	r0, #1
  40c7d8:	2000      	movcs	r0, #0
  40c7da:	f85d fb08 	ldr.w	pc, [sp], #8
  40c7de:	bf00      	nop

0040c7e0 <__aeabi_dcmple>:
  40c7e0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c7e4:	f7ff ffe0 	bl	40c7a8 <__aeabi_cdcmpeq>
  40c7e8:	bf94      	ite	ls
  40c7ea:	2001      	movls	r0, #1
  40c7ec:	2000      	movhi	r0, #0
  40c7ee:	f85d fb08 	ldr.w	pc, [sp], #8
  40c7f2:	bf00      	nop

0040c7f4 <__aeabi_dcmpge>:
  40c7f4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c7f8:	f7ff ffce 	bl	40c798 <__aeabi_cdrcmple>
  40c7fc:	bf94      	ite	ls
  40c7fe:	2001      	movls	r0, #1
  40c800:	2000      	movhi	r0, #0
  40c802:	f85d fb08 	ldr.w	pc, [sp], #8
  40c806:	bf00      	nop

0040c808 <__aeabi_dcmpgt>:
  40c808:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c80c:	f7ff ffc4 	bl	40c798 <__aeabi_cdrcmple>
  40c810:	bf34      	ite	cc
  40c812:	2001      	movcc	r0, #1
  40c814:	2000      	movcs	r0, #0
  40c816:	f85d fb08 	ldr.w	pc, [sp], #8
  40c81a:	bf00      	nop

0040c81c <__aeabi_d2iz>:
  40c81c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c820:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c824:	d215      	bcs.n	40c852 <__aeabi_d2iz+0x36>
  40c826:	d511      	bpl.n	40c84c <__aeabi_d2iz+0x30>
  40c828:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c82c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c830:	d912      	bls.n	40c858 <__aeabi_d2iz+0x3c>
  40c832:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c83a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c83e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c842:	fa23 f002 	lsr.w	r0, r3, r2
  40c846:	bf18      	it	ne
  40c848:	4240      	negne	r0, r0
  40c84a:	4770      	bx	lr
  40c84c:	f04f 0000 	mov.w	r0, #0
  40c850:	4770      	bx	lr
  40c852:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c856:	d105      	bne.n	40c864 <__aeabi_d2iz+0x48>
  40c858:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c85c:	bf08      	it	eq
  40c85e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c862:	4770      	bx	lr
  40c864:	f04f 0000 	mov.w	r0, #0
  40c868:	4770      	bx	lr
  40c86a:	bf00      	nop

0040c86c <__aeabi_d2uiz>:
  40c86c:	004a      	lsls	r2, r1, #1
  40c86e:	d211      	bcs.n	40c894 <__aeabi_d2uiz+0x28>
  40c870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c874:	d211      	bcs.n	40c89a <__aeabi_d2uiz+0x2e>
  40c876:	d50d      	bpl.n	40c894 <__aeabi_d2uiz+0x28>
  40c878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c87c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c880:	d40e      	bmi.n	40c8a0 <__aeabi_d2uiz+0x34>
  40c882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c88a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c88e:	fa23 f002 	lsr.w	r0, r3, r2
  40c892:	4770      	bx	lr
  40c894:	f04f 0000 	mov.w	r0, #0
  40c898:	4770      	bx	lr
  40c89a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c89e:	d102      	bne.n	40c8a6 <__aeabi_d2uiz+0x3a>
  40c8a0:	f04f 30ff 	mov.w	r0, #4294967295
  40c8a4:	4770      	bx	lr
  40c8a6:	f04f 0000 	mov.w	r0, #0
  40c8aa:	4770      	bx	lr

0040c8ac <__aeabi_d2f>:
  40c8ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c8b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  40c8b4:	bf24      	itt	cs
  40c8b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40c8ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40c8be:	d90d      	bls.n	40c8dc <__aeabi_d2f+0x30>
  40c8c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40c8c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  40c8c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  40c8cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40c8d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  40c8d4:	bf08      	it	eq
  40c8d6:	f020 0001 	biceq.w	r0, r0, #1
  40c8da:	4770      	bx	lr
  40c8dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40c8e0:	d121      	bne.n	40c926 <__aeabi_d2f+0x7a>
  40c8e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  40c8e6:	bfbc      	itt	lt
  40c8e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  40c8ec:	4770      	bxlt	lr
  40c8ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40c8f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
  40c8f6:	f1c2 0218 	rsb	r2, r2, #24
  40c8fa:	f1c2 0c20 	rsb	ip, r2, #32
  40c8fe:	fa10 f30c 	lsls.w	r3, r0, ip
  40c902:	fa20 f002 	lsr.w	r0, r0, r2
  40c906:	bf18      	it	ne
  40c908:	f040 0001 	orrne.w	r0, r0, #1
  40c90c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  40c914:	fa03 fc0c 	lsl.w	ip, r3, ip
  40c918:	ea40 000c 	orr.w	r0, r0, ip
  40c91c:	fa23 f302 	lsr.w	r3, r3, r2
  40c920:	ea4f 0343 	mov.w	r3, r3, lsl #1
  40c924:	e7cc      	b.n	40c8c0 <__aeabi_d2f+0x14>
  40c926:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40c92a:	d107      	bne.n	40c93c <__aeabi_d2f+0x90>
  40c92c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40c930:	bf1e      	ittt	ne
  40c932:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40c936:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40c93a:	4770      	bxne	lr
  40c93c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40c940:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40c944:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40c948:	4770      	bx	lr
  40c94a:	bf00      	nop

0040c94c <__aeabi_uldivmod>:
  40c94c:	b94b      	cbnz	r3, 40c962 <__aeabi_uldivmod+0x16>
  40c94e:	b942      	cbnz	r2, 40c962 <__aeabi_uldivmod+0x16>
  40c950:	2900      	cmp	r1, #0
  40c952:	bf08      	it	eq
  40c954:	2800      	cmpeq	r0, #0
  40c956:	d002      	beq.n	40c95e <__aeabi_uldivmod+0x12>
  40c958:	f04f 31ff 	mov.w	r1, #4294967295
  40c95c:	4608      	mov	r0, r1
  40c95e:	f000 b83b 	b.w	40c9d8 <__aeabi_idiv0>
  40c962:	b082      	sub	sp, #8
  40c964:	46ec      	mov	ip, sp
  40c966:	e92d 5000 	stmdb	sp!, {ip, lr}
  40c96a:	f000 f81d 	bl	40c9a8 <__gnu_uldivmod_helper>
  40c96e:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c972:	b002      	add	sp, #8
  40c974:	bc0c      	pop	{r2, r3}
  40c976:	4770      	bx	lr

0040c978 <__gnu_ldivmod_helper>:
  40c978:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c97c:	9e06      	ldr	r6, [sp, #24]
  40c97e:	4614      	mov	r4, r2
  40c980:	461d      	mov	r5, r3
  40c982:	4680      	mov	r8, r0
  40c984:	4689      	mov	r9, r1
  40c986:	f000 f829 	bl	40c9dc <__divdi3>
  40c98a:	fb04 f301 	mul.w	r3, r4, r1
  40c98e:	fb00 3305 	mla	r3, r0, r5, r3
  40c992:	fba4 4500 	umull	r4, r5, r4, r0
  40c996:	441d      	add	r5, r3
  40c998:	ebb8 0404 	subs.w	r4, r8, r4
  40c99c:	eb69 0505 	sbc.w	r5, r9, r5
  40c9a0:	e9c6 4500 	strd	r4, r5, [r6]
  40c9a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c9a8 <__gnu_uldivmod_helper>:
  40c9a8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  40c9ac:	9e06      	ldr	r6, [sp, #24]
  40c9ae:	4614      	mov	r4, r2
  40c9b0:	4680      	mov	r8, r0
  40c9b2:	4689      	mov	r9, r1
  40c9b4:	461d      	mov	r5, r3
  40c9b6:	f000 f95d 	bl	40cc74 <__udivdi3>
  40c9ba:	fb00 f505 	mul.w	r5, r0, r5
  40c9be:	fb04 5301 	mla	r3, r4, r1, r5
  40c9c2:	fba0 4504 	umull	r4, r5, r0, r4
  40c9c6:	441d      	add	r5, r3
  40c9c8:	ebb8 0404 	subs.w	r4, r8, r4
  40c9cc:	eb69 0505 	sbc.w	r5, r9, r5
  40c9d0:	e9c6 4500 	strd	r4, r5, [r6]
  40c9d4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0040c9d8 <__aeabi_idiv0>:
  40c9d8:	4770      	bx	lr
  40c9da:	bf00      	nop

0040c9dc <__divdi3>:
  40c9dc:	2900      	cmp	r1, #0
  40c9de:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40c9e2:	f2c0 809f 	blt.w	40cb24 <__divdi3+0x148>
  40c9e6:	2400      	movs	r4, #0
  40c9e8:	2b00      	cmp	r3, #0
  40c9ea:	f2c0 8096 	blt.w	40cb1a <__divdi3+0x13e>
  40c9ee:	4615      	mov	r5, r2
  40c9f0:	4606      	mov	r6, r0
  40c9f2:	460f      	mov	r7, r1
  40c9f4:	2b00      	cmp	r3, #0
  40c9f6:	d13e      	bne.n	40ca76 <__divdi3+0x9a>
  40c9f8:	428a      	cmp	r2, r1
  40c9fa:	d957      	bls.n	40caac <__divdi3+0xd0>
  40c9fc:	fab2 f382 	clz	r3, r2
  40ca00:	b14b      	cbz	r3, 40ca16 <__divdi3+0x3a>
  40ca02:	f1c3 0220 	rsb	r2, r3, #32
  40ca06:	fa01 f703 	lsl.w	r7, r1, r3
  40ca0a:	fa20 f202 	lsr.w	r2, r0, r2
  40ca0e:	409d      	lsls	r5, r3
  40ca10:	4317      	orrs	r7, r2
  40ca12:	fa00 f603 	lsl.w	r6, r0, r3
  40ca16:	0c29      	lsrs	r1, r5, #16
  40ca18:	fbb7 f2f1 	udiv	r2, r7, r1
  40ca1c:	0c33      	lsrs	r3, r6, #16
  40ca1e:	fb01 7c12 	mls	ip, r1, r2, r7
  40ca22:	b2a8      	uxth	r0, r5
  40ca24:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
  40ca28:	fb00 f302 	mul.w	r3, r0, r2
  40ca2c:	42bb      	cmp	r3, r7
  40ca2e:	d909      	bls.n	40ca44 <__divdi3+0x68>
  40ca30:	197f      	adds	r7, r7, r5
  40ca32:	f102 3cff 	add.w	ip, r2, #4294967295
  40ca36:	f080 8101 	bcs.w	40cc3c <__divdi3+0x260>
  40ca3a:	42bb      	cmp	r3, r7
  40ca3c:	f240 80fe 	bls.w	40cc3c <__divdi3+0x260>
  40ca40:	3a02      	subs	r2, #2
  40ca42:	442f      	add	r7, r5
  40ca44:	1aff      	subs	r7, r7, r3
  40ca46:	fbb7 f3f1 	udiv	r3, r7, r1
  40ca4a:	b2b6      	uxth	r6, r6
  40ca4c:	fb01 7113 	mls	r1, r1, r3, r7
  40ca50:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40ca54:	fb00 f003 	mul.w	r0, r0, r3
  40ca58:	4288      	cmp	r0, r1
  40ca5a:	d908      	bls.n	40ca6e <__divdi3+0x92>
  40ca5c:	1949      	adds	r1, r1, r5
  40ca5e:	f103 37ff 	add.w	r7, r3, #4294967295
  40ca62:	f080 80ed 	bcs.w	40cc40 <__divdi3+0x264>
  40ca66:	4288      	cmp	r0, r1
  40ca68:	f240 80ea 	bls.w	40cc40 <__divdi3+0x264>
  40ca6c:	3b02      	subs	r3, #2
  40ca6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40ca72:	2300      	movs	r3, #0
  40ca74:	e003      	b.n	40ca7e <__divdi3+0xa2>
  40ca76:	428b      	cmp	r3, r1
  40ca78:	d90a      	bls.n	40ca90 <__divdi3+0xb4>
  40ca7a:	2300      	movs	r3, #0
  40ca7c:	461a      	mov	r2, r3
  40ca7e:	4610      	mov	r0, r2
  40ca80:	4619      	mov	r1, r3
  40ca82:	b114      	cbz	r4, 40ca8a <__divdi3+0xae>
  40ca84:	4240      	negs	r0, r0
  40ca86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40ca8a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40ca8e:	4770      	bx	lr
  40ca90:	fab3 f883 	clz	r8, r3
  40ca94:	f1b8 0f00 	cmp.w	r8, #0
  40ca98:	f040 8084 	bne.w	40cba4 <__divdi3+0x1c8>
  40ca9c:	428b      	cmp	r3, r1
  40ca9e:	d302      	bcc.n	40caa6 <__divdi3+0xca>
  40caa0:	4282      	cmp	r2, r0
  40caa2:	f200 80de 	bhi.w	40cc62 <__divdi3+0x286>
  40caa6:	2300      	movs	r3, #0
  40caa8:	2201      	movs	r2, #1
  40caaa:	e7e8      	b.n	40ca7e <__divdi3+0xa2>
  40caac:	b912      	cbnz	r2, 40cab4 <__divdi3+0xd8>
  40caae:	2301      	movs	r3, #1
  40cab0:	fbb3 f5f2 	udiv	r5, r3, r2
  40cab4:	fab5 f285 	clz	r2, r5
  40cab8:	2a00      	cmp	r2, #0
  40caba:	d139      	bne.n	40cb30 <__divdi3+0x154>
  40cabc:	1b7f      	subs	r7, r7, r5
  40cabe:	0c28      	lsrs	r0, r5, #16
  40cac0:	fa1f fc85 	uxth.w	ip, r5
  40cac4:	2301      	movs	r3, #1
  40cac6:	fbb7 f1f0 	udiv	r1, r7, r0
  40caca:	0c32      	lsrs	r2, r6, #16
  40cacc:	fb00 7711 	mls	r7, r0, r1, r7
  40cad0:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40cad4:	fb0c f201 	mul.w	r2, ip, r1
  40cad8:	42ba      	cmp	r2, r7
  40cada:	d907      	bls.n	40caec <__divdi3+0x110>
  40cadc:	197f      	adds	r7, r7, r5
  40cade:	f101 38ff 	add.w	r8, r1, #4294967295
  40cae2:	d202      	bcs.n	40caea <__divdi3+0x10e>
  40cae4:	42ba      	cmp	r2, r7
  40cae6:	f200 80c1 	bhi.w	40cc6c <__divdi3+0x290>
  40caea:	4641      	mov	r1, r8
  40caec:	1abf      	subs	r7, r7, r2
  40caee:	fbb7 f2f0 	udiv	r2, r7, r0
  40caf2:	b2b6      	uxth	r6, r6
  40caf4:	fb00 7012 	mls	r0, r0, r2, r7
  40caf8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  40cafc:	fb0c fc02 	mul.w	ip, ip, r2
  40cb00:	4584      	cmp	ip, r0
  40cb02:	d907      	bls.n	40cb14 <__divdi3+0x138>
  40cb04:	1940      	adds	r0, r0, r5
  40cb06:	f102 37ff 	add.w	r7, r2, #4294967295
  40cb0a:	d202      	bcs.n	40cb12 <__divdi3+0x136>
  40cb0c:	4584      	cmp	ip, r0
  40cb0e:	f200 80ab 	bhi.w	40cc68 <__divdi3+0x28c>
  40cb12:	463a      	mov	r2, r7
  40cb14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40cb18:	e7b1      	b.n	40ca7e <__divdi3+0xa2>
  40cb1a:	43e4      	mvns	r4, r4
  40cb1c:	4252      	negs	r2, r2
  40cb1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40cb22:	e764      	b.n	40c9ee <__divdi3+0x12>
  40cb24:	4240      	negs	r0, r0
  40cb26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40cb2a:	f04f 34ff 	mov.w	r4, #4294967295
  40cb2e:	e75b      	b.n	40c9e8 <__divdi3+0xc>
  40cb30:	4095      	lsls	r5, r2
  40cb32:	f1c2 0320 	rsb	r3, r2, #32
  40cb36:	fa27 f103 	lsr.w	r1, r7, r3
  40cb3a:	0c28      	lsrs	r0, r5, #16
  40cb3c:	fa26 f303 	lsr.w	r3, r6, r3
  40cb40:	4097      	lsls	r7, r2
  40cb42:	fbb1 f8f0 	udiv	r8, r1, r0
  40cb46:	431f      	orrs	r7, r3
  40cb48:	0c3b      	lsrs	r3, r7, #16
  40cb4a:	fb00 1118 	mls	r1, r0, r8, r1
  40cb4e:	fa1f fc85 	uxth.w	ip, r5
  40cb52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  40cb56:	fb0c f308 	mul.w	r3, ip, r8
  40cb5a:	428b      	cmp	r3, r1
  40cb5c:	fa06 f602 	lsl.w	r6, r6, r2
  40cb60:	d908      	bls.n	40cb74 <__divdi3+0x198>
  40cb62:	1949      	adds	r1, r1, r5
  40cb64:	f108 32ff 	add.w	r2, r8, #4294967295
  40cb68:	d279      	bcs.n	40cc5e <__divdi3+0x282>
  40cb6a:	428b      	cmp	r3, r1
  40cb6c:	d977      	bls.n	40cc5e <__divdi3+0x282>
  40cb6e:	f1a8 0802 	sub.w	r8, r8, #2
  40cb72:	4429      	add	r1, r5
  40cb74:	1ac9      	subs	r1, r1, r3
  40cb76:	fbb1 f3f0 	udiv	r3, r1, r0
  40cb7a:	b2bf      	uxth	r7, r7
  40cb7c:	fb00 1113 	mls	r1, r0, r3, r1
  40cb80:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  40cb84:	fb0c f203 	mul.w	r2, ip, r3
  40cb88:	42ba      	cmp	r2, r7
  40cb8a:	d907      	bls.n	40cb9c <__divdi3+0x1c0>
  40cb8c:	197f      	adds	r7, r7, r5
  40cb8e:	f103 31ff 	add.w	r1, r3, #4294967295
  40cb92:	d260      	bcs.n	40cc56 <__divdi3+0x27a>
  40cb94:	42ba      	cmp	r2, r7
  40cb96:	d95e      	bls.n	40cc56 <__divdi3+0x27a>
  40cb98:	3b02      	subs	r3, #2
  40cb9a:	442f      	add	r7, r5
  40cb9c:	1abf      	subs	r7, r7, r2
  40cb9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40cba2:	e790      	b.n	40cac6 <__divdi3+0xea>
  40cba4:	f1c8 0220 	rsb	r2, r8, #32
  40cba8:	fa03 fc08 	lsl.w	ip, r3, r8
  40cbac:	fa25 f302 	lsr.w	r3, r5, r2
  40cbb0:	ea43 0c0c 	orr.w	ip, r3, ip
  40cbb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40cbb8:	fa21 f302 	lsr.w	r3, r1, r2
  40cbbc:	fa01 f708 	lsl.w	r7, r1, r8
  40cbc0:	fa20 f202 	lsr.w	r2, r0, r2
  40cbc4:	fbb3 f1f9 	udiv	r1, r3, r9
  40cbc8:	4317      	orrs	r7, r2
  40cbca:	fb09 3311 	mls	r3, r9, r1, r3
  40cbce:	0c3a      	lsrs	r2, r7, #16
  40cbd0:	fa1f fb8c 	uxth.w	fp, ip
  40cbd4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  40cbd8:	fb0b fa01 	mul.w	sl, fp, r1
  40cbdc:	459a      	cmp	sl, r3
  40cbde:	fa05 f008 	lsl.w	r0, r5, r8
  40cbe2:	d908      	bls.n	40cbf6 <__divdi3+0x21a>
  40cbe4:	eb13 030c 	adds.w	r3, r3, ip
  40cbe8:	f101 32ff 	add.w	r2, r1, #4294967295
  40cbec:	d235      	bcs.n	40cc5a <__divdi3+0x27e>
  40cbee:	459a      	cmp	sl, r3
  40cbf0:	d933      	bls.n	40cc5a <__divdi3+0x27e>
  40cbf2:	3902      	subs	r1, #2
  40cbf4:	4463      	add	r3, ip
  40cbf6:	ebca 0303 	rsb	r3, sl, r3
  40cbfa:	fbb3 f2f9 	udiv	r2, r3, r9
  40cbfe:	fb09 3312 	mls	r3, r9, r2, r3
  40cc02:	b2bf      	uxth	r7, r7
  40cc04:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40cc08:	fb0b f902 	mul.w	r9, fp, r2
  40cc0c:	45b9      	cmp	r9, r7
  40cc0e:	d908      	bls.n	40cc22 <__divdi3+0x246>
  40cc10:	eb17 070c 	adds.w	r7, r7, ip
  40cc14:	f102 33ff 	add.w	r3, r2, #4294967295
  40cc18:	d21b      	bcs.n	40cc52 <__divdi3+0x276>
  40cc1a:	45b9      	cmp	r9, r7
  40cc1c:	d919      	bls.n	40cc52 <__divdi3+0x276>
  40cc1e:	3a02      	subs	r2, #2
  40cc20:	4467      	add	r7, ip
  40cc22:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  40cc26:	fba5 0100 	umull	r0, r1, r5, r0
  40cc2a:	ebc9 0707 	rsb	r7, r9, r7
  40cc2e:	428f      	cmp	r7, r1
  40cc30:	f04f 0300 	mov.w	r3, #0
  40cc34:	d30a      	bcc.n	40cc4c <__divdi3+0x270>
  40cc36:	d005      	beq.n	40cc44 <__divdi3+0x268>
  40cc38:	462a      	mov	r2, r5
  40cc3a:	e720      	b.n	40ca7e <__divdi3+0xa2>
  40cc3c:	4662      	mov	r2, ip
  40cc3e:	e701      	b.n	40ca44 <__divdi3+0x68>
  40cc40:	463b      	mov	r3, r7
  40cc42:	e714      	b.n	40ca6e <__divdi3+0x92>
  40cc44:	fa06 f608 	lsl.w	r6, r6, r8
  40cc48:	4286      	cmp	r6, r0
  40cc4a:	d2f5      	bcs.n	40cc38 <__divdi3+0x25c>
  40cc4c:	1e6a      	subs	r2, r5, #1
  40cc4e:	2300      	movs	r3, #0
  40cc50:	e715      	b.n	40ca7e <__divdi3+0xa2>
  40cc52:	461a      	mov	r2, r3
  40cc54:	e7e5      	b.n	40cc22 <__divdi3+0x246>
  40cc56:	460b      	mov	r3, r1
  40cc58:	e7a0      	b.n	40cb9c <__divdi3+0x1c0>
  40cc5a:	4611      	mov	r1, r2
  40cc5c:	e7cb      	b.n	40cbf6 <__divdi3+0x21a>
  40cc5e:	4690      	mov	r8, r2
  40cc60:	e788      	b.n	40cb74 <__divdi3+0x198>
  40cc62:	4643      	mov	r3, r8
  40cc64:	4642      	mov	r2, r8
  40cc66:	e70a      	b.n	40ca7e <__divdi3+0xa2>
  40cc68:	3a02      	subs	r2, #2
  40cc6a:	e753      	b.n	40cb14 <__divdi3+0x138>
  40cc6c:	3902      	subs	r1, #2
  40cc6e:	442f      	add	r7, r5
  40cc70:	e73c      	b.n	40caec <__divdi3+0x110>
  40cc72:	bf00      	nop

0040cc74 <__udivdi3>:
  40cc74:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40cc78:	4614      	mov	r4, r2
  40cc7a:	4605      	mov	r5, r0
  40cc7c:	460e      	mov	r6, r1
  40cc7e:	2b00      	cmp	r3, #0
  40cc80:	d143      	bne.n	40cd0a <__udivdi3+0x96>
  40cc82:	428a      	cmp	r2, r1
  40cc84:	d953      	bls.n	40cd2e <__udivdi3+0xba>
  40cc86:	fab2 f782 	clz	r7, r2
  40cc8a:	b157      	cbz	r7, 40cca2 <__udivdi3+0x2e>
  40cc8c:	f1c7 0620 	rsb	r6, r7, #32
  40cc90:	fa20 f606 	lsr.w	r6, r0, r6
  40cc94:	fa01 f307 	lsl.w	r3, r1, r7
  40cc98:	fa02 f407 	lsl.w	r4, r2, r7
  40cc9c:	431e      	orrs	r6, r3
  40cc9e:	fa00 f507 	lsl.w	r5, r0, r7
  40cca2:	0c21      	lsrs	r1, r4, #16
  40cca4:	fbb6 f2f1 	udiv	r2, r6, r1
  40cca8:	0c2b      	lsrs	r3, r5, #16
  40ccaa:	fb01 6712 	mls	r7, r1, r2, r6
  40ccae:	b2a0      	uxth	r0, r4
  40ccb0:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
  40ccb4:	fb00 f302 	mul.w	r3, r0, r2
  40ccb8:	42b3      	cmp	r3, r6
  40ccba:	d909      	bls.n	40ccd0 <__udivdi3+0x5c>
  40ccbc:	1936      	adds	r6, r6, r4
  40ccbe:	f102 37ff 	add.w	r7, r2, #4294967295
  40ccc2:	f080 80f6 	bcs.w	40ceb2 <__udivdi3+0x23e>
  40ccc6:	42b3      	cmp	r3, r6
  40ccc8:	f240 80f3 	bls.w	40ceb2 <__udivdi3+0x23e>
  40cccc:	3a02      	subs	r2, #2
  40ccce:	4426      	add	r6, r4
  40ccd0:	1af6      	subs	r6, r6, r3
  40ccd2:	fbb6 f3f1 	udiv	r3, r6, r1
  40ccd6:	b2ad      	uxth	r5, r5
  40ccd8:	fb01 6113 	mls	r1, r1, r3, r6
  40ccdc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  40cce0:	fb00 f003 	mul.w	r0, r0, r3
  40cce4:	4288      	cmp	r0, r1
  40cce6:	d908      	bls.n	40ccfa <__udivdi3+0x86>
  40cce8:	1909      	adds	r1, r1, r4
  40ccea:	f103 36ff 	add.w	r6, r3, #4294967295
  40ccee:	f080 80e2 	bcs.w	40ceb6 <__udivdi3+0x242>
  40ccf2:	4288      	cmp	r0, r1
  40ccf4:	f240 80df 	bls.w	40ceb6 <__udivdi3+0x242>
  40ccf8:	3b02      	subs	r3, #2
  40ccfa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40ccfe:	2300      	movs	r3, #0
  40cd00:	4610      	mov	r0, r2
  40cd02:	4619      	mov	r1, r3
  40cd04:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40cd08:	4770      	bx	lr
  40cd0a:	428b      	cmp	r3, r1
  40cd0c:	d84a      	bhi.n	40cda4 <__udivdi3+0x130>
  40cd0e:	fab3 f683 	clz	r6, r3
  40cd12:	2e00      	cmp	r6, #0
  40cd14:	d14d      	bne.n	40cdb2 <__udivdi3+0x13e>
  40cd16:	428b      	cmp	r3, r1
  40cd18:	d302      	bcc.n	40cd20 <__udivdi3+0xac>
  40cd1a:	4282      	cmp	r2, r0
  40cd1c:	f200 80d6 	bhi.w	40cecc <__udivdi3+0x258>
  40cd20:	2300      	movs	r3, #0
  40cd22:	2201      	movs	r2, #1
  40cd24:	4610      	mov	r0, r2
  40cd26:	4619      	mov	r1, r3
  40cd28:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40cd2c:	4770      	bx	lr
  40cd2e:	b912      	cbnz	r2, 40cd36 <__udivdi3+0xc2>
  40cd30:	2401      	movs	r4, #1
  40cd32:	fbb4 f4f2 	udiv	r4, r4, r2
  40cd36:	fab4 f284 	clz	r2, r4
  40cd3a:	2a00      	cmp	r2, #0
  40cd3c:	d17c      	bne.n	40ce38 <__udivdi3+0x1c4>
  40cd3e:	1b09      	subs	r1, r1, r4
  40cd40:	0c26      	lsrs	r6, r4, #16
  40cd42:	b2a7      	uxth	r7, r4
  40cd44:	2301      	movs	r3, #1
  40cd46:	fbb1 f0f6 	udiv	r0, r1, r6
  40cd4a:	0c2a      	lsrs	r2, r5, #16
  40cd4c:	fb06 1110 	mls	r1, r6, r0, r1
  40cd50:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
  40cd54:	fb07 f200 	mul.w	r2, r7, r0
  40cd58:	428a      	cmp	r2, r1
  40cd5a:	d907      	bls.n	40cd6c <__udivdi3+0xf8>
  40cd5c:	1909      	adds	r1, r1, r4
  40cd5e:	f100 3cff 	add.w	ip, r0, #4294967295
  40cd62:	d202      	bcs.n	40cd6a <__udivdi3+0xf6>
  40cd64:	428a      	cmp	r2, r1
  40cd66:	f200 80c3 	bhi.w	40cef0 <__udivdi3+0x27c>
  40cd6a:	4660      	mov	r0, ip
  40cd6c:	1a89      	subs	r1, r1, r2
  40cd6e:	fbb1 f2f6 	udiv	r2, r1, r6
  40cd72:	b2ad      	uxth	r5, r5
  40cd74:	fb06 1112 	mls	r1, r6, r2, r1
  40cd78:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  40cd7c:	fb07 f702 	mul.w	r7, r7, r2
  40cd80:	42af      	cmp	r7, r5
  40cd82:	d908      	bls.n	40cd96 <__udivdi3+0x122>
  40cd84:	192c      	adds	r4, r5, r4
  40cd86:	f102 31ff 	add.w	r1, r2, #4294967295
  40cd8a:	f080 8096 	bcs.w	40ceba <__udivdi3+0x246>
  40cd8e:	42a7      	cmp	r7, r4
  40cd90:	f240 8093 	bls.w	40ceba <__udivdi3+0x246>
  40cd94:	3a02      	subs	r2, #2
  40cd96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40cd9a:	4610      	mov	r0, r2
  40cd9c:	4619      	mov	r1, r3
  40cd9e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40cda2:	4770      	bx	lr
  40cda4:	2300      	movs	r3, #0
  40cda6:	461a      	mov	r2, r3
  40cda8:	4610      	mov	r0, r2
  40cdaa:	4619      	mov	r1, r3
  40cdac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40cdb0:	4770      	bx	lr
  40cdb2:	f1c6 0520 	rsb	r5, r6, #32
  40cdb6:	fa22 f405 	lsr.w	r4, r2, r5
  40cdba:	40b3      	lsls	r3, r6
  40cdbc:	431c      	orrs	r4, r3
  40cdbe:	ea4f 4814 	mov.w	r8, r4, lsr #16
  40cdc2:	fa21 f305 	lsr.w	r3, r1, r5
  40cdc6:	fa01 f706 	lsl.w	r7, r1, r6
  40cdca:	fa20 f505 	lsr.w	r5, r0, r5
  40cdce:	fbb3 fcf8 	udiv	ip, r3, r8
  40cdd2:	432f      	orrs	r7, r5
  40cdd4:	fb08 331c 	mls	r3, r8, ip, r3
  40cdd8:	0c3d      	lsrs	r5, r7, #16
  40cdda:	fa1f fa84 	uxth.w	sl, r4
  40cdde:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  40cde2:	fb0a f90c 	mul.w	r9, sl, ip
  40cde6:	4599      	cmp	r9, r3
  40cde8:	fa02 fb06 	lsl.w	fp, r2, r6
  40cdec:	d904      	bls.n	40cdf8 <__udivdi3+0x184>
  40cdee:	191b      	adds	r3, r3, r4
  40cdf0:	f10c 32ff 	add.w	r2, ip, #4294967295
  40cdf4:	d36d      	bcc.n	40ced2 <__udivdi3+0x25e>
  40cdf6:	4694      	mov	ip, r2
  40cdf8:	ebc9 0303 	rsb	r3, r9, r3
  40cdfc:	fbb3 f5f8 	udiv	r5, r3, r8
  40ce00:	fb08 3315 	mls	r3, r8, r5, r3
  40ce04:	b2bf      	uxth	r7, r7
  40ce06:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  40ce0a:	fb0a f805 	mul.w	r8, sl, r5
  40ce0e:	45b8      	cmp	r8, r7
  40ce10:	d904      	bls.n	40ce1c <__udivdi3+0x1a8>
  40ce12:	193f      	adds	r7, r7, r4
  40ce14:	f105 33ff 	add.w	r3, r5, #4294967295
  40ce18:	d361      	bcc.n	40cede <__udivdi3+0x26a>
  40ce1a:	461d      	mov	r5, r3
  40ce1c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  40ce20:	fbac 230b 	umull	r2, r3, ip, fp
  40ce24:	ebc8 0707 	rsb	r7, r8, r7
  40ce28:	429f      	cmp	r7, r3
  40ce2a:	f04f 0500 	mov.w	r5, #0
  40ce2e:	d349      	bcc.n	40cec4 <__udivdi3+0x250>
  40ce30:	d045      	beq.n	40cebe <__udivdi3+0x24a>
  40ce32:	4662      	mov	r2, ip
  40ce34:	462b      	mov	r3, r5
  40ce36:	e763      	b.n	40cd00 <__udivdi3+0x8c>
  40ce38:	4094      	lsls	r4, r2
  40ce3a:	f1c2 0320 	rsb	r3, r2, #32
  40ce3e:	fa21 fc03 	lsr.w	ip, r1, r3
  40ce42:	0c26      	lsrs	r6, r4, #16
  40ce44:	fa20 f303 	lsr.w	r3, r0, r3
  40ce48:	fa01 f502 	lsl.w	r5, r1, r2
  40ce4c:	fbbc f8f6 	udiv	r8, ip, r6
  40ce50:	ea43 0105 	orr.w	r1, r3, r5
  40ce54:	0c0b      	lsrs	r3, r1, #16
  40ce56:	fb06 cc18 	mls	ip, r6, r8, ip
  40ce5a:	b2a7      	uxth	r7, r4
  40ce5c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
  40ce60:	fb07 f308 	mul.w	r3, r7, r8
  40ce64:	4563      	cmp	r3, ip
  40ce66:	fa00 f502 	lsl.w	r5, r0, r2
  40ce6a:	d909      	bls.n	40ce80 <__udivdi3+0x20c>
  40ce6c:	eb1c 0c04 	adds.w	ip, ip, r4
  40ce70:	f108 32ff 	add.w	r2, r8, #4294967295
  40ce74:	d23a      	bcs.n	40ceec <__udivdi3+0x278>
  40ce76:	4563      	cmp	r3, ip
  40ce78:	d938      	bls.n	40ceec <__udivdi3+0x278>
  40ce7a:	f1a8 0802 	sub.w	r8, r8, #2
  40ce7e:	44a4      	add	ip, r4
  40ce80:	ebc3 0c0c 	rsb	ip, r3, ip
  40ce84:	fbbc f3f6 	udiv	r3, ip, r6
  40ce88:	b289      	uxth	r1, r1
  40ce8a:	fb06 cc13 	mls	ip, r6, r3, ip
  40ce8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  40ce92:	fb07 f203 	mul.w	r2, r7, r3
  40ce96:	428a      	cmp	r2, r1
  40ce98:	d907      	bls.n	40ceaa <__udivdi3+0x236>
  40ce9a:	1909      	adds	r1, r1, r4
  40ce9c:	f103 30ff 	add.w	r0, r3, #4294967295
  40cea0:	d222      	bcs.n	40cee8 <__udivdi3+0x274>
  40cea2:	428a      	cmp	r2, r1
  40cea4:	d920      	bls.n	40cee8 <__udivdi3+0x274>
  40cea6:	3b02      	subs	r3, #2
  40cea8:	4421      	add	r1, r4
  40ceaa:	1a89      	subs	r1, r1, r2
  40ceac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40ceb0:	e749      	b.n	40cd46 <__udivdi3+0xd2>
  40ceb2:	463a      	mov	r2, r7
  40ceb4:	e70c      	b.n	40ccd0 <__udivdi3+0x5c>
  40ceb6:	4633      	mov	r3, r6
  40ceb8:	e71f      	b.n	40ccfa <__udivdi3+0x86>
  40ceba:	460a      	mov	r2, r1
  40cebc:	e76b      	b.n	40cd96 <__udivdi3+0x122>
  40cebe:	40b0      	lsls	r0, r6
  40cec0:	4290      	cmp	r0, r2
  40cec2:	d2b6      	bcs.n	40ce32 <__udivdi3+0x1be>
  40cec4:	f10c 32ff 	add.w	r2, ip, #4294967295
  40cec8:	2300      	movs	r3, #0
  40ceca:	e719      	b.n	40cd00 <__udivdi3+0x8c>
  40cecc:	4633      	mov	r3, r6
  40cece:	4632      	mov	r2, r6
  40ced0:	e716      	b.n	40cd00 <__udivdi3+0x8c>
  40ced2:	4599      	cmp	r9, r3
  40ced4:	d98f      	bls.n	40cdf6 <__udivdi3+0x182>
  40ced6:	f1ac 0c02 	sub.w	ip, ip, #2
  40ceda:	4423      	add	r3, r4
  40cedc:	e78c      	b.n	40cdf8 <__udivdi3+0x184>
  40cede:	45b8      	cmp	r8, r7
  40cee0:	d99b      	bls.n	40ce1a <__udivdi3+0x1a6>
  40cee2:	3d02      	subs	r5, #2
  40cee4:	4427      	add	r7, r4
  40cee6:	e799      	b.n	40ce1c <__udivdi3+0x1a8>
  40cee8:	4603      	mov	r3, r0
  40ceea:	e7de      	b.n	40ceaa <__udivdi3+0x236>
  40ceec:	4690      	mov	r8, r2
  40ceee:	e7c7      	b.n	40ce80 <__udivdi3+0x20c>
  40cef0:	3802      	subs	r0, #2
  40cef2:	4421      	add	r1, r4
  40cef4:	e73a      	b.n	40cd6c <__udivdi3+0xf8>
  40cef6:	bf00      	nop
  40cef8:	20000c3c 	.word	0x20000c3c
  40cefc:	20004abc 	.word	0x20004abc
  40cf00:	2000893c 	.word	0x2000893c
  40cf04:	3030314d 	.word	0x3030314d
  40cf08:	00000031 	.word	0x00000031
  40cf0c:	000a6b6f 	.word	0x000a6b6f
  40cf10:	0a646c25 	.word	0x0a646c25
  40cf14:	00000000 	.word	0x00000000
  40cf18:	3030314d 	.word	0x3030314d
  40cf1c:	00000032 	.word	0x00000032
  40cf20:	3030314d 	.word	0x3030314d
  40cf24:	00000033 	.word	0x00000033
  40cf28:	6f727265 	.word	0x6f727265
  40cf2c:	63203a72 	.word	0x63203a72
  40cf30:	746e756f 	.word	0x746e756f
  40cf34:	69207265 	.word	0x69207265
  40cf38:	6c612073 	.word	0x6c612073
  40cf3c:	64616572 	.word	0x64616572
  40cf40:	63612079 	.word	0x63612079
  40cf44:	65766974 	.word	0x65766974
  40cf48:	0000000a 	.word	0x0000000a
  40cf4c:	3030314d 	.word	0x3030314d
  40cf50:	00000034 	.word	0x00000034
  40cf54:	6f727265 	.word	0x6f727265
  40cf58:	63203a72 	.word	0x63203a72
  40cf5c:	746e756f 	.word	0x746e756f
  40cf60:	69207265 	.word	0x69207265
  40cf64:	6f6e2073 	.word	0x6f6e2073
  40cf68:	63612074 	.word	0x63612074
  40cf6c:	65766974 	.word	0x65766974
  40cf70:	0000000a 	.word	0x0000000a
  40cf74:	3030314d 	.word	0x3030314d
  40cf78:	00000035 	.word	0x00000035
  40cf7c:	6f727265 	.word	0x6f727265
  40cf80:	63203a72 	.word	0x63203a72
  40cf84:	6f6e6e61 	.word	0x6f6e6e61
  40cf88:	65722074 	.word	0x65722074
  40cf8c:	63206461 	.word	0x63206461
  40cf90:	746e756f 	.word	0x746e756f
  40cf94:	77207265 	.word	0x77207265
  40cf98:	656c6968 	.word	0x656c6968
  40cf9c:	20746920 	.word	0x20746920
  40cfa0:	61207369 	.word	0x61207369
  40cfa4:	76697463 	.word	0x76697463
  40cfa8:	00000a65 	.word	0x00000a65
  40cfac:	3030314d 	.word	0x3030314d
  40cfb0:	6c252035 	.word	0x6c252035
  40cfb4:	6c252064 	.word	0x6c252064
  40cfb8:	6c252064 	.word	0x6c252064
  40cfbc:	00000064 	.word	0x00000064
  40cfc0:	6f727265 	.word	0x6f727265
  40cfc4:	72203a72 	.word	0x72203a72
  40cfc8:	20646165 	.word	0x20646165
  40cfcc:	6d6d6f63 	.word	0x6d6d6f63
  40cfd0:	20646e61 	.word	0x20646e61
  40cfd4:	75716572 	.word	0x75716572
  40cfd8:	73657269 	.word	0x73657269
  40cfdc:	72687420 	.word	0x72687420
  40cfe0:	61206565 	.word	0x61206565
  40cfe4:	6d756772 	.word	0x6d756772
  40cfe8:	73746e65 	.word	0x73746e65
  40cfec:	0000000a 	.word	0x0000000a
  40cff0:	6f727265 	.word	0x6f727265
  40cff4:	69203a72 	.word	0x69203a72
  40cff8:	6c61766e 	.word	0x6c61766e
  40cffc:	63206469 	.word	0x63206469
  40d000:	746e756f 	.word	0x746e756f
  40d004:	000a7265 	.word	0x000a7265
  40d008:	6f727265 	.word	0x6f727265
  40d00c:	69203a72 	.word	0x69203a72
  40d010:	6c61766e 	.word	0x6c61766e
  40d014:	63206469 	.word	0x63206469
  40d018:	6d756c6f 	.word	0x6d756c6f
  40d01c:	6172206e 	.word	0x6172206e
  40d020:	0a65676e 	.word	0x0a65676e
  40d024:	00000000 	.word	0x00000000
  40d028:	00207525 	.word	0x00207525
  40d02c:	3030314d 	.word	0x3030314d
  40d030:	00000036 	.word	0x00000036
  40d034:	6f727265 	.word	0x6f727265
  40d038:	63203a72 	.word	0x63203a72
  40d03c:	6f6e6e61 	.word	0x6f6e6e61
  40d040:	65722074 	.word	0x65722074
  40d044:	20746573 	.word	0x20746573
  40d048:	6e756f63 	.word	0x6e756f63
  40d04c:	20726574 	.word	0x20726574
  40d050:	6c696877 	.word	0x6c696877
  40d054:	74692065 	.word	0x74692065
  40d058:	20736920 	.word	0x20736920
  40d05c:	69746361 	.word	0x69746361
  40d060:	000a6576 	.word	0x000a6576
  40d064:	6f727265 	.word	0x6f727265
  40d068:	75203a72 	.word	0x75203a72
  40d06c:	6f6e6b6e 	.word	0x6f6e6b6e
  40d070:	63206e77 	.word	0x63206e77
  40d074:	616d6d6f 	.word	0x616d6d6f
  40d078:	2720646e 	.word	0x2720646e
  40d07c:	0a277325 	.word	0x0a277325
  40d080:	00000000 	.word	0x00000000
  40d084:	4e524157 	.word	0x4e524157
  40d088:	3a474e49 	.word	0x3a474e49
  40d08c:	706e6920 	.word	0x706e6920
  40d090:	62207475 	.word	0x62207475
  40d094:	65666675 	.word	0x65666675
  40d098:	75662072 	.word	0x75662072
  40d09c:	202e6c6c 	.word	0x202e6c6c
  40d0a0:	66754220 	.word	0x66754220
  40d0a4:	65726566 	.word	0x65726566
  40d0a8:	61642064 	.word	0x61642064
  40d0ac:	68206174 	.word	0x68206174
  40d0b0:	20657661 	.word	0x20657661
  40d0b4:	6e656562 	.word	0x6e656562
  40d0b8:	73696420 	.word	0x73696420
  40d0bc:	64726163 	.word	0x64726163
  40d0c0:	0d2e6465 	.word	0x0d2e6465
  40d0c4:	0000000a 	.word	0x0000000a
  40d0c8:	00000043 	.word	0x00000043

0040d0cc <_global_impure_ptr>:
  40d0cc:	200000f0                                ... 

0040d0d0 <basefix.6714>:
  40d0d0:	0001000a 00030002 00050004 00070006     ................
  40d0e0:	00090008 000b000a 000d000c 000f000e     ................
  40d0f0:	00000010 646c2565 00000000 33323130     ....e%ld....0123
  40d100:	37363534 42413938 46454443 00000000     456789ABCDEF....
  40d110:	33323130 37363534 62613938 66656463     0123456789abcdef
  40d120:	00000000 6c756e28 0000296c              ....(null)..

0040d12c <zeroes.6721>:
  40d12c:	30303030 30303030 30303030 30303030     0000000000000000

0040d13c <blanks.6720>:
  40d13c:	20202020 20202020 20202020 20202020                     

0040d14c <_ctype_>:
  40d14c:	20202000 20202020 28282020 20282828     .         ((((( 
  40d15c:	20202020 20202020 20202020 20202020                     
  40d16c:	10108820 10101010 10101010 10101010      ...............
  40d17c:	04040410 04040404 10040404 10101010     ................
  40d18c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40d19c:	01010101 01010101 01010101 10101010     ................
  40d1ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40d1bc:	02020202 02020202 02020202 10101010     ................
  40d1cc:	00000020 00000000 00000000 00000000      ...............
	...
  40d250:	49534f50 00000058 0000002e              POSIX.......

0040d25c <fpi.5238>:
  40d25c:	00000035 fffffbce 000003cb 00000001     5...............
  40d26c:	00000000 0000666e 74696e69 00000079     ....nf..inity...
  40d27c:	00006e61                                an..

0040d280 <fpinan.5274>:
  40d280:	00000034 fffffbce 000003cb 00000001     4...............
	...

0040d298 <tinytens>:
  40d298:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  40d2a8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  40d2b8:	64ac6f43 11680628                       Co.d(.h.

0040d2c0 <zeroes.6763>:
  40d2c0:	30303030 30303030 30303030 30303030     0000000000000000
  40d2d0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40d2e0:	00000030                                0...

0040d2e4 <blanks.6762>:
  40d2e4:	20202020 20202020 20202020 20202020                     
  40d2f4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0040d304 <__hexdig>:
	...
  40d334:	13121110 17161514 00001918 00000000     ................
  40d344:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
  40d364:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

0040d408 <__mprec_tens>:
  40d408:	00000000 3ff00000 00000000 40240000     .......?......$@
  40d418:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40d428:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40d438:	00000000 412e8480 00000000 416312d0     .......A......cA
  40d448:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40d458:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40d468:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40d478:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40d488:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40d498:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40d4a8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40d4b8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40d4c8:	79d99db4 44ea7843                       ...yCx.D

0040d4d0 <__mprec_bigtens>:
  40d4d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40d4e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40d4f0:	7f73bf3c 75154fdd                       <.s..O.u

0040d4f8 <p05.5269>:
  40d4f8:	00000005 00000019 0000007d              ........}...

0040d504 <_init>:
  40d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d506:	bf00      	nop
  40d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d50a:	bc08      	pop	{r3}
  40d50c:	469e      	mov	lr, r3
  40d50e:	4770      	bx	lr

0040d510 <__init_array_start>:
  40d510:	004059a9 	.word	0x004059a9

0040d514 <__frame_dummy_init_array_entry>:
  40d514:	0040011d                                ..@.

0040d518 <_fini>:
  40d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d51a:	bf00      	nop
  40d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d51e:	bc08      	pop	{r3}
  40d520:	469e      	mov	lr, r3
  40d522:	4770      	bx	lr

0040d524 <__fini_array_start>:
  40d524:	004000f9 	.word	0x004000f9
